
IC_tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006bb8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a4  00800060  00006bb8  00006c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00005268  00000000  00000000  00006dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001234  00000000  00000000  0000c038  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000d26c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000d3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000d51c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000f165  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00010050  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00010e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00010f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000111ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000119bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	fb e6       	ldi	r31, 0x6B	; 107
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 32 24 	call	0x4864	; 0x4864 <main>
      7a:	0c 94 da 35 	jmp	0x6bb4	; 0x6bb4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 5e 35 	jmp	0x6abc	; 0x6abc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 ef       	ldi	r26, 0xF6	; 246
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 7a 35 	jmp	0x6af4	; 0x6af4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 6a 35 	jmp	0x6ad4	; 0x6ad4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 86 35 	jmp	0x6b0c	; 0x6b0c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 6a 35 	jmp	0x6ad4	; 0x6ad4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 86 35 	jmp	0x6b0c	; 0x6b0c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 5e 35 	jmp	0x6abc	; 0x6abc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 ef       	ldi	r24, 0xF6	; 246
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 7a 35 	jmp	0x6af4	; 0x6af4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 6a 35 	jmp	0x6ad4	; 0x6ad4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 86 35 	jmp	0x6b0c	; 0x6b0c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 6a 35 	jmp	0x6ad4	; 0x6ad4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 86 35 	jmp	0x6b0c	; 0x6b0c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 6a 35 	jmp	0x6ad4	; 0x6ad4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 86 35 	jmp	0x6b0c	; 0x6b0c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 6e 35 	jmp	0x6adc	; 0x6adc <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 8a 35 	jmp	0x6b14	; 0x6b14 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <take_input_from_keypad>:
 * @param a_a_entered_word : to save the word in it
 *
 * @return : void
 ****************************************************************************/
uint8 take_input_from_keypad(uint8 * a_entered_word)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	62 97       	sbiw	r28, 0x12	; 18
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	9a 8b       	std	Y+18, r25	; 0x12
     b4c:	89 8b       	std	Y+17, r24	; 0x11
	uint8 size=0;
     b4e:	18 8a       	std	Y+16, r1	; 0x10

	LCD_moveCursor(1,0);  /*Also starting from the second row*/
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>

	uint8 pressed_key ;

	while(1){

		pressed_key = KEYPAD_getPressedKey();
     b58:	0e 94 f6 17 	call	0x2fec	; 0x2fec <KEYPAD_getPressedKey>
     b5c:	8f 87       	std	Y+15, r24	; 0x0f
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	aa ef       	ldi	r26, 0xFA	; 250
     b64:	b3 e4       	ldi	r27, 0x43	; 67
     b66:	8b 87       	std	Y+11, r24	; 0x0b
     b68:	9c 87       	std	Y+12, r25	; 0x0c
     b6a:	ad 87       	std	Y+13, r26	; 0x0d
     b6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b70:	7c 85       	ldd	r23, Y+12	; 0x0c
     b72:	8d 85       	ldd	r24, Y+13	; 0x0d
     b74:	9e 85       	ldd	r25, Y+14	; 0x0e
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	4a e7       	ldi	r20, 0x7A	; 122
     b7c:	55 e4       	ldi	r21, 0x45	; 69
     b7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	8f 83       	std	Y+7, r24	; 0x07
     b88:	98 87       	std	Y+8, r25	; 0x08
     b8a:	a9 87       	std	Y+9, r26	; 0x09
     b8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	40 e8       	ldi	r20, 0x80	; 128
     b9c:	5f e3       	ldi	r21, 0x3F	; 63
     b9e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ba2:	88 23       	and	r24, r24
     ba4:	2c f4       	brge	.+10     	; 0xbb0 <take_input_from_keypad+0x7a>
		__ticks = 1;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	9e 83       	std	Y+6, r25	; 0x06
     bac:	8d 83       	std	Y+5, r24	; 0x05
     bae:	3f c0       	rjmp	.+126    	; 0xc2e <take_input_from_keypad+0xf8>
	else if (__tmp > 65535)
     bb0:	6f 81       	ldd	r22, Y+7	; 0x07
     bb2:	78 85       	ldd	r23, Y+8	; 0x08
     bb4:	89 85       	ldd	r24, Y+9	; 0x09
     bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	3f ef       	ldi	r19, 0xFF	; 255
     bbc:	4f e7       	ldi	r20, 0x7F	; 127
     bbe:	57 e4       	ldi	r21, 0x47	; 71
     bc0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bc4:	18 16       	cp	r1, r24
     bc6:	4c f5       	brge	.+82     	; 0xc1a <take_input_from_keypad+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     bca:	7c 85       	ldd	r23, Y+12	; 0x0c
     bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bce:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e2       	ldi	r20, 0x20	; 32
     bd6:	51 e4       	ldi	r21, 0x41	; 65
     bd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	bc 01       	movw	r22, r24
     be2:	cd 01       	movw	r24, r26
     be4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	9e 83       	std	Y+6, r25	; 0x06
     bee:	8d 83       	std	Y+5, r24	; 0x05
     bf0:	0f c0       	rjmp	.+30     	; 0xc10 <take_input_from_keypad+0xda>
     bf2:	80 e9       	ldi	r24, 0x90	; 144
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	9c 83       	std	Y+4, r25	; 0x04
     bf8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <take_input_from_keypad+0xc8>
     c02:	9c 83       	std	Y+4, r25	; 0x04
     c04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	9e 81       	ldd	r25, Y+6	; 0x06
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	9e 83       	std	Y+6, r25	; 0x06
     c0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c10:	8d 81       	ldd	r24, Y+5	; 0x05
     c12:	9e 81       	ldd	r25, Y+6	; 0x06
     c14:	00 97       	sbiw	r24, 0x00	; 0
     c16:	69 f7       	brne	.-38     	; 0xbf2 <take_input_from_keypad+0xbc>
     c18:	14 c0       	rjmp	.+40     	; 0xc42 <take_input_from_keypad+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c1a:	6f 81       	ldd	r22, Y+7	; 0x07
     c1c:	78 85       	ldd	r23, Y+8	; 0x08
     c1e:	89 85       	ldd	r24, Y+9	; 0x09
     c20:	9a 85       	ldd	r25, Y+10	; 0x0a
     c22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	9e 83       	std	Y+6, r25	; 0x06
     c2c:	8d 83       	std	Y+5, r24	; 0x05
     c2e:	8d 81       	ldd	r24, Y+5	; 0x05
     c30:	9e 81       	ldd	r25, Y+6	; 0x06
     c32:	9a 83       	std	Y+2, r25	; 0x02
     c34:	89 83       	std	Y+1, r24	; 0x01
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <take_input_from_keypad+0x104>
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DELAY_BETWEEN_CLICKS_IN_MS);

		if(REMOVING_BUTTON == pressed_key) /*The user wants to remove an char*/
     c42:	8f 85       	ldd	r24, Y+15	; 0x0f
     c44:	8f 32       	cpi	r24, 0x2F	; 47
     c46:	99 f4       	brne	.+38     	; 0xc6e <take_input_from_keypad+0x138>
		{
			if(size > 0)
     c48:	88 89       	ldd	r24, Y+16	; 0x10
     c4a:	88 23       	and	r24, r24
     c4c:	09 f4       	brne	.+2      	; 0xc50 <take_input_from_keypad+0x11a>
     c4e:	84 cf       	rjmp	.-248    	; 0xb58 <take_input_from_keypad+0x22>
			{
				size--;
     c50:	88 89       	ldd	r24, Y+16	; 0x10
     c52:	81 50       	subi	r24, 0x01	; 1
     c54:	88 8b       	std	Y+16, r24	; 0x10
				LCD_moveCursor(1,size);
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	68 89       	ldd	r22, Y+16	; 0x10
     c5a:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
				LCD_writeChar(' ');
     c5e:	80 e2       	ldi	r24, 0x20	; 32
     c60:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <LCD_writeChar>
				LCD_moveCursor(1,size);
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	68 89       	ldd	r22, Y+16	; 0x10
     c68:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
     c6c:	75 cf       	rjmp	.-278    	; 0xb58 <take_input_from_keypad+0x22>
			}
		}
		else if(OK_BUTTON == pressed_key) /*The user entered the word and pressed OK */
     c6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c70:	80 32       	cpi	r24, 0x20	; 32
     c72:	99 f4       	brne	.+38     	; 0xc9a <take_input_from_keypad+0x164>
		{
			a_entered_word[size] = '\0';
     c74:	88 89       	ldd	r24, Y+16	; 0x10
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	89 89       	ldd	r24, Y+17	; 0x11
     c7c:	9a 89       	ldd	r25, Y+18	; 0x12
     c7e:	fc 01       	movw	r30, r24
     c80:	e2 0f       	add	r30, r18
     c82:	f3 1f       	adc	r31, r19
     c84:	10 82       	st	Z, r1
			return size;
     c86:	88 89       	ldd	r24, Y+16	; 0x10


	}/*while bracket*/


}
     c88:	62 96       	adiw	r28, 0x12	; 18
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret
		else if(OK_BUTTON == pressed_key) /*The user entered the word and pressed OK */
		{
			a_entered_word[size] = '\0';
			return size;
		}
		else if( '*' != pressed_key  &&  '-' != pressed_key  &&  '+' != pressed_key && '='  != pressed_key) /*The user entered a number*/
     c9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c9c:	8a 32       	cpi	r24, 0x2A	; 42
     c9e:	09 f4       	brne	.+2      	; 0xca2 <take_input_from_keypad+0x16c>
     ca0:	5b cf       	rjmp	.-330    	; 0xb58 <take_input_from_keypad+0x22>
     ca2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca4:	8d 32       	cpi	r24, 0x2D	; 45
     ca6:	09 f4       	brne	.+2      	; 0xcaa <take_input_from_keypad+0x174>
     ca8:	57 cf       	rjmp	.-338    	; 0xb58 <take_input_from_keypad+0x22>
     caa:	8f 85       	ldd	r24, Y+15	; 0x0f
     cac:	8b 32       	cpi	r24, 0x2B	; 43
     cae:	09 f4       	brne	.+2      	; 0xcb2 <take_input_from_keypad+0x17c>
     cb0:	53 cf       	rjmp	.-346    	; 0xb58 <take_input_from_keypad+0x22>
     cb2:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb4:	8d 33       	cpi	r24, 0x3D	; 61
     cb6:	09 f4       	brne	.+2      	; 0xcba <take_input_from_keypad+0x184>
     cb8:	4f cf       	rjmp	.-354    	; 0xb58 <take_input_from_keypad+0x22>
		{
			LCD_integerToString(pressed_key);
     cba:	8f 85       	ldd	r24, Y+15	; 0x0f
     cbc:	88 2f       	mov	r24, r24
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 05 24 	call	0x480a	; 0x480a <LCD_integerToString>
			a_entered_word[size] = pressed_key;
     cc4:	88 89       	ldd	r24, Y+16	; 0x10
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	89 89       	ldd	r24, Y+17	; 0x11
     ccc:	9a 89       	ldd	r25, Y+18	; 0x12
     cce:	fc 01       	movw	r30, r24
     cd0:	e2 0f       	add	r30, r18
     cd2:	f3 1f       	adc	r31, r19
     cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd6:	80 83       	st	Z, r24
			size ++;
     cd8:	88 89       	ldd	r24, Y+16	; 0x10
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	88 8b       	std	Y+16, r24	; 0x10
     cde:	3c cf       	rjmp	.-392    	; 0xb58 <take_input_from_keypad+0x22>

00000ce0 <max_size_error_display>:
 *
 * @param a_size : The max size
 *
 **********************************************************************/
void max_size_error_display(uint8 a_size)
{
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	2f 97       	sbiw	r28, 0x0f	; 15
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
     cf6:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
	LCD_writeString("The max size is");
     cfa:	80 e6       	ldi	r24, 0x60	; 96
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
	LCD_moveCursor(1,0);
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
	LCD_integerToString(a_size);
     d0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d0c:	88 2f       	mov	r24, r24
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 05 24 	call	0x480a	; 0x480a <LCD_integerToString>
	LCD_writeString(" number only");
     d14:	80 e7       	ldi	r24, 0x70	; 112
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e8       	ldi	r25, 0x80	; 128
     d20:	ab e3       	ldi	r26, 0x3B	; 59
     d22:	b5 e4       	ldi	r27, 0x45	; 69
     d24:	8b 87       	std	Y+11, r24	; 0x0b
     d26:	9c 87       	std	Y+12, r25	; 0x0c
     d28:	ad 87       	std	Y+13, r26	; 0x0d
     d2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d30:	8d 85       	ldd	r24, Y+13	; 0x0d
     d32:	9e 85       	ldd	r25, Y+14	; 0x0e
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	4a e7       	ldi	r20, 0x7A	; 122
     d3a:	55 e4       	ldi	r21, 0x45	; 69
     d3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	8f 83       	std	Y+7, r24	; 0x07
     d46:	98 87       	std	Y+8, r25	; 0x08
     d48:	a9 87       	std	Y+9, r26	; 0x09
     d4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d4c:	6f 81       	ldd	r22, Y+7	; 0x07
     d4e:	78 85       	ldd	r23, Y+8	; 0x08
     d50:	89 85       	ldd	r24, Y+9	; 0x09
     d52:	9a 85       	ldd	r25, Y+10	; 0x0a
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e8       	ldi	r20, 0x80	; 128
     d5a:	5f e3       	ldi	r21, 0x3F	; 63
     d5c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d60:	88 23       	and	r24, r24
     d62:	2c f4       	brge	.+10     	; 0xd6e <max_size_error_display+0x8e>
		__ticks = 1;
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	9e 83       	std	Y+6, r25	; 0x06
     d6a:	8d 83       	std	Y+5, r24	; 0x05
     d6c:	3f c0       	rjmp	.+126    	; 0xdec <max_size_error_display+0x10c>
	else if (__tmp > 65535)
     d6e:	6f 81       	ldd	r22, Y+7	; 0x07
     d70:	78 85       	ldd	r23, Y+8	; 0x08
     d72:	89 85       	ldd	r24, Y+9	; 0x09
     d74:	9a 85       	ldd	r25, Y+10	; 0x0a
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	3f ef       	ldi	r19, 0xFF	; 255
     d7a:	4f e7       	ldi	r20, 0x7F	; 127
     d7c:	57 e4       	ldi	r21, 0x47	; 71
     d7e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d82:	18 16       	cp	r1, r24
     d84:	4c f5       	brge	.+82     	; 0xdd8 <max_size_error_display+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d86:	6b 85       	ldd	r22, Y+11	; 0x0b
     d88:	7c 85       	ldd	r23, Y+12	; 0x0c
     d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e2       	ldi	r20, 0x20	; 32
     d94:	51 e4       	ldi	r21, 0x41	; 65
     d96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	bc 01       	movw	r22, r24
     da0:	cd 01       	movw	r24, r26
     da2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	9e 83       	std	Y+6, r25	; 0x06
     dac:	8d 83       	std	Y+5, r24	; 0x05
     dae:	0f c0       	rjmp	.+30     	; 0xdce <max_size_error_display+0xee>
     db0:	80 e9       	ldi	r24, 0x90	; 144
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	9c 83       	std	Y+4, r25	; 0x04
     db6:	8b 83       	std	Y+3, r24	; 0x03
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <max_size_error_display+0xdc>
     dc0:	9c 83       	std	Y+4, r25	; 0x04
     dc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	9e 83       	std	Y+6, r25	; 0x06
     dcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dce:	8d 81       	ldd	r24, Y+5	; 0x05
     dd0:	9e 81       	ldd	r25, Y+6	; 0x06
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	69 f7       	brne	.-38     	; 0xdb0 <max_size_error_display+0xd0>
     dd6:	14 c0       	rjmp	.+40     	; 0xe00 <max_size_error_display+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd8:	6f 81       	ldd	r22, Y+7	; 0x07
     dda:	78 85       	ldd	r23, Y+8	; 0x08
     ddc:	89 85       	ldd	r24, Y+9	; 0x09
     dde:	9a 85       	ldd	r25, Y+10	; 0x0a
     de0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	9e 83       	std	Y+6, r25	; 0x06
     dea:	8d 83       	std	Y+5, r24	; 0x05
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	9a 81       	ldd	r25, Y+2	; 0x02
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <max_size_error_display+0x118>
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000); /*delay for 3sec*/
	LCD_clearScreen();
     e00:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
}
     e04:	2f 96       	adiw	r28, 0x0f	; 15
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <power>:
 * This function is calculating the power 2 to a a number
 * @param a_num
 * @return the power
 ***********************************************************************/
uint16 power(uint8 a_num)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <power+0x6>
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <power+0x8>
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	8c 83       	std	Y+4, r24	; 0x04
	uint16 result = 1;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	9b 83       	std	Y+3, r25	; 0x03
     e2a:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0;i<a_num;i++)
     e2c:	19 82       	std	Y+1, r1	; 0x01
     e2e:	09 c0       	rjmp	.+18     	; 0xe42 <power+0x2c>
		result = result * 2;
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	9b 81       	ldd	r25, Y+3	; 0x03
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	9b 83       	std	Y+3, r25	; 0x03
     e3a:	8a 83       	std	Y+2, r24	; 0x02
 * @return the power
 ***********************************************************************/
uint16 power(uint8 a_num)
{
	uint16 result = 1;
	for(uint8 i=0;i<a_num;i++)
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	8f 5f       	subi	r24, 0xFF	; 255
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	99 81       	ldd	r25, Y+1	; 0x01
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	98 17       	cp	r25, r24
     e48:	98 f3       	brcs	.-26     	; 0xe30 <power+0x1a>
		result = result * 2;
	return result;
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	9b 81       	ldd	r25, Y+3	; 0x03
}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <test_the_ic>:
 * an returns 0 if the test fails
 *
 * @return 1 if the test is true and 0 if false
 ***********************************************************************/
uint8 test_the_ic(uint32 a_io_map , uint32  a_test , uint8 a_size)
{
     e5c:	0f 93       	push	r16
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	6d 97       	sbiw	r28, 0x1d	; 29
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	6c 8b       	std	Y+20, r22	; 0x14
     e74:	7d 8b       	std	Y+21, r23	; 0x15
     e76:	8e 8b       	std	Y+22, r24	; 0x16
     e78:	9f 8b       	std	Y+23, r25	; 0x17
     e7a:	28 8f       	std	Y+24, r18	; 0x18
     e7c:	39 8f       	std	Y+25, r19	; 0x19
     e7e:	4a 8f       	std	Y+26, r20	; 0x1a
     e80:	5b 8f       	std	Y+27, r21	; 0x1b
     e82:	0c 8f       	std	Y+28, r16	; 0x1c
	uint8 i,j;
	uint8 io_bit;
	uint8 test_bit;

	uint8 size_of_half = a_size/2;
     e84:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e86:	86 95       	lsr	r24
     e88:	8f 87       	std	Y+15, r24	; 0x0f




	GPIO_setupPortDirection(FIRST_TESTING_PORT_ID,(uint8)~(a_io_map>>8) );
     e8a:	8c 89       	ldd	r24, Y+20	; 0x14
     e8c:	9d 89       	ldd	r25, Y+21	; 0x15
     e8e:	ae 89       	ldd	r26, Y+22	; 0x16
     e90:	bf 89       	ldd	r27, Y+23	; 0x17
     e92:	89 2f       	mov	r24, r25
     e94:	9a 2f       	mov	r25, r26
     e96:	ab 2f       	mov	r26, r27
     e98:	bb 27       	eor	r27, r27
     e9a:	98 2f       	mov	r25, r24
     e9c:	90 95       	com	r25
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	69 2f       	mov	r22, r25
     ea2:	0e 94 29 17 	call	0x2e52	; 0x2e52 <GPIO_setupPortDirection>
	GPIO_writePort(FIRST_TESTING_PORT_ID, (uint8)a_test);
     ea6:	98 8d       	ldd	r25, Y+24	; 0x18
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	69 2f       	mov	r22, r25
     eac:	0e 94 6d 17 	call	0x2eda	; 0x2eda <GPIO_writePort>

	GPIO_setupPortDirection(SECOND_TESTING_PORT_ID, (uint8)~a_io_map );
     eb0:	8c 89       	ldd	r24, Y+20	; 0x14
     eb2:	98 2f       	mov	r25, r24
     eb4:	90 95       	com	r25
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	69 2f       	mov	r22, r25
     eba:	0e 94 29 17 	call	0x2e52	; 0x2e52 <GPIO_setupPortDirection>
	GPIO_writePort(SECOND_TESTING_PORT_ID, (uint8)(a_test>>8) );
     ebe:	88 8d       	ldd	r24, Y+24	; 0x18
     ec0:	99 8d       	ldd	r25, Y+25	; 0x19
     ec2:	aa 8d       	ldd	r26, Y+26	; 0x1a
     ec4:	bb 8d       	ldd	r27, Y+27	; 0x1b
     ec6:	89 2f       	mov	r24, r25
     ec8:	9a 2f       	mov	r25, r26
     eca:	ab 2f       	mov	r26, r27
     ecc:	bb 27       	eor	r27, r27
     ece:	98 2f       	mov	r25, r24
     ed0:	83 e0       	ldi	r24, 0x03	; 3
     ed2:	69 2f       	mov	r22, r25
     ed4:	0e 94 6d 17 	call	0x2eda	; 0x2eda <GPIO_writePort>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	a8 e4       	ldi	r26, 0x48	; 72
     ede:	b2 e4       	ldi	r27, 0x42	; 66
     ee0:	8b 87       	std	Y+11, r24	; 0x0b
     ee2:	9c 87       	std	Y+12, r25	; 0x0c
     ee4:	ad 87       	std	Y+13, r26	; 0x0d
     ee6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eea:	7c 85       	ldd	r23, Y+12	; 0x0c
     eec:	8d 85       	ldd	r24, Y+13	; 0x0d
     eee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	4a e7       	ldi	r20, 0x7A	; 122
     ef6:	55 e4       	ldi	r21, 0x45	; 69
     ef8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	8f 83       	std	Y+7, r24	; 0x07
     f02:	98 87       	std	Y+8, r25	; 0x08
     f04:	a9 87       	std	Y+9, r26	; 0x09
     f06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f08:	6f 81       	ldd	r22, Y+7	; 0x07
     f0a:	78 85       	ldd	r23, Y+8	; 0x08
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	5f e3       	ldi	r21, 0x3F	; 63
     f18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f1c:	88 23       	and	r24, r24
     f1e:	2c f4       	brge	.+10     	; 0xf2a <test_the_ic+0xce>
		__ticks = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	8d 83       	std	Y+5, r24	; 0x05
     f28:	3f c0       	rjmp	.+126    	; 0xfa8 <test_the_ic+0x14c>
	else if (__tmp > 65535)
     f2a:	6f 81       	ldd	r22, Y+7	; 0x07
     f2c:	78 85       	ldd	r23, Y+8	; 0x08
     f2e:	89 85       	ldd	r24, Y+9	; 0x09
     f30:	9a 85       	ldd	r25, Y+10	; 0x0a
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	4f e7       	ldi	r20, 0x7F	; 127
     f38:	57 e4       	ldi	r21, 0x47	; 71
     f3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f3e:	18 16       	cp	r1, r24
     f40:	4c f5       	brge	.+82     	; 0xf94 <test_the_ic+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f42:	6b 85       	ldd	r22, Y+11	; 0x0b
     f44:	7c 85       	ldd	r23, Y+12	; 0x0c
     f46:	8d 85       	ldd	r24, Y+13	; 0x0d
     f48:	9e 85       	ldd	r25, Y+14	; 0x0e
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e2       	ldi	r20, 0x20	; 32
     f50:	51 e4       	ldi	r21, 0x41	; 65
     f52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	bc 01       	movw	r22, r24
     f5c:	cd 01       	movw	r24, r26
     f5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	9e 83       	std	Y+6, r25	; 0x06
     f68:	8d 83       	std	Y+5, r24	; 0x05
     f6a:	0f c0       	rjmp	.+30     	; 0xf8a <test_the_ic+0x12e>
     f6c:	80 e9       	ldi	r24, 0x90	; 144
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	9c 83       	std	Y+4, r25	; 0x04
     f72:	8b 83       	std	Y+3, r24	; 0x03
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	9c 81       	ldd	r25, Y+4	; 0x04
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <test_the_ic+0x11c>
     f7c:	9c 83       	std	Y+4, r25	; 0x04
     f7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	9e 83       	std	Y+6, r25	; 0x06
     f88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	69 f7       	brne	.-38     	; 0xf6c <test_the_ic+0x110>
     f92:	14 c0       	rjmp	.+40     	; 0xfbc <test_the_ic+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f94:	6f 81       	ldd	r22, Y+7	; 0x07
     f96:	78 85       	ldd	r23, Y+8	; 0x08
     f98:	89 85       	ldd	r24, Y+9	; 0x09
     f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	9e 81       	ldd	r25, Y+6	; 0x06
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <test_the_ic+0x158>
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(DELAY_BETWEEN_INPUT_AND_OUTPUT); /*make a delay between putting input and checking the output*/

	/*to test if the port is like the expected port, if yes to this test passes, if not to this test failed */

	if( GPIO_readPort(FIRST_TESTING_PORT_ID)  ==   (a_test & 0x00FF )  /*I made AND with adjust_test which is has one's number according to half number of pins*/
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <GPIO_readPort>
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	88 8d       	ldd	r24, Y+24	; 0x18
     fcc:	99 8d       	ldd	r25, Y+25	; 0x19
     fce:	aa 8d       	ldd	r26, Y+26	; 0x1a
     fd0:	bb 8d       	ldd	r27, Y+27	; 0x1b
     fd2:	90 70       	andi	r25, 0x00	; 0
     fd4:	a0 70       	andi	r26, 0x00	; 0
     fd6:	b0 70       	andi	r27, 0x00	; 0
     fd8:	28 17       	cp	r18, r24
     fda:	39 07       	cpc	r19, r25
     fdc:	4a 07       	cpc	r20, r26
     fde:	5b 07       	cpc	r21, r27
     fe0:	e1 f4       	brne	.+56     	; 0x101a <test_the_ic+0x1be>
     fe2:	83 e0       	ldi	r24, 0x03	; 3
     fe4:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <GPIO_readPort>
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	88 8d       	ldd	r24, Y+24	; 0x18
     ff2:	99 8d       	ldd	r25, Y+25	; 0x19
     ff4:	aa 8d       	ldd	r26, Y+26	; 0x1a
     ff6:	bb 8d       	ldd	r27, Y+27	; 0x1b
     ff8:	80 70       	andi	r24, 0x00	; 0
     ffa:	a0 70       	andi	r26, 0x00	; 0
     ffc:	b0 70       	andi	r27, 0x00	; 0
     ffe:	89 2f       	mov	r24, r25
    1000:	9a 2f       	mov	r25, r26
    1002:	ab 2f       	mov	r26, r27
    1004:	bb 27       	eor	r27, r27
    1006:	28 17       	cp	r18, r24
    1008:	39 07       	cpc	r19, r25
    100a:	4a 07       	cpc	r20, r26
    100c:	5b 07       	cpc	r21, r27
    100e:	29 f4       	brne	.+10     	; 0x101a <test_the_ic+0x1be>
	 && GPIO_readPort(SECOND_TESTING_PORT_ID) == ( (a_test & 0XFF00 ) >>8 ) )
	{/*This test passes*/
		LCD_clearScreen();
    1010:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
		return 1;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	8d 8f       	std	Y+29, r24	; 0x1d
    1018:	01 c0       	rjmp	.+2      	; 0x101c <test_the_ic+0x1c0>
//		_delay_ms(500);
//		LCD_clearScreen();
//		LCD_integerToString(a_test);
//		KEYPAD_getPressedKey();

		return 0;
    101a:	1d 8e       	std	Y+29, r1	; 0x1d
    101c:	8d 8d       	ldd	r24, Y+29	; 0x1d
	}

}
    101e:	6d 96       	adiw	r28, 0x1d	; 29
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	0f 91       	pop	r16
    1030:	08 95       	ret

00001032 <search_IC_name>:
//		_delay_ms(10);
//	}
//}
//
uint32 search_IC_name(uint32 req_IC_name,uint8 *no_test_cases,uint16 *PIN_confg)
{
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	ca 5d       	subi	r28, 0xDA	; 218
    1040:	d0 40       	sbci	r29, 0x00	; 0
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	fe 01       	movw	r30, r28
    104e:	e1 53       	subi	r30, 0x31	; 49
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	60 83       	st	Z, r22
    1054:	71 83       	std	Z+1, r23	; 0x01
    1056:	82 83       	std	Z+2, r24	; 0x02
    1058:	93 83       	std	Z+3, r25	; 0x03
    105a:	fe 01       	movw	r30, r28
    105c:	ed 52       	subi	r30, 0x2D	; 45
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	51 83       	std	Z+1, r21	; 0x01
    1062:	40 83       	st	Z, r20
    1064:	fe 01       	movw	r30, r28
    1066:	eb 52       	subi	r30, 0x2B	; 43
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	31 83       	std	Z+1, r19	; 0x01
    106c:	20 83       	st	Z, r18
	uint16 last_address=0;
    106e:	fe 01       	movw	r30, r28
    1070:	e9 53       	subi	r30, 0x39	; 57
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	11 82       	std	Z+1, r1	; 0x01
    1076:	10 82       	st	Z, r1
	uint16 current_address=0x0002;
    1078:	fe 01       	movw	r30, r28
    107a:	eb 53       	subi	r30, 0x3B	; 59
    107c:	ff 4f       	sbci	r31, 0xFF	; 255
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	91 83       	std	Z+1, r25	; 0x01
    1084:	80 83       	st	Z, r24
	uint16 next_address=0;
    1086:	fe 01       	movw	r30, r28
    1088:	e7 53       	subi	r30, 0x37	; 55
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	11 82       	std	Z+1, r1	; 0x01
    108e:	10 82       	st	Z, r1
	uint32 current_data=0;
    1090:	fe 01       	movw	r30, r28
    1092:	e5 53       	subi	r30, 0x35	; 53
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	10 82       	st	Z, r1
    1098:	11 82       	std	Z+1, r1	; 0x01
    109a:	12 82       	std	Z+2, r1	; 0x02
    109c:	13 82       	std	Z+3, r1	; 0x03


	//read the last address in EEPROM/
	EEPROM_readByte(0x0000,&last_address);
    109e:	9e 01       	movw	r18, r28
    10a0:	29 53       	subi	r18, 0x39	; 57
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a9 01       	movw	r20, r18
    10ae:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    10b2:	fe 01       	movw	r30, r28
    10b4:	ef 53       	subi	r30, 0x3F	; 63
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a0 e2       	ldi	r26, 0x20	; 32
    10be:	b1 e4       	ldi	r27, 0x41	; 65
    10c0:	80 83       	st	Z, r24
    10c2:	91 83       	std	Z+1, r25	; 0x01
    10c4:	a2 83       	std	Z+2, r26	; 0x02
    10c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c8:	8e 01       	movw	r16, r28
    10ca:	03 54       	subi	r16, 0x43	; 67
    10cc:	1f 4f       	sbci	r17, 0xFF	; 255
    10ce:	fe 01       	movw	r30, r28
    10d0:	ef 53       	subi	r30, 0x3F	; 63
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	60 81       	ld	r22, Z
    10d6:	71 81       	ldd	r23, Z+1	; 0x01
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	93 81       	ldd	r25, Z+3	; 0x03
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	4a e7       	ldi	r20, 0x7A	; 122
    10e2:	55 e4       	ldi	r21, 0x45	; 69
    10e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	f8 01       	movw	r30, r16
    10ee:	80 83       	st	Z, r24
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	a2 83       	std	Z+2, r26	; 0x02
    10f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10f6:	fe 01       	movw	r30, r28
    10f8:	e3 54       	subi	r30, 0x43	; 67
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e8       	ldi	r20, 0x80	; 128
    110a:	5f e3       	ldi	r21, 0x3F	; 63
    110c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1110:	88 23       	and	r24, r24
    1112:	44 f4       	brge	.+16     	; 0x1124 <search_IC_name+0xf2>
		__ticks = 1;
    1114:	fe 01       	movw	r30, r28
    1116:	e5 54       	subi	r30, 0x45	; 69
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	80 83       	st	Z, r24
    1122:	64 c0       	rjmp	.+200    	; 0x11ec <search_IC_name+0x1ba>
	else if (__tmp > 65535)
    1124:	fe 01       	movw	r30, r28
    1126:	e3 54       	subi	r30, 0x43	; 67
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	3f ef       	ldi	r19, 0xFF	; 255
    1136:	4f e7       	ldi	r20, 0x7F	; 127
    1138:	57 e4       	ldi	r21, 0x47	; 71
    113a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    113e:	18 16       	cp	r1, r24
    1140:	0c f0       	brlt	.+2      	; 0x1144 <search_IC_name+0x112>
    1142:	43 c0       	rjmp	.+134    	; 0x11ca <search_IC_name+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1144:	fe 01       	movw	r30, r28
    1146:	ef 53       	subi	r30, 0x3F	; 63
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	60 81       	ld	r22, Z
    114c:	71 81       	ldd	r23, Z+1	; 0x01
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e2       	ldi	r20, 0x20	; 32
    1158:	51 e4       	ldi	r21, 0x41	; 65
    115a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	8e 01       	movw	r16, r28
    1164:	05 54       	subi	r16, 0x45	; 69
    1166:	1f 4f       	sbci	r17, 0xFF	; 255
    1168:	bc 01       	movw	r22, r24
    116a:	cd 01       	movw	r24, r26
    116c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	f8 01       	movw	r30, r16
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
    117a:	1f c0       	rjmp	.+62     	; 0x11ba <search_IC_name+0x188>
    117c:	fe 01       	movw	r30, r28
    117e:	e7 54       	subi	r30, 0x47	; 71
    1180:	ff 4f       	sbci	r31, 0xFF	; 255
    1182:	80 e9       	ldi	r24, 0x90	; 144
    1184:	91 e0       	ldi	r25, 0x01	; 1
    1186:	91 83       	std	Z+1, r25	; 0x01
    1188:	80 83       	st	Z, r24
    118a:	fe 01       	movw	r30, r28
    118c:	e7 54       	subi	r30, 0x47	; 71
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <search_IC_name+0x162>
    1198:	fe 01       	movw	r30, r28
    119a:	e7 54       	subi	r30, 0x47	; 71
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a2:	de 01       	movw	r26, r28
    11a4:	a5 54       	subi	r26, 0x45	; 69
    11a6:	bf 4f       	sbci	r27, 0xFF	; 255
    11a8:	fe 01       	movw	r30, r28
    11aa:	e5 54       	subi	r30, 0x45	; 69
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	80 81       	ld	r24, Z
    11b0:	91 81       	ldd	r25, Z+1	; 0x01
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	11 96       	adiw	r26, 0x01	; 1
    11b6:	9c 93       	st	X, r25
    11b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ba:	fe 01       	movw	r30, r28
    11bc:	e5 54       	subi	r30, 0x45	; 69
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	d1 f6       	brne	.-76     	; 0x117c <search_IC_name+0x14a>
    11c8:	27 c0       	rjmp	.+78     	; 0x1218 <search_IC_name+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ca:	8e 01       	movw	r16, r28
    11cc:	05 54       	subi	r16, 0x45	; 69
    11ce:	1f 4f       	sbci	r17, 0xFF	; 255
    11d0:	fe 01       	movw	r30, r28
    11d2:	e3 54       	subi	r30, 0x43	; 67
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	f8 01       	movw	r30, r16
    11e8:	91 83       	std	Z+1, r25	; 0x01
    11ea:	80 83       	st	Z, r24
    11ec:	de 01       	movw	r26, r28
    11ee:	a9 54       	subi	r26, 0x49	; 73
    11f0:	bf 4f       	sbci	r27, 0xFF	; 255
    11f2:	fe 01       	movw	r30, r28
    11f4:	e5 54       	subi	r30, 0x45	; 69
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	80 81       	ld	r24, Z
    11fa:	91 81       	ldd	r25, Z+1	; 0x01
    11fc:	8d 93       	st	X+, r24
    11fe:	9c 93       	st	X, r25
    1200:	fe 01       	movw	r30, r28
    1202:	e9 54       	subi	r30, 0x49	; 73
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <search_IC_name+0x1d8>
    120e:	fe 01       	movw	r30, r28
    1210:	e9 54       	subi	r30, 0x49	; 73
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	80 83       	st	Z, r24
	_delay_ms(10);
	last_address=last_address<<8;
    1218:	fe 01       	movw	r30, r28
    121a:	e9 53       	subi	r30, 0x39	; 57
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	80 81       	ld	r24, Z
    1220:	91 81       	ldd	r25, Z+1	; 0x01
    1222:	98 2f       	mov	r25, r24
    1224:	88 27       	eor	r24, r24
    1226:	fe 01       	movw	r30, r28
    1228:	e9 53       	subi	r30, 0x39	; 57
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	91 83       	std	Z+1, r25	; 0x01
    122e:	80 83       	st	Z, r24
	EEPROM_readByte(0x0001,&last_address);
    1230:	9e 01       	movw	r18, r28
    1232:	29 53       	subi	r18, 0x39	; 57
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	a9 01       	movw	r20, r18
    1240:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    1244:	fe 01       	movw	r30, r28
    1246:	ed 54       	subi	r30, 0x4D	; 77
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a0 e2       	ldi	r26, 0x20	; 32
    1250:	b1 e4       	ldi	r27, 0x41	; 65
    1252:	80 83       	st	Z, r24
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	a2 83       	std	Z+2, r26	; 0x02
    1258:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125a:	8e 01       	movw	r16, r28
    125c:	01 55       	subi	r16, 0x51	; 81
    125e:	1f 4f       	sbci	r17, 0xFF	; 255
    1260:	fe 01       	movw	r30, r28
    1262:	ed 54       	subi	r30, 0x4D	; 77
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	60 81       	ld	r22, Z
    1268:	71 81       	ldd	r23, Z+1	; 0x01
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	93 81       	ldd	r25, Z+3	; 0x03
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	4a e7       	ldi	r20, 0x7A	; 122
    1274:	55 e4       	ldi	r21, 0x45	; 69
    1276:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	f8 01       	movw	r30, r16
    1280:	80 83       	st	Z, r24
    1282:	91 83       	std	Z+1, r25	; 0x01
    1284:	a2 83       	std	Z+2, r26	; 0x02
    1286:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1288:	fe 01       	movw	r30, r28
    128a:	e1 55       	subi	r30, 0x51	; 81
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	60 81       	ld	r22, Z
    1290:	71 81       	ldd	r23, Z+1	; 0x01
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	93 81       	ldd	r25, Z+3	; 0x03
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e8       	ldi	r20, 0x80	; 128
    129c:	5f e3       	ldi	r21, 0x3F	; 63
    129e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12a2:	88 23       	and	r24, r24
    12a4:	44 f4       	brge	.+16     	; 0x12b6 <search_IC_name+0x284>
		__ticks = 1;
    12a6:	fe 01       	movw	r30, r28
    12a8:	e3 55       	subi	r30, 0x53	; 83
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	91 83       	std	Z+1, r25	; 0x01
    12b2:	80 83       	st	Z, r24
    12b4:	64 c0       	rjmp	.+200    	; 0x137e <search_IC_name+0x34c>
	else if (__tmp > 65535)
    12b6:	fe 01       	movw	r30, r28
    12b8:	e1 55       	subi	r30, 0x51	; 81
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	4f e7       	ldi	r20, 0x7F	; 127
    12ca:	57 e4       	ldi	r21, 0x47	; 71
    12cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	0c f0       	brlt	.+2      	; 0x12d6 <search_IC_name+0x2a4>
    12d4:	43 c0       	rjmp	.+134    	; 0x135c <search_IC_name+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d6:	fe 01       	movw	r30, r28
    12d8:	ed 54       	subi	r30, 0x4D	; 77
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	60 81       	ld	r22, Z
    12de:	71 81       	ldd	r23, Z+1	; 0x01
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e2       	ldi	r20, 0x20	; 32
    12ea:	51 e4       	ldi	r21, 0x41	; 65
    12ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	8e 01       	movw	r16, r28
    12f6:	03 55       	subi	r16, 0x53	; 83
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	f8 01       	movw	r30, r16
    1308:	91 83       	std	Z+1, r25	; 0x01
    130a:	80 83       	st	Z, r24
    130c:	1f c0       	rjmp	.+62     	; 0x134c <search_IC_name+0x31a>
    130e:	fe 01       	movw	r30, r28
    1310:	e5 55       	subi	r30, 0x55	; 85
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	80 e9       	ldi	r24, 0x90	; 144
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	80 83       	st	Z, r24
    131c:	fe 01       	movw	r30, r28
    131e:	e5 55       	subi	r30, 0x55	; 85
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	80 81       	ld	r24, Z
    1324:	91 81       	ldd	r25, Z+1	; 0x01
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <search_IC_name+0x2f4>
    132a:	fe 01       	movw	r30, r28
    132c:	e5 55       	subi	r30, 0x55	; 85
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	91 83       	std	Z+1, r25	; 0x01
    1332:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1334:	de 01       	movw	r26, r28
    1336:	a3 55       	subi	r26, 0x53	; 83
    1338:	bf 4f       	sbci	r27, 0xFF	; 255
    133a:	fe 01       	movw	r30, r28
    133c:	e3 55       	subi	r30, 0x53	; 83
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 81       	ld	r24, Z
    1342:	91 81       	ldd	r25, Z+1	; 0x01
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	11 96       	adiw	r26, 0x01	; 1
    1348:	9c 93       	st	X, r25
    134a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134c:	fe 01       	movw	r30, r28
    134e:	e3 55       	subi	r30, 0x53	; 83
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	d1 f6       	brne	.-76     	; 0x130e <search_IC_name+0x2dc>
    135a:	27 c0       	rjmp	.+78     	; 0x13aa <search_IC_name+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135c:	8e 01       	movw	r16, r28
    135e:	03 55       	subi	r16, 0x53	; 83
    1360:	1f 4f       	sbci	r17, 0xFF	; 255
    1362:	fe 01       	movw	r30, r28
    1364:	e1 55       	subi	r30, 0x51	; 81
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	60 81       	ld	r22, Z
    136a:	71 81       	ldd	r23, Z+1	; 0x01
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	93 81       	ldd	r25, Z+3	; 0x03
    1370:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	f8 01       	movw	r30, r16
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24
    137e:	de 01       	movw	r26, r28
    1380:	a7 55       	subi	r26, 0x57	; 87
    1382:	bf 4f       	sbci	r27, 0xFF	; 255
    1384:	fe 01       	movw	r30, r28
    1386:	e3 55       	subi	r30, 0x53	; 83
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	8d 93       	st	X+, r24
    1390:	9c 93       	st	X, r25
    1392:	fe 01       	movw	r30, r28
    1394:	e7 55       	subi	r30, 0x57	; 87
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	80 81       	ld	r24, Z
    139a:	91 81       	ldd	r25, Z+1	; 0x01
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <search_IC_name+0x36a>
    13a0:	fe 01       	movw	r30, r28
    13a2:	e7 55       	subi	r30, 0x57	; 87
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	91 83       	std	Z+1, r25	; 0x01
    13a8:	80 83       	st	Z, r24
	_delay_ms(10);



	//Read the next address from EEPROM/
	EEPROM_readByte(current_address+3,&next_address);
    13aa:	fe 01       	movw	r30, r28
    13ac:	eb 53       	subi	r30, 0x3B	; 59
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	03 96       	adiw	r24, 0x03	; 3
    13b6:	cc 01       	movw	r24, r24
    13b8:	a0 e0       	ldi	r26, 0x00	; 0
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	9e 01       	movw	r18, r28
    13be:	27 53       	subi	r18, 0x37	; 55
    13c0:	3f 4f       	sbci	r19, 0xFF	; 255
    13c2:	bc 01       	movw	r22, r24
    13c4:	cd 01       	movw	r24, r26
    13c6:	a9 01       	movw	r20, r18
    13c8:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    13cc:	fe 01       	movw	r30, r28
    13ce:	eb 55       	subi	r30, 0x5B	; 91
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	a0 e2       	ldi	r26, 0x20	; 32
    13d8:	b1 e4       	ldi	r27, 0x41	; 65
    13da:	80 83       	st	Z, r24
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	a2 83       	std	Z+2, r26	; 0x02
    13e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e2:	8e 01       	movw	r16, r28
    13e4:	0f 55       	subi	r16, 0x5F	; 95
    13e6:	1f 4f       	sbci	r17, 0xFF	; 255
    13e8:	fe 01       	movw	r30, r28
    13ea:	eb 55       	subi	r30, 0x5B	; 91
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	4a e7       	ldi	r20, 0x7A	; 122
    13fc:	55 e4       	ldi	r21, 0x45	; 69
    13fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	f8 01       	movw	r30, r16
    1408:	80 83       	st	Z, r24
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	a2 83       	std	Z+2, r26	; 0x02
    140e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1410:	fe 01       	movw	r30, r28
    1412:	ef 55       	subi	r30, 0x5F	; 95
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e8       	ldi	r20, 0x80	; 128
    1424:	5f e3       	ldi	r21, 0x3F	; 63
    1426:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    142a:	88 23       	and	r24, r24
    142c:	44 f4       	brge	.+16     	; 0x143e <search_IC_name+0x40c>
		__ticks = 1;
    142e:	fe 01       	movw	r30, r28
    1430:	e1 56       	subi	r30, 0x61	; 97
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	80 83       	st	Z, r24
    143c:	64 c0       	rjmp	.+200    	; 0x1506 <search_IC_name+0x4d4>
	else if (__tmp > 65535)
    143e:	fe 01       	movw	r30, r28
    1440:	ef 55       	subi	r30, 0x5F	; 95
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	60 81       	ld	r22, Z
    1446:	71 81       	ldd	r23, Z+1	; 0x01
    1448:	82 81       	ldd	r24, Z+2	; 0x02
    144a:	93 81       	ldd	r25, Z+3	; 0x03
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	3f ef       	ldi	r19, 0xFF	; 255
    1450:	4f e7       	ldi	r20, 0x7F	; 127
    1452:	57 e4       	ldi	r21, 0x47	; 71
    1454:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1458:	18 16       	cp	r1, r24
    145a:	0c f0       	brlt	.+2      	; 0x145e <search_IC_name+0x42c>
    145c:	43 c0       	rjmp	.+134    	; 0x14e4 <search_IC_name+0x4b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145e:	fe 01       	movw	r30, r28
    1460:	eb 55       	subi	r30, 0x5B	; 91
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e2       	ldi	r20, 0x20	; 32
    1472:	51 e4       	ldi	r21, 0x41	; 65
    1474:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	8e 01       	movw	r16, r28
    147e:	01 56       	subi	r16, 0x61	; 97
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	bc 01       	movw	r22, r24
    1484:	cd 01       	movw	r24, r26
    1486:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	f8 01       	movw	r30, r16
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	80 83       	st	Z, r24
    1494:	1f c0       	rjmp	.+62     	; 0x14d4 <search_IC_name+0x4a2>
    1496:	fe 01       	movw	r30, r28
    1498:	e3 56       	subi	r30, 0x63	; 99
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	80 e9       	ldi	r24, 0x90	; 144
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	80 83       	st	Z, r24
    14a4:	fe 01       	movw	r30, r28
    14a6:	e3 56       	subi	r30, 0x63	; 99
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	80 81       	ld	r24, Z
    14ac:	91 81       	ldd	r25, Z+1	; 0x01
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <search_IC_name+0x47c>
    14b2:	fe 01       	movw	r30, r28
    14b4:	e3 56       	subi	r30, 0x63	; 99
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14bc:	de 01       	movw	r26, r28
    14be:	a1 56       	subi	r26, 0x61	; 97
    14c0:	bf 4f       	sbci	r27, 0xFF	; 255
    14c2:	fe 01       	movw	r30, r28
    14c4:	e1 56       	subi	r30, 0x61	; 97
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	80 81       	ld	r24, Z
    14ca:	91 81       	ldd	r25, Z+1	; 0x01
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	9c 93       	st	X, r25
    14d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d4:	fe 01       	movw	r30, r28
    14d6:	e1 56       	subi	r30, 0x61	; 97
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	80 81       	ld	r24, Z
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	d1 f6       	brne	.-76     	; 0x1496 <search_IC_name+0x464>
    14e2:	27 c0       	rjmp	.+78     	; 0x1532 <search_IC_name+0x500>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e4:	8e 01       	movw	r16, r28
    14e6:	01 56       	subi	r16, 0x61	; 97
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	fe 01       	movw	r30, r28
    14ec:	ef 55       	subi	r30, 0x5F	; 95
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	60 81       	ld	r22, Z
    14f2:	71 81       	ldd	r23, Z+1	; 0x01
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	93 81       	ldd	r25, Z+3	; 0x03
    14f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	f8 01       	movw	r30, r16
    1502:	91 83       	std	Z+1, r25	; 0x01
    1504:	80 83       	st	Z, r24
    1506:	de 01       	movw	r26, r28
    1508:	a5 56       	subi	r26, 0x65	; 101
    150a:	bf 4f       	sbci	r27, 0xFF	; 255
    150c:	fe 01       	movw	r30, r28
    150e:	e1 56       	subi	r30, 0x61	; 97
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	8d 93       	st	X+, r24
    1518:	9c 93       	st	X, r25
    151a:	fe 01       	movw	r30, r28
    151c:	e5 56       	subi	r30, 0x65	; 101
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	80 81       	ld	r24, Z
    1522:	91 81       	ldd	r25, Z+1	; 0x01
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <search_IC_name+0x4f2>
    1528:	fe 01       	movw	r30, r28
    152a:	e5 56       	subi	r30, 0x65	; 101
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24
	_delay_ms(10);
	next_address=next_address<<8;
    1532:	fe 01       	movw	r30, r28
    1534:	e7 53       	subi	r30, 0x37	; 55
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	80 81       	ld	r24, Z
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	98 2f       	mov	r25, r24
    153e:	88 27       	eor	r24, r24
    1540:	fe 01       	movw	r30, r28
    1542:	e7 53       	subi	r30, 0x37	; 55
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
	EEPROM_readByte(current_address+4,&next_address);
    154a:	fe 01       	movw	r30, r28
    154c:	eb 53       	subi	r30, 0x3B	; 59
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	04 96       	adiw	r24, 0x04	; 4
    1556:	cc 01       	movw	r24, r24
    1558:	a0 e0       	ldi	r26, 0x00	; 0
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	9e 01       	movw	r18, r28
    155e:	27 53       	subi	r18, 0x37	; 55
    1560:	3f 4f       	sbci	r19, 0xFF	; 255
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	a9 01       	movw	r20, r18
    1568:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    156c:	fe 01       	movw	r30, r28
    156e:	e9 56       	subi	r30, 0x69	; 105
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a0 e2       	ldi	r26, 0x20	; 32
    1578:	b1 e4       	ldi	r27, 0x41	; 65
    157a:	80 83       	st	Z, r24
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	a2 83       	std	Z+2, r26	; 0x02
    1580:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1582:	8e 01       	movw	r16, r28
    1584:	0d 56       	subi	r16, 0x6D	; 109
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	fe 01       	movw	r30, r28
    158a:	e9 56       	subi	r30, 0x69	; 105
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	60 81       	ld	r22, Z
    1590:	71 81       	ldd	r23, Z+1	; 0x01
    1592:	82 81       	ldd	r24, Z+2	; 0x02
    1594:	93 81       	ldd	r25, Z+3	; 0x03
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	4a e7       	ldi	r20, 0x7A	; 122
    159c:	55 e4       	ldi	r21, 0x45	; 69
    159e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	f8 01       	movw	r30, r16
    15a8:	80 83       	st	Z, r24
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	a2 83       	std	Z+2, r26	; 0x02
    15ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15b0:	fe 01       	movw	r30, r28
    15b2:	ed 56       	subi	r30, 0x6D	; 109
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	60 81       	ld	r22, Z
    15b8:	71 81       	ldd	r23, Z+1	; 0x01
    15ba:	82 81       	ldd	r24, Z+2	; 0x02
    15bc:	93 81       	ldd	r25, Z+3	; 0x03
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e8       	ldi	r20, 0x80	; 128
    15c4:	5f e3       	ldi	r21, 0x3F	; 63
    15c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15ca:	88 23       	and	r24, r24
    15cc:	44 f4       	brge	.+16     	; 0x15de <search_IC_name+0x5ac>
		__ticks = 1;
    15ce:	fe 01       	movw	r30, r28
    15d0:	ef 56       	subi	r30, 0x6F	; 111
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	80 83       	st	Z, r24
    15dc:	64 c0       	rjmp	.+200    	; 0x16a6 <search_IC_name+0x674>
	else if (__tmp > 65535)
    15de:	fe 01       	movw	r30, r28
    15e0:	ed 56       	subi	r30, 0x6D	; 109
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	3f ef       	ldi	r19, 0xFF	; 255
    15f0:	4f e7       	ldi	r20, 0x7F	; 127
    15f2:	57 e4       	ldi	r21, 0x47	; 71
    15f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15f8:	18 16       	cp	r1, r24
    15fa:	0c f0       	brlt	.+2      	; 0x15fe <search_IC_name+0x5cc>
    15fc:	43 c0       	rjmp	.+134    	; 0x1684 <search_IC_name+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fe:	fe 01       	movw	r30, r28
    1600:	e9 56       	subi	r30, 0x69	; 105
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	60 81       	ld	r22, Z
    1606:	71 81       	ldd	r23, Z+1	; 0x01
    1608:	82 81       	ldd	r24, Z+2	; 0x02
    160a:	93 81       	ldd	r25, Z+3	; 0x03
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e2       	ldi	r20, 0x20	; 32
    1612:	51 e4       	ldi	r21, 0x41	; 65
    1614:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	8e 01       	movw	r16, r28
    161e:	0f 56       	subi	r16, 0x6F	; 111
    1620:	1f 4f       	sbci	r17, 0xFF	; 255
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	f8 01       	movw	r30, r16
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	80 83       	st	Z, r24
    1634:	1f c0       	rjmp	.+62     	; 0x1674 <search_IC_name+0x642>
    1636:	fe 01       	movw	r30, r28
    1638:	e1 57       	subi	r30, 0x71	; 113
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 e9       	ldi	r24, 0x90	; 144
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	91 83       	std	Z+1, r25	; 0x01
    1642:	80 83       	st	Z, r24
    1644:	fe 01       	movw	r30, r28
    1646:	e1 57       	subi	r30, 0x71	; 113
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <search_IC_name+0x61c>
    1652:	fe 01       	movw	r30, r28
    1654:	e1 57       	subi	r30, 0x71	; 113
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	91 83       	std	Z+1, r25	; 0x01
    165a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165c:	de 01       	movw	r26, r28
    165e:	af 56       	subi	r26, 0x6F	; 111
    1660:	bf 4f       	sbci	r27, 0xFF	; 255
    1662:	fe 01       	movw	r30, r28
    1664:	ef 56       	subi	r30, 0x6F	; 111
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	11 96       	adiw	r26, 0x01	; 1
    1670:	9c 93       	st	X, r25
    1672:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1674:	fe 01       	movw	r30, r28
    1676:	ef 56       	subi	r30, 0x6F	; 111
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	80 81       	ld	r24, Z
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	d1 f6       	brne	.-76     	; 0x1636 <search_IC_name+0x604>
    1682:	27 c0       	rjmp	.+78     	; 0x16d2 <search_IC_name+0x6a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1684:	8e 01       	movw	r16, r28
    1686:	0f 56       	subi	r16, 0x6F	; 111
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	fe 01       	movw	r30, r28
    168c:	ed 56       	subi	r30, 0x6D	; 109
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	60 81       	ld	r22, Z
    1692:	71 81       	ldd	r23, Z+1	; 0x01
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	93 81       	ldd	r25, Z+3	; 0x03
    1698:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	f8 01       	movw	r30, r16
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	80 83       	st	Z, r24
    16a6:	de 01       	movw	r26, r28
    16a8:	a3 57       	subi	r26, 0x73	; 115
    16aa:	bf 4f       	sbci	r27, 0xFF	; 255
    16ac:	fe 01       	movw	r30, r28
    16ae:	ef 56       	subi	r30, 0x6F	; 111
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	80 81       	ld	r24, Z
    16b4:	91 81       	ldd	r25, Z+1	; 0x01
    16b6:	8d 93       	st	X+, r24
    16b8:	9c 93       	st	X, r25
    16ba:	fe 01       	movw	r30, r28
    16bc:	e3 57       	subi	r30, 0x73	; 115
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 81       	ld	r24, Z
    16c2:	91 81       	ldd	r25, Z+1	; 0x01
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <search_IC_name+0x692>
    16c8:	fe 01       	movw	r30, r28
    16ca:	e3 57       	subi	r30, 0x73	; 115
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	91 83       	std	Z+1, r25	; 0x01
    16d0:	80 83       	st	Z, r24
	_delay_ms(10);

	//Read the current data(IC name) from EEPROM/
	EEPROM_readByte(current_address,&current_data);
    16d2:	fe 01       	movw	r30, r28
    16d4:	eb 53       	subi	r30, 0x3B	; 59
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	cc 01       	movw	r24, r24
    16de:	a0 e0       	ldi	r26, 0x00	; 0
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	9e 01       	movw	r18, r28
    16e4:	25 53       	subi	r18, 0x35	; 53
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
    16e8:	bc 01       	movw	r22, r24
    16ea:	cd 01       	movw	r24, r26
    16ec:	a9 01       	movw	r20, r18
    16ee:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    16f2:	fe 01       	movw	r30, r28
    16f4:	e7 57       	subi	r30, 0x77	; 119
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e2       	ldi	r26, 0x20	; 32
    16fe:	b1 e4       	ldi	r27, 0x41	; 65
    1700:	80 83       	st	Z, r24
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	a2 83       	std	Z+2, r26	; 0x02
    1706:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	8e 01       	movw	r16, r28
    170a:	0b 57       	subi	r16, 0x7B	; 123
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	fe 01       	movw	r30, r28
    1710:	e7 57       	subi	r30, 0x77	; 119
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	4a e7       	ldi	r20, 0x7A	; 122
    1722:	55 e4       	ldi	r21, 0x45	; 69
    1724:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	f8 01       	movw	r30, r16
    172e:	80 83       	st	Z, r24
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	a2 83       	std	Z+2, r26	; 0x02
    1734:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1736:	fe 01       	movw	r30, r28
    1738:	eb 57       	subi	r30, 0x7B	; 123
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1750:	88 23       	and	r24, r24
    1752:	44 f4       	brge	.+16     	; 0x1764 <search_IC_name+0x732>
		__ticks = 1;
    1754:	fe 01       	movw	r30, r28
    1756:	ed 57       	subi	r30, 0x7D	; 125
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    1762:	64 c0       	rjmp	.+200    	; 0x182c <search_IC_name+0x7fa>
	else if (__tmp > 65535)
    1764:	fe 01       	movw	r30, r28
    1766:	eb 57       	subi	r30, 0x7B	; 123
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	60 81       	ld	r22, Z
    176c:	71 81       	ldd	r23, Z+1	; 0x01
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	3f ef       	ldi	r19, 0xFF	; 255
    1776:	4f e7       	ldi	r20, 0x7F	; 127
    1778:	57 e4       	ldi	r21, 0x47	; 71
    177a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    177e:	18 16       	cp	r1, r24
    1780:	0c f0       	brlt	.+2      	; 0x1784 <search_IC_name+0x752>
    1782:	43 c0       	rjmp	.+134    	; 0x180a <search_IC_name+0x7d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1784:	fe 01       	movw	r30, r28
    1786:	e7 57       	subi	r30, 0x77	; 119
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	40 e2       	ldi	r20, 0x20	; 32
    1798:	51 e4       	ldi	r21, 0x41	; 65
    179a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	8e 01       	movw	r16, r28
    17a4:	0d 57       	subi	r16, 0x7D	; 125
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	f8 01       	movw	r30, r16
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
    17ba:	1f c0       	rjmp	.+62     	; 0x17fa <search_IC_name+0x7c8>
    17bc:	fe 01       	movw	r30, r28
    17be:	ef 57       	subi	r30, 0x7F	; 127
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	80 e9       	ldi	r24, 0x90	; 144
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
    17ca:	fe 01       	movw	r30, r28
    17cc:	ef 57       	subi	r30, 0x7F	; 127
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <search_IC_name+0x7a2>
    17d8:	fe 01       	movw	r30, r28
    17da:	ef 57       	subi	r30, 0x7F	; 127
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e2:	de 01       	movw	r26, r28
    17e4:	ad 57       	subi	r26, 0x7D	; 125
    17e6:	bf 4f       	sbci	r27, 0xFF	; 255
    17e8:	fe 01       	movw	r30, r28
    17ea:	ed 57       	subi	r30, 0x7D	; 125
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	11 96       	adiw	r26, 0x01	; 1
    17f6:	9c 93       	st	X, r25
    17f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fa:	fe 01       	movw	r30, r28
    17fc:	ed 57       	subi	r30, 0x7D	; 125
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	d1 f6       	brne	.-76     	; 0x17bc <search_IC_name+0x78a>
    1808:	27 c0       	rjmp	.+78     	; 0x1858 <search_IC_name+0x826>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180a:	8e 01       	movw	r16, r28
    180c:	0d 57       	subi	r16, 0x7D	; 125
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	fe 01       	movw	r30, r28
    1812:	eb 57       	subi	r30, 0x7B	; 123
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	60 81       	ld	r22, Z
    1818:	71 81       	ldd	r23, Z+1	; 0x01
    181a:	82 81       	ldd	r24, Z+2	; 0x02
    181c:	93 81       	ldd	r25, Z+3	; 0x03
    181e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	f8 01       	movw	r30, r16
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	80 83       	st	Z, r24
    182c:	de 01       	movw	r26, r28
    182e:	a1 58       	subi	r26, 0x81	; 129
    1830:	bf 4f       	sbci	r27, 0xFF	; 255
    1832:	fe 01       	movw	r30, r28
    1834:	ed 57       	subi	r30, 0x7D	; 125
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 81       	ld	r24, Z
    183a:	91 81       	ldd	r25, Z+1	; 0x01
    183c:	8d 93       	st	X+, r24
    183e:	9c 93       	st	X, r25
    1840:	fe 01       	movw	r30, r28
    1842:	e1 58       	subi	r30, 0x81	; 129
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <search_IC_name+0x818>
    184e:	fe 01       	movw	r30, r28
    1850:	e1 58       	subi	r30, 0x81	; 129
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	80 83       	st	Z, r24
	_delay_ms(10);
	current_data=current_data<<8;
    1858:	fe 01       	movw	r30, r28
    185a:	e5 53       	subi	r30, 0x35	; 53
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	a2 81       	ldd	r26, Z+2	; 0x02
    1864:	b3 81       	ldd	r27, Z+3	; 0x03
    1866:	ba 2f       	mov	r27, r26
    1868:	a9 2f       	mov	r26, r25
    186a:	98 2f       	mov	r25, r24
    186c:	88 27       	eor	r24, r24
    186e:	fe 01       	movw	r30, r28
    1870:	e5 53       	subi	r30, 0x35	; 53
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	80 83       	st	Z, r24
    1876:	91 83       	std	Z+1, r25	; 0x01
    1878:	a2 83       	std	Z+2, r26	; 0x02
    187a:	b3 83       	std	Z+3, r27	; 0x03
	EEPROM_readByte(current_address+1,&current_data);
    187c:	fe 01       	movw	r30, r28
    187e:	eb 53       	subi	r30, 0x3B	; 59
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	80 81       	ld	r24, Z
    1884:	91 81       	ldd	r25, Z+1	; 0x01
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	cc 01       	movw	r24, r24
    188a:	a0 e0       	ldi	r26, 0x00	; 0
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	9e 01       	movw	r18, r28
    1890:	25 53       	subi	r18, 0x35	; 53
    1892:	3f 4f       	sbci	r19, 0xFF	; 255
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	a9 01       	movw	r20, r18
    189a:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    189e:	fe 01       	movw	r30, r28
    18a0:	e5 58       	subi	r30, 0x85	; 133
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a0 e2       	ldi	r26, 0x20	; 32
    18aa:	b1 e4       	ldi	r27, 0x41	; 65
    18ac:	80 83       	st	Z, r24
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	a2 83       	std	Z+2, r26	; 0x02
    18b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b4:	8e 01       	movw	r16, r28
    18b6:	09 58       	subi	r16, 0x89	; 137
    18b8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ba:	fe 01       	movw	r30, r28
    18bc:	e5 58       	subi	r30, 0x85	; 133
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	60 81       	ld	r22, Z
    18c2:	71 81       	ldd	r23, Z+1	; 0x01
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	4a e7       	ldi	r20, 0x7A	; 122
    18ce:	55 e4       	ldi	r21, 0x45	; 69
    18d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	f8 01       	movw	r30, r16
    18da:	80 83       	st	Z, r24
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	a2 83       	std	Z+2, r26	; 0x02
    18e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18e2:	fe 01       	movw	r30, r28
    18e4:	e9 58       	subi	r30, 0x89	; 137
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	44 f4       	brge	.+16     	; 0x1910 <search_IC_name+0x8de>
		__ticks = 1;
    1900:	fe 01       	movw	r30, r28
    1902:	eb 58       	subi	r30, 0x8B	; 139
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
    190e:	64 c0       	rjmp	.+200    	; 0x19d8 <search_IC_name+0x9a6>
	else if (__tmp > 65535)
    1910:	fe 01       	movw	r30, r28
    1912:	e9 58       	subi	r30, 0x89	; 137
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	3f ef       	ldi	r19, 0xFF	; 255
    1922:	4f e7       	ldi	r20, 0x7F	; 127
    1924:	57 e4       	ldi	r21, 0x47	; 71
    1926:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    192a:	18 16       	cp	r1, r24
    192c:	0c f0       	brlt	.+2      	; 0x1930 <search_IC_name+0x8fe>
    192e:	43 c0       	rjmp	.+134    	; 0x19b6 <search_IC_name+0x984>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	fe 01       	movw	r30, r28
    1932:	e5 58       	subi	r30, 0x85	; 133
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	8e 01       	movw	r16, r28
    1950:	0b 58       	subi	r16, 0x8B	; 139
    1952:	1f 4f       	sbci	r17, 0xFF	; 255
    1954:	bc 01       	movw	r22, r24
    1956:	cd 01       	movw	r24, r26
    1958:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	f8 01       	movw	r30, r16
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	80 83       	st	Z, r24
    1966:	1f c0       	rjmp	.+62     	; 0x19a6 <search_IC_name+0x974>
    1968:	fe 01       	movw	r30, r28
    196a:	ed 58       	subi	r30, 0x8D	; 141
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	80 e9       	ldi	r24, 0x90	; 144
    1970:	91 e0       	ldi	r25, 0x01	; 1
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
    1976:	fe 01       	movw	r30, r28
    1978:	ed 58       	subi	r30, 0x8D	; 141
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	80 81       	ld	r24, Z
    197e:	91 81       	ldd	r25, Z+1	; 0x01
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <search_IC_name+0x94e>
    1984:	fe 01       	movw	r30, r28
    1986:	ed 58       	subi	r30, 0x8D	; 141
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198e:	de 01       	movw	r26, r28
    1990:	ab 58       	subi	r26, 0x8B	; 139
    1992:	bf 4f       	sbci	r27, 0xFF	; 255
    1994:	fe 01       	movw	r30, r28
    1996:	eb 58       	subi	r30, 0x8B	; 139
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 81       	ld	r24, Z
    199c:	91 81       	ldd	r25, Z+1	; 0x01
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	11 96       	adiw	r26, 0x01	; 1
    19a2:	9c 93       	st	X, r25
    19a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a6:	fe 01       	movw	r30, r28
    19a8:	eb 58       	subi	r30, 0x8B	; 139
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	d1 f6       	brne	.-76     	; 0x1968 <search_IC_name+0x936>
    19b4:	27 c0       	rjmp	.+78     	; 0x1a04 <search_IC_name+0x9d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b6:	8e 01       	movw	r16, r28
    19b8:	0b 58       	subi	r16, 0x8B	; 139
    19ba:	1f 4f       	sbci	r17, 0xFF	; 255
    19bc:	fe 01       	movw	r30, r28
    19be:	e9 58       	subi	r30, 0x89	; 137
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	f8 01       	movw	r30, r16
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	80 83       	st	Z, r24
    19d8:	de 01       	movw	r26, r28
    19da:	af 58       	subi	r26, 0x8F	; 143
    19dc:	bf 4f       	sbci	r27, 0xFF	; 255
    19de:	fe 01       	movw	r30, r28
    19e0:	eb 58       	subi	r30, 0x8B	; 139
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	91 81       	ldd	r25, Z+1	; 0x01
    19e8:	8d 93       	st	X+, r24
    19ea:	9c 93       	st	X, r25
    19ec:	fe 01       	movw	r30, r28
    19ee:	ef 58       	subi	r30, 0x8F	; 143
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	80 81       	ld	r24, Z
    19f4:	91 81       	ldd	r25, Z+1	; 0x01
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <search_IC_name+0x9c4>
    19fa:	fe 01       	movw	r30, r28
    19fc:	ef 58       	subi	r30, 0x8F	; 143
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
	_delay_ms(10);
	current_data=current_data<<8;
    1a04:	fe 01       	movw	r30, r28
    1a06:	e5 53       	subi	r30, 0x35	; 53
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 81       	ld	r24, Z
    1a0c:	91 81       	ldd	r25, Z+1	; 0x01
    1a0e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a10:	b3 81       	ldd	r27, Z+3	; 0x03
    1a12:	ba 2f       	mov	r27, r26
    1a14:	a9 2f       	mov	r26, r25
    1a16:	98 2f       	mov	r25, r24
    1a18:	88 27       	eor	r24, r24
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e5 53       	subi	r30, 0x35	; 53
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	80 83       	st	Z, r24
    1a22:	91 83       	std	Z+1, r25	; 0x01
    1a24:	a2 83       	std	Z+2, r26	; 0x02
    1a26:	b3 83       	std	Z+3, r27	; 0x03
	EEPROM_readByte(current_address+2,&current_data);
    1a28:	fe 01       	movw	r30, r28
    1a2a:	eb 53       	subi	r30, 0x3B	; 59
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	02 96       	adiw	r24, 0x02	; 2
    1a34:	cc 01       	movw	r24, r24
    1a36:	a0 e0       	ldi	r26, 0x00	; 0
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	9e 01       	movw	r18, r28
    1a3c:	25 53       	subi	r18, 0x35	; 53
    1a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	a9 01       	movw	r20, r18
    1a46:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e3 59       	subi	r30, 0x93	; 147
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a0 e2       	ldi	r26, 0x20	; 32
    1a56:	b1 e4       	ldi	r27, 0x41	; 65
    1a58:	80 83       	st	Z, r24
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	a2 83       	std	Z+2, r26	; 0x02
    1a5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a60:	8e 01       	movw	r16, r28
    1a62:	07 59       	subi	r16, 0x97	; 151
    1a64:	1f 4f       	sbci	r17, 0xFF	; 255
    1a66:	fe 01       	movw	r30, r28
    1a68:	e3 59       	subi	r30, 0x93	; 147
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	60 81       	ld	r22, Z
    1a6e:	71 81       	ldd	r23, Z+1	; 0x01
    1a70:	82 81       	ldd	r24, Z+2	; 0x02
    1a72:	93 81       	ldd	r25, Z+3	; 0x03
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	4a e7       	ldi	r20, 0x7A	; 122
    1a7a:	55 e4       	ldi	r21, 0x45	; 69
    1a7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	f8 01       	movw	r30, r16
    1a86:	80 83       	st	Z, r24
    1a88:	91 83       	std	Z+1, r25	; 0x01
    1a8a:	a2 83       	std	Z+2, r26	; 0x02
    1a8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e7 59       	subi	r30, 0x97	; 151
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e8       	ldi	r20, 0x80	; 128
    1aa2:	5f e3       	ldi	r21, 0x3F	; 63
    1aa4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	44 f4       	brge	.+16     	; 0x1abc <search_IC_name+0xa8a>
		__ticks = 1;
    1aac:	fe 01       	movw	r30, r28
    1aae:	e9 59       	subi	r30, 0x99	; 153
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	80 83       	st	Z, r24
    1aba:	64 c0       	rjmp	.+200    	; 0x1b84 <search_IC_name+0xb52>
	else if (__tmp > 65535)
    1abc:	fe 01       	movw	r30, r28
    1abe:	e7 59       	subi	r30, 0x97	; 151
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	60 81       	ld	r22, Z
    1ac4:	71 81       	ldd	r23, Z+1	; 0x01
    1ac6:	82 81       	ldd	r24, Z+2	; 0x02
    1ac8:	93 81       	ldd	r25, Z+3	; 0x03
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	3f ef       	ldi	r19, 0xFF	; 255
    1ace:	4f e7       	ldi	r20, 0x7F	; 127
    1ad0:	57 e4       	ldi	r21, 0x47	; 71
    1ad2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ad6:	18 16       	cp	r1, r24
    1ad8:	0c f0       	brlt	.+2      	; 0x1adc <search_IC_name+0xaaa>
    1ada:	43 c0       	rjmp	.+134    	; 0x1b62 <search_IC_name+0xb30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1adc:	fe 01       	movw	r30, r28
    1ade:	e3 59       	subi	r30, 0x93	; 147
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	60 81       	ld	r22, Z
    1ae4:	71 81       	ldd	r23, Z+1	; 0x01
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	93 81       	ldd	r25, Z+3	; 0x03
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	8e 01       	movw	r16, r28
    1afc:	09 59       	subi	r16, 0x99	; 153
    1afe:	1f 4f       	sbci	r17, 0xFF	; 255
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	80 83       	st	Z, r24
    1b12:	1f c0       	rjmp	.+62     	; 0x1b52 <search_IC_name+0xb20>
    1b14:	fe 01       	movw	r30, r28
    1b16:	eb 59       	subi	r30, 0x9B	; 155
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	80 e9       	ldi	r24, 0x90	; 144
    1b1c:	91 e0       	ldi	r25, 0x01	; 1
    1b1e:	91 83       	std	Z+1, r25	; 0x01
    1b20:	80 83       	st	Z, r24
    1b22:	fe 01       	movw	r30, r28
    1b24:	eb 59       	subi	r30, 0x9B	; 155
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	80 81       	ld	r24, Z
    1b2a:	91 81       	ldd	r25, Z+1	; 0x01
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <search_IC_name+0xafa>
    1b30:	fe 01       	movw	r30, r28
    1b32:	eb 59       	subi	r30, 0x9B	; 155
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	91 83       	std	Z+1, r25	; 0x01
    1b38:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3a:	de 01       	movw	r26, r28
    1b3c:	a9 59       	subi	r26, 0x99	; 153
    1b3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b40:	fe 01       	movw	r30, r28
    1b42:	e9 59       	subi	r30, 0x99	; 153
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	11 96       	adiw	r26, 0x01	; 1
    1b4e:	9c 93       	st	X, r25
    1b50:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b52:	fe 01       	movw	r30, r28
    1b54:	e9 59       	subi	r30, 0x99	; 153
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 81       	ld	r24, Z
    1b5a:	91 81       	ldd	r25, Z+1	; 0x01
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	d1 f6       	brne	.-76     	; 0x1b14 <search_IC_name+0xae2>
    1b60:	28 c0       	rjmp	.+80     	; 0x1bb2 <search_IC_name+0xb80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b62:	8e 01       	movw	r16, r28
    1b64:	09 59       	subi	r16, 0x99	; 153
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e7 59       	subi	r30, 0x97	; 151
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	60 81       	ld	r22, Z
    1b70:	71 81       	ldd	r23, Z+1	; 0x01
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	f8 01       	movw	r30, r16
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	80 83       	st	Z, r24
    1b84:	de 01       	movw	r26, r28
    1b86:	ad 59       	subi	r26, 0x9D	; 157
    1b88:	bf 4f       	sbci	r27, 0xFF	; 255
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	e9 59       	subi	r30, 0x99	; 153
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	80 81       	ld	r24, Z
    1b92:	91 81       	ldd	r25, Z+1	; 0x01
    1b94:	11 96       	adiw	r26, 0x01	; 1
    1b96:	9c 93       	st	X, r25
    1b98:	8e 93       	st	-X, r24
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ed 59       	subi	r30, 0x9D	; 157
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <search_IC_name+0xb72>
    1ba8:	fe 01       	movw	r30, r28
    1baa:	ed 59       	subi	r30, 0x9D	; 157
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	80 83       	st	Z, r24


	while(1)
	{

		if(current_address == last_address){
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	e9 53       	subi	r30, 0x39	; 57
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	20 81       	ld	r18, Z
    1bba:	31 81       	ldd	r19, Z+1	; 0x01
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	eb 53       	subi	r30, 0x3B	; 59
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	82 17       	cp	r24, r18
    1bc8:	93 07       	cpc	r25, r19
    1bca:	69 f4       	brne	.+26     	; 0x1be6 <search_IC_name+0xbb4>
			return -1;
    1bcc:	2f ef       	ldi	r18, 0xFF	; 255
    1bce:	3f ef       	ldi	r19, 0xFF	; 255
    1bd0:	4f ef       	ldi	r20, 0xFF	; 255
    1bd2:	5f ef       	ldi	r21, 0xFF	; 255
    1bd4:	c9 52       	subi	r28, 0x29	; 41
    1bd6:	df 4f       	sbci	r29, 0xFF	; 255
    1bd8:	28 83       	st	Y, r18
    1bda:	39 83       	std	Y+1, r19	; 0x01
    1bdc:	4a 83       	std	Y+2, r20	; 0x02
    1bde:	5b 83       	std	Y+3, r21	; 0x03
    1be0:	c7 5d       	subi	r28, 0xD7	; 215
    1be2:	d0 40       	sbci	r29, 0x00	; 0
    1be4:	bf c4       	rjmp	.+2430   	; 0x2564 <search_IC_name+0x1532>





		if(current_data == req_IC_name)
    1be6:	fe 01       	movw	r30, r28
    1be8:	e5 53       	subi	r30, 0x35	; 53
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	20 81       	ld	r18, Z
    1bee:	31 81       	ldd	r19, Z+1	; 0x01
    1bf0:	42 81       	ldd	r20, Z+2	; 0x02
    1bf2:	53 81       	ldd	r21, Z+3	; 0x03
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e1 53       	subi	r30, 0x31	; 49
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 81       	ld	r24, Z
    1bfc:	91 81       	ldd	r25, Z+1	; 0x01
    1bfe:	a2 81       	ldd	r26, Z+2	; 0x02
    1c00:	b3 81       	ldd	r27, Z+3	; 0x03
    1c02:	28 17       	cp	r18, r24
    1c04:	39 07       	cpc	r19, r25
    1c06:	4a 07       	cpc	r20, r26
    1c08:	5b 07       	cpc	r21, r27
    1c0a:	09 f0       	breq	.+2      	; 0x1c0e <search_IC_name+0xbdc>
    1c0c:	c8 c1       	rjmp	.+912    	; 0x1f9e <search_IC_name+0xf6c>
		{

			*no_test_cases =  ( ( (next_address  - current_address -7) / 2 ) ) ;
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e7 53       	subi	r30, 0x37	; 55
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	20 81       	ld	r18, Z
    1c16:	31 81       	ldd	r19, Z+1	; 0x01
    1c18:	fe 01       	movw	r30, r28
    1c1a:	eb 53       	subi	r30, 0x3B	; 59
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 81       	ld	r24, Z
    1c20:	91 81       	ldd	r25, Z+1	; 0x01
    1c22:	a9 01       	movw	r20, r18
    1c24:	48 1b       	sub	r20, r24
    1c26:	59 0b       	sbc	r21, r25
    1c28:	ca 01       	movw	r24, r20
    1c2a:	07 97       	sbiw	r24, 0x07	; 7
    1c2c:	96 95       	lsr	r25
    1c2e:	87 95       	ror	r24
    1c30:	fe 01       	movw	r30, r28
    1c32:	ed 52       	subi	r30, 0x2D	; 45
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	01 90       	ld	r0, Z+
    1c38:	f0 81       	ld	r31, Z
    1c3a:	e0 2d       	mov	r30, r0
    1c3c:	80 83       	st	Z, r24


			//Read the PIN configuration from EEPROM/
			EEPROM_readByte(current_address+0x05,PIN_confg);
    1c3e:	fe 01       	movw	r30, r28
    1c40:	eb 53       	subi	r30, 0x3B	; 59
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	80 81       	ld	r24, Z
    1c46:	91 81       	ldd	r25, Z+1	; 0x01
    1c48:	05 96       	adiw	r24, 0x05	; 5
    1c4a:	cc 01       	movw	r24, r24
    1c4c:	a0 e0       	ldi	r26, 0x00	; 0
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	fe 01       	movw	r30, r28
    1c52:	eb 52       	subi	r30, 0x2B	; 43
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	20 81       	ld	r18, Z
    1c58:	31 81       	ldd	r19, Z+1	; 0x01
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	a9 01       	movw	r20, r18
    1c60:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    1c64:	fe 01       	movw	r30, r28
    1c66:	e1 5a       	subi	r30, 0xA1	; 161
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a0 e2       	ldi	r26, 0x20	; 32
    1c70:	b1 e4       	ldi	r27, 0x41	; 65
    1c72:	80 83       	st	Z, r24
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	a2 83       	std	Z+2, r26	; 0x02
    1c78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7a:	8e 01       	movw	r16, r28
    1c7c:	05 5a       	subi	r16, 0xA5	; 165
    1c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c80:	fe 01       	movw	r30, r28
    1c82:	e1 5a       	subi	r30, 0xA1	; 161
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	60 81       	ld	r22, Z
    1c88:	71 81       	ldd	r23, Z+1	; 0x01
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a e7       	ldi	r20, 0x7A	; 122
    1c94:	55 e4       	ldi	r21, 0x45	; 69
    1c96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	80 83       	st	Z, r24
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	a2 83       	std	Z+2, r26	; 0x02
    1ca6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e5 5a       	subi	r30, 0xA5	; 165
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	44 f4       	brge	.+16     	; 0x1cd6 <search_IC_name+0xca4>
		__ticks = 1;
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e7 5a       	subi	r30, 0xA7	; 167
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	91 83       	std	Z+1, r25	; 0x01
    1cd2:	80 83       	st	Z, r24
    1cd4:	64 c0       	rjmp	.+200    	; 0x1d9e <search_IC_name+0xd6c>
	else if (__tmp > 65535)
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	e5 5a       	subi	r30, 0xA5	; 165
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	60 81       	ld	r22, Z
    1cde:	71 81       	ldd	r23, Z+1	; 0x01
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	93 81       	ldd	r25, Z+3	; 0x03
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	57 e4       	ldi	r21, 0x47	; 71
    1cec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	0c f0       	brlt	.+2      	; 0x1cf6 <search_IC_name+0xcc4>
    1cf4:	43 c0       	rjmp	.+134    	; 0x1d7c <search_IC_name+0xd4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e1 5a       	subi	r30, 0xA1	; 161
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	8e 01       	movw	r16, r28
    1d16:	07 5a       	subi	r16, 0xA7	; 167
    1d18:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	f8 01       	movw	r30, r16
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
    1d2c:	1f c0       	rjmp	.+62     	; 0x1d6c <search_IC_name+0xd3a>
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e9 5a       	subi	r30, 0xA9	; 169
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 e9       	ldi	r24, 0x90	; 144
    1d36:	91 e0       	ldi	r25, 0x01	; 1
    1d38:	91 83       	std	Z+1, r25	; 0x01
    1d3a:	80 83       	st	Z, r24
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e9 5a       	subi	r30, 0xA9	; 169
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <search_IC_name+0xd14>
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e9 5a       	subi	r30, 0xA9	; 169
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	91 83       	std	Z+1, r25	; 0x01
    1d52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	de 01       	movw	r26, r28
    1d56:	a7 5a       	subi	r26, 0xA7	; 167
    1d58:	bf 4f       	sbci	r27, 0xFF	; 255
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e7 5a       	subi	r30, 0xA7	; 167
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 81       	ld	r24, Z
    1d62:	91 81       	ldd	r25, Z+1	; 0x01
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	11 96       	adiw	r26, 0x01	; 1
    1d68:	9c 93       	st	X, r25
    1d6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e7 5a       	subi	r30, 0xA7	; 167
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	d1 f6       	brne	.-76     	; 0x1d2e <search_IC_name+0xcfc>
    1d7a:	27 c0       	rjmp	.+78     	; 0x1dca <search_IC_name+0xd98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7c:	8e 01       	movw	r16, r28
    1d7e:	07 5a       	subi	r16, 0xA7	; 167
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	fe 01       	movw	r30, r28
    1d84:	e5 5a       	subi	r30, 0xA5	; 165
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	60 81       	ld	r22, Z
    1d8a:	71 81       	ldd	r23, Z+1	; 0x01
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	f8 01       	movw	r30, r16
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	80 83       	st	Z, r24
    1d9e:	de 01       	movw	r26, r28
    1da0:	ab 5a       	subi	r26, 0xAB	; 171
    1da2:	bf 4f       	sbci	r27, 0xFF	; 255
    1da4:	fe 01       	movw	r30, r28
    1da6:	e7 5a       	subi	r30, 0xA7	; 167
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 81       	ld	r24, Z
    1dac:	91 81       	ldd	r25, Z+1	; 0x01
    1dae:	8d 93       	st	X+, r24
    1db0:	9c 93       	st	X, r25
    1db2:	fe 01       	movw	r30, r28
    1db4:	eb 5a       	subi	r30, 0xAB	; 171
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	91 81       	ldd	r25, Z+1	; 0x01
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <search_IC_name+0xd8a>
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	eb 5a       	subi	r30, 0xAB	; 171
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	91 83       	std	Z+1, r25	; 0x01
    1dc8:	80 83       	st	Z, r24
			_delay_ms(10);
			(*PIN_confg)=(*PIN_confg)<<8;
    1dca:	fe 01       	movw	r30, r28
    1dcc:	eb 52       	subi	r30, 0x2B	; 43
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	01 90       	ld	r0, Z+
    1dd2:	f0 81       	ld	r31, Z
    1dd4:	e0 2d       	mov	r30, r0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	91 81       	ldd	r25, Z+1	; 0x01
    1dda:	98 2f       	mov	r25, r24
    1ddc:	88 27       	eor	r24, r24
    1dde:	fe 01       	movw	r30, r28
    1de0:	eb 52       	subi	r30, 0x2B	; 43
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	01 90       	ld	r0, Z+
    1de6:	f0 81       	ld	r31, Z
    1de8:	e0 2d       	mov	r30, r0
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	80 83       	st	Z, r24
			EEPROM_readByte(current_address+0x06,PIN_confg);
    1dee:	fe 01       	movw	r30, r28
    1df0:	eb 53       	subi	r30, 0x3B	; 59
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	80 81       	ld	r24, Z
    1df6:	91 81       	ldd	r25, Z+1	; 0x01
    1df8:	06 96       	adiw	r24, 0x06	; 6
    1dfa:	cc 01       	movw	r24, r24
    1dfc:	a0 e0       	ldi	r26, 0x00	; 0
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	fe 01       	movw	r30, r28
    1e02:	eb 52       	subi	r30, 0x2B	; 43
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	20 81       	ld	r18, Z
    1e08:	31 81       	ldd	r19, Z+1	; 0x01
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	a9 01       	movw	r20, r18
    1e10:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    1e14:	fe 01       	movw	r30, r28
    1e16:	ef 5a       	subi	r30, 0xAF	; 175
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	a0 e2       	ldi	r26, 0x20	; 32
    1e20:	b1 e4       	ldi	r27, 0x41	; 65
    1e22:	80 83       	st	Z, r24
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	a2 83       	std	Z+2, r26	; 0x02
    1e28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2a:	8e 01       	movw	r16, r28
    1e2c:	03 5b       	subi	r16, 0xB3	; 179
    1e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e30:	fe 01       	movw	r30, r28
    1e32:	ef 5a       	subi	r30, 0xAF	; 175
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a e7       	ldi	r20, 0x7A	; 122
    1e44:	55 e4       	ldi	r21, 0x45	; 69
    1e46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	f8 01       	movw	r30, r16
    1e50:	80 83       	st	Z, r24
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	a2 83       	std	Z+2, r26	; 0x02
    1e56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e3 5b       	subi	r30, 0xB3	; 179
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	60 81       	ld	r22, Z
    1e60:	71 81       	ldd	r23, Z+1	; 0x01
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e72:	88 23       	and	r24, r24
    1e74:	44 f4       	brge	.+16     	; 0x1e86 <search_IC_name+0xe54>
		__ticks = 1;
    1e76:	fe 01       	movw	r30, r28
    1e78:	e5 5b       	subi	r30, 0xB5	; 181
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	80 83       	st	Z, r24
    1e84:	64 c0       	rjmp	.+200    	; 0x1f4e <search_IC_name+0xf1c>
	else if (__tmp > 65535)
    1e86:	fe 01       	movw	r30, r28
    1e88:	e3 5b       	subi	r30, 0xB3	; 179
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	60 81       	ld	r22, Z
    1e8e:	71 81       	ldd	r23, Z+1	; 0x01
    1e90:	82 81       	ldd	r24, Z+2	; 0x02
    1e92:	93 81       	ldd	r25, Z+3	; 0x03
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	3f ef       	ldi	r19, 0xFF	; 255
    1e98:	4f e7       	ldi	r20, 0x7F	; 127
    1e9a:	57 e4       	ldi	r21, 0x47	; 71
    1e9c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ea0:	18 16       	cp	r1, r24
    1ea2:	0c f0       	brlt	.+2      	; 0x1ea6 <search_IC_name+0xe74>
    1ea4:	43 c0       	rjmp	.+134    	; 0x1f2c <search_IC_name+0xefa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	ef 5a       	subi	r30, 0xAF	; 175
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	60 81       	ld	r22, Z
    1eae:	71 81       	ldd	r23, Z+1	; 0x01
    1eb0:	82 81       	ldd	r24, Z+2	; 0x02
    1eb2:	93 81       	ldd	r25, Z+3	; 0x03
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e2       	ldi	r20, 0x20	; 32
    1eba:	51 e4       	ldi	r21, 0x41	; 65
    1ebc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	8e 01       	movw	r16, r28
    1ec6:	05 5b       	subi	r16, 0xB5	; 181
    1ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	80 83       	st	Z, r24
    1edc:	1f c0       	rjmp	.+62     	; 0x1f1c <search_IC_name+0xeea>
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e7 5b       	subi	r30, 0xB7	; 183
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 e9       	ldi	r24, 0x90	; 144
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	80 83       	st	Z, r24
    1eec:	fe 01       	movw	r30, r28
    1eee:	e7 5b       	subi	r30, 0xB7	; 183
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	80 81       	ld	r24, Z
    1ef4:	91 81       	ldd	r25, Z+1	; 0x01
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <search_IC_name+0xec4>
    1efa:	fe 01       	movw	r30, r28
    1efc:	e7 5b       	subi	r30, 0xB7	; 183
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	91 83       	std	Z+1, r25	; 0x01
    1f02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f04:	de 01       	movw	r26, r28
    1f06:	a5 5b       	subi	r26, 0xB5	; 181
    1f08:	bf 4f       	sbci	r27, 0xFF	; 255
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e5 5b       	subi	r30, 0xB5	; 181
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	80 81       	ld	r24, Z
    1f12:	91 81       	ldd	r25, Z+1	; 0x01
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	11 96       	adiw	r26, 0x01	; 1
    1f18:	9c 93       	st	X, r25
    1f1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e5 5b       	subi	r30, 0xB5	; 181
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	80 81       	ld	r24, Z
    1f24:	91 81       	ldd	r25, Z+1	; 0x01
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	d1 f6       	brne	.-76     	; 0x1ede <search_IC_name+0xeac>
    1f2a:	28 c0       	rjmp	.+80     	; 0x1f7c <search_IC_name+0xf4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2c:	8e 01       	movw	r16, r28
    1f2e:	05 5b       	subi	r16, 0xB5	; 181
    1f30:	1f 4f       	sbci	r17, 0xFF	; 255
    1f32:	fe 01       	movw	r30, r28
    1f34:	e3 5b       	subi	r30, 0xB3	; 179
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	60 81       	ld	r22, Z
    1f3a:	71 81       	ldd	r23, Z+1	; 0x01
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	93 81       	ldd	r25, Z+3	; 0x03
    1f40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	f8 01       	movw	r30, r16
    1f4a:	91 83       	std	Z+1, r25	; 0x01
    1f4c:	80 83       	st	Z, r24
    1f4e:	de 01       	movw	r26, r28
    1f50:	a9 5b       	subi	r26, 0xB9	; 185
    1f52:	bf 4f       	sbci	r27, 0xFF	; 255
    1f54:	fe 01       	movw	r30, r28
    1f56:	e5 5b       	subi	r30, 0xB5	; 181
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	80 81       	ld	r24, Z
    1f5c:	91 81       	ldd	r25, Z+1	; 0x01
    1f5e:	11 96       	adiw	r26, 0x01	; 1
    1f60:	9c 93       	st	X, r25
    1f62:	8e 93       	st	-X, r24
    1f64:	fe 01       	movw	r30, r28
    1f66:	e9 5b       	subi	r30, 0xB9	; 185
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 81       	ld	r24, Z
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <search_IC_name+0xf3c>
    1f72:	fe 01       	movw	r30, r28
    1f74:	e9 5b       	subi	r30, 0xB9	; 185
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	91 83       	std	Z+1, r25	; 0x01
    1f7a:	80 83       	st	Z, r24
			_delay_ms(10);

			return current_address;
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	eb 53       	subi	r30, 0x3B	; 59
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	80 81       	ld	r24, Z
    1f84:	91 81       	ldd	r25, Z+1	; 0x01
    1f86:	9c 01       	movw	r18, r24
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	50 e0       	ldi	r21, 0x00	; 0
    1f8c:	c9 52       	subi	r28, 0x29	; 41
    1f8e:	df 4f       	sbci	r29, 0xFF	; 255
    1f90:	28 83       	st	Y, r18
    1f92:	39 83       	std	Y+1, r19	; 0x01
    1f94:	4a 83       	std	Y+2, r20	; 0x02
    1f96:	5b 83       	std	Y+3, r21	; 0x03
    1f98:	c7 5d       	subi	r28, 0xD7	; 215
    1f9a:	d0 40       	sbci	r29, 0x00	; 0
    1f9c:	e3 c2       	rjmp	.+1478   	; 0x2564 <search_IC_name+0x1532>
		}
		else
		{
			current_address=next_address;
    1f9e:	de 01       	movw	r26, r28
    1fa0:	ab 53       	subi	r26, 0x3B	; 59
    1fa2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e7 53       	subi	r30, 0x37	; 55
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 81       	ld	r24, Z
    1fac:	91 81       	ldd	r25, Z+1	; 0x01
    1fae:	8d 93       	st	X+, r24
    1fb0:	9c 93       	st	X, r25
		}

		//Read the next address from EEPROM/
		EEPROM_readByte(current_address+3,&next_address);
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	eb 53       	subi	r30, 0x3B	; 59
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	80 81       	ld	r24, Z
    1fba:	91 81       	ldd	r25, Z+1	; 0x01
    1fbc:	03 96       	adiw	r24, 0x03	; 3
    1fbe:	cc 01       	movw	r24, r24
    1fc0:	a0 e0       	ldi	r26, 0x00	; 0
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	9e 01       	movw	r18, r28
    1fc6:	27 53       	subi	r18, 0x37	; 55
    1fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	a9 01       	movw	r20, r18
    1fd0:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	ed 5b       	subi	r30, 0xBD	; 189
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a0 e2       	ldi	r26, 0x20	; 32
    1fe0:	b1 e4       	ldi	r27, 0x41	; 65
    1fe2:	80 83       	st	Z, r24
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	a2 83       	std	Z+2, r26	; 0x02
    1fe8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	8e 01       	movw	r16, r28
    1fec:	01 5c       	subi	r16, 0xC1	; 193
    1fee:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	ed 5b       	subi	r30, 0xBD	; 189
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	60 81       	ld	r22, Z
    1ff8:	71 81       	ldd	r23, Z+1	; 0x01
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	4a e7       	ldi	r20, 0x7A	; 122
    2004:	55 e4       	ldi	r21, 0x45	; 69
    2006:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	f8 01       	movw	r30, r16
    2010:	80 83       	st	Z, r24
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	a2 83       	std	Z+2, r26	; 0x02
    2016:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2018:	fe 01       	movw	r30, r28
    201a:	ff 96       	adiw	r30, 0x3f	; 63
    201c:	60 81       	ld	r22, Z
    201e:	71 81       	ldd	r23, Z+1	; 0x01
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f e3       	ldi	r21, 0x3F	; 63
    202c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2030:	88 23       	and	r24, r24
    2032:	2c f4       	brge	.+10     	; 0x203e <search_IC_name+0x100c>
		__ticks = 1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9e af       	std	Y+62, r25	; 0x3e
    203a:	8d af       	std	Y+61, r24	; 0x3d
    203c:	46 c0       	rjmp	.+140    	; 0x20ca <search_IC_name+0x1098>
	else if (__tmp > 65535)
    203e:	fe 01       	movw	r30, r28
    2040:	ff 96       	adiw	r30, 0x3f	; 63
    2042:	60 81       	ld	r22, Z
    2044:	71 81       	ldd	r23, Z+1	; 0x01
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	93 81       	ldd	r25, Z+3	; 0x03
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	3f ef       	ldi	r19, 0xFF	; 255
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	57 e4       	ldi	r21, 0x47	; 71
    2052:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	64 f5       	brge	.+88     	; 0x20b2 <search_IC_name+0x1080>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	fe 01       	movw	r30, r28
    205c:	ed 5b       	subi	r30, 0xBD	; 189
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	60 81       	ld	r22, Z
    2062:	71 81       	ldd	r23, Z+1	; 0x01
    2064:	82 81       	ldd	r24, Z+2	; 0x02
    2066:	93 81       	ldd	r25, Z+3	; 0x03
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e2       	ldi	r20, 0x20	; 32
    206e:	51 e4       	ldi	r21, 0x41	; 65
    2070:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9e af       	std	Y+62, r25	; 0x3e
    2086:	8d af       	std	Y+61, r24	; 0x3d
    2088:	0f c0       	rjmp	.+30     	; 0x20a8 <search_IC_name+0x1076>
    208a:	80 e9       	ldi	r24, 0x90	; 144
    208c:	91 e0       	ldi	r25, 0x01	; 1
    208e:	9c af       	std	Y+60, r25	; 0x3c
    2090:	8b af       	std	Y+59, r24	; 0x3b
    2092:	8b ad       	ldd	r24, Y+59	; 0x3b
    2094:	9c ad       	ldd	r25, Y+60	; 0x3c
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <search_IC_name+0x1064>
    209a:	9c af       	std	Y+60, r25	; 0x3c
    209c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209e:	8d ad       	ldd	r24, Y+61	; 0x3d
    20a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	9e af       	std	Y+62, r25	; 0x3e
    20a6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    20aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	69 f7       	brne	.-38     	; 0x208a <search_IC_name+0x1058>
    20b0:	16 c0       	rjmp	.+44     	; 0x20de <search_IC_name+0x10ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b2:	fe 01       	movw	r30, r28
    20b4:	ff 96       	adiw	r30, 0x3f	; 63
    20b6:	60 81       	ld	r22, Z
    20b8:	71 81       	ldd	r23, Z+1	; 0x01
    20ba:	82 81       	ldd	r24, Z+2	; 0x02
    20bc:	93 81       	ldd	r25, Z+3	; 0x03
    20be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	9e af       	std	Y+62, r25	; 0x3e
    20c8:	8d af       	std	Y+61, r24	; 0x3d
    20ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    20cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    20ce:	9a af       	std	Y+58, r25	; 0x3a
    20d0:	89 af       	std	Y+57, r24	; 0x39
    20d2:	89 ad       	ldd	r24, Y+57	; 0x39
    20d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <search_IC_name+0x10a4>
    20da:	9a af       	std	Y+58, r25	; 0x3a
    20dc:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(10);
		next_address=next_address<<8;
    20de:	fe 01       	movw	r30, r28
    20e0:	e7 53       	subi	r30, 0x37	; 55
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 81       	ld	r24, Z
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
    20e8:	98 2f       	mov	r25, r24
    20ea:	88 27       	eor	r24, r24
    20ec:	fe 01       	movw	r30, r28
    20ee:	e7 53       	subi	r30, 0x37	; 55
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	80 83       	st	Z, r24
		EEPROM_readByte(current_address+4,&next_address);
    20f6:	fe 01       	movw	r30, r28
    20f8:	eb 53       	subi	r30, 0x3B	; 59
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	80 81       	ld	r24, Z
    20fe:	91 81       	ldd	r25, Z+1	; 0x01
    2100:	04 96       	adiw	r24, 0x04	; 4
    2102:	cc 01       	movw	r24, r24
    2104:	a0 e0       	ldi	r26, 0x00	; 0
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	9e 01       	movw	r18, r28
    210a:	27 53       	subi	r18, 0x37	; 55
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	a9 01       	movw	r20, r18
    2114:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a0 e2       	ldi	r26, 0x20	; 32
    211e:	b1 e4       	ldi	r27, 0x41	; 65
    2120:	8d ab       	std	Y+53, r24	; 0x35
    2122:	9e ab       	std	Y+54, r25	; 0x36
    2124:	af ab       	std	Y+55, r26	; 0x37
    2126:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	6d a9       	ldd	r22, Y+53	; 0x35
    212a:	7e a9       	ldd	r23, Y+54	; 0x36
    212c:	8f a9       	ldd	r24, Y+55	; 0x37
    212e:	98 ad       	ldd	r25, Y+56	; 0x38
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a e7       	ldi	r20, 0x7A	; 122
    2136:	55 e4       	ldi	r21, 0x45	; 69
    2138:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	89 ab       	std	Y+49, r24	; 0x31
    2142:	9a ab       	std	Y+50, r25	; 0x32
    2144:	ab ab       	std	Y+51, r26	; 0x33
    2146:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2148:	69 a9       	ldd	r22, Y+49	; 0x31
    214a:	7a a9       	ldd	r23, Y+50	; 0x32
    214c:	8b a9       	ldd	r24, Y+51	; 0x33
    214e:	9c a9       	ldd	r25, Y+52	; 0x34
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e8       	ldi	r20, 0x80	; 128
    2156:	5f e3       	ldi	r21, 0x3F	; 63
    2158:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    215c:	88 23       	and	r24, r24
    215e:	2c f4       	brge	.+10     	; 0x216a <search_IC_name+0x1138>
		__ticks = 1;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	98 ab       	std	Y+48, r25	; 0x30
    2166:	8f a7       	std	Y+47, r24	; 0x2f
    2168:	3f c0       	rjmp	.+126    	; 0x21e8 <search_IC_name+0x11b6>
	else if (__tmp > 65535)
    216a:	69 a9       	ldd	r22, Y+49	; 0x31
    216c:	7a a9       	ldd	r23, Y+50	; 0x32
    216e:	8b a9       	ldd	r24, Y+51	; 0x33
    2170:	9c a9       	ldd	r25, Y+52	; 0x34
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	4c f5       	brge	.+82     	; 0x21d4 <search_IC_name+0x11a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2182:	6d a9       	ldd	r22, Y+53	; 0x35
    2184:	7e a9       	ldd	r23, Y+54	; 0x36
    2186:	8f a9       	ldd	r24, Y+55	; 0x37
    2188:	98 ad       	ldd	r25, Y+56	; 0x38
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e2       	ldi	r20, 0x20	; 32
    2190:	51 e4       	ldi	r21, 0x41	; 65
    2192:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	98 ab       	std	Y+48, r25	; 0x30
    21a8:	8f a7       	std	Y+47, r24	; 0x2f
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <search_IC_name+0x1198>
    21ac:	80 e9       	ldi	r24, 0x90	; 144
    21ae:	91 e0       	ldi	r25, 0x01	; 1
    21b0:	9e a7       	std	Y+46, r25	; 0x2e
    21b2:	8d a7       	std	Y+45, r24	; 0x2d
    21b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    21b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <search_IC_name+0x1186>
    21bc:	9e a7       	std	Y+46, r25	; 0x2e
    21be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21c2:	98 a9       	ldd	r25, Y+48	; 0x30
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	98 ab       	std	Y+48, r25	; 0x30
    21c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    21cc:	98 a9       	ldd	r25, Y+48	; 0x30
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	69 f7       	brne	.-38     	; 0x21ac <search_IC_name+0x117a>
    21d2:	14 c0       	rjmp	.+40     	; 0x21fc <search_IC_name+0x11ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d4:	69 a9       	ldd	r22, Y+49	; 0x31
    21d6:	7a a9       	ldd	r23, Y+50	; 0x32
    21d8:	8b a9       	ldd	r24, Y+51	; 0x33
    21da:	9c a9       	ldd	r25, Y+52	; 0x34
    21dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	98 ab       	std	Y+48, r25	; 0x30
    21e6:	8f a7       	std	Y+47, r24	; 0x2f
    21e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ea:	98 a9       	ldd	r25, Y+48	; 0x30
    21ec:	9c a7       	std	Y+44, r25	; 0x2c
    21ee:	8b a7       	std	Y+43, r24	; 0x2b
    21f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <search_IC_name+0x11c2>
    21f8:	9c a7       	std	Y+44, r25	; 0x2c
    21fa:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);

		current_data = 0;
    21fc:	fe 01       	movw	r30, r28
    21fe:	e5 53       	subi	r30, 0x35	; 53
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	10 82       	st	Z, r1
    2204:	11 82       	std	Z+1, r1	; 0x01
    2206:	12 82       	std	Z+2, r1	; 0x02
    2208:	13 82       	std	Z+3, r1	; 0x03
		//Read the current data(IC name) from EEPROM/
		EEPROM_readByte(current_address,&current_data);
    220a:	fe 01       	movw	r30, r28
    220c:	eb 53       	subi	r30, 0x3B	; 59
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	80 81       	ld	r24, Z
    2212:	91 81       	ldd	r25, Z+1	; 0x01
    2214:	cc 01       	movw	r24, r24
    2216:	a0 e0       	ldi	r26, 0x00	; 0
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	9e 01       	movw	r18, r28
    221c:	25 53       	subi	r18, 0x35	; 53
    221e:	3f 4f       	sbci	r19, 0xFF	; 255
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	a9 01       	movw	r20, r18
    2226:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	a0 e2       	ldi	r26, 0x20	; 32
    2230:	b1 e4       	ldi	r27, 0x41	; 65
    2232:	8f a3       	std	Y+39, r24	; 0x27
    2234:	98 a7       	std	Y+40, r25	; 0x28
    2236:	a9 a7       	std	Y+41, r26	; 0x29
    2238:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223a:	6f a1       	ldd	r22, Y+39	; 0x27
    223c:	78 a5       	ldd	r23, Y+40	; 0x28
    223e:	89 a5       	ldd	r24, Y+41	; 0x29
    2240:	9a a5       	ldd	r25, Y+42	; 0x2a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	4a e7       	ldi	r20, 0x7A	; 122
    2248:	55 e4       	ldi	r21, 0x45	; 69
    224a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	8b a3       	std	Y+35, r24	; 0x23
    2254:	9c a3       	std	Y+36, r25	; 0x24
    2256:	ad a3       	std	Y+37, r26	; 0x25
    2258:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    225a:	6b a1       	ldd	r22, Y+35	; 0x23
    225c:	7c a1       	ldd	r23, Y+36	; 0x24
    225e:	8d a1       	ldd	r24, Y+37	; 0x25
    2260:	9e a1       	ldd	r25, Y+38	; 0x26
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e8       	ldi	r20, 0x80	; 128
    2268:	5f e3       	ldi	r21, 0x3F	; 63
    226a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    226e:	88 23       	and	r24, r24
    2270:	2c f4       	brge	.+10     	; 0x227c <search_IC_name+0x124a>
		__ticks = 1;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	9a a3       	std	Y+34, r25	; 0x22
    2278:	89 a3       	std	Y+33, r24	; 0x21
    227a:	3f c0       	rjmp	.+126    	; 0x22fa <search_IC_name+0x12c8>
	else if (__tmp > 65535)
    227c:	6b a1       	ldd	r22, Y+35	; 0x23
    227e:	7c a1       	ldd	r23, Y+36	; 0x24
    2280:	8d a1       	ldd	r24, Y+37	; 0x25
    2282:	9e a1       	ldd	r25, Y+38	; 0x26
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	3f ef       	ldi	r19, 0xFF	; 255
    2288:	4f e7       	ldi	r20, 0x7F	; 127
    228a:	57 e4       	ldi	r21, 0x47	; 71
    228c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2290:	18 16       	cp	r1, r24
    2292:	4c f5       	brge	.+82     	; 0x22e6 <search_IC_name+0x12b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2294:	6f a1       	ldd	r22, Y+39	; 0x27
    2296:	78 a5       	ldd	r23, Y+40	; 0x28
    2298:	89 a5       	ldd	r24, Y+41	; 0x29
    229a:	9a a5       	ldd	r25, Y+42	; 0x2a
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e2       	ldi	r20, 0x20	; 32
    22a2:	51 e4       	ldi	r21, 0x41	; 65
    22a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	9a a3       	std	Y+34, r25	; 0x22
    22ba:	89 a3       	std	Y+33, r24	; 0x21
    22bc:	0f c0       	rjmp	.+30     	; 0x22dc <search_IC_name+0x12aa>
    22be:	80 e9       	ldi	r24, 0x90	; 144
    22c0:	91 e0       	ldi	r25, 0x01	; 1
    22c2:	98 a3       	std	Y+32, r25	; 0x20
    22c4:	8f 8f       	std	Y+31, r24	; 0x1f
    22c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22c8:	98 a1       	ldd	r25, Y+32	; 0x20
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <search_IC_name+0x1298>
    22ce:	98 a3       	std	Y+32, r25	; 0x20
    22d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d2:	89 a1       	ldd	r24, Y+33	; 0x21
    22d4:	9a a1       	ldd	r25, Y+34	; 0x22
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	9a a3       	std	Y+34, r25	; 0x22
    22da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22dc:	89 a1       	ldd	r24, Y+33	; 0x21
    22de:	9a a1       	ldd	r25, Y+34	; 0x22
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	69 f7       	brne	.-38     	; 0x22be <search_IC_name+0x128c>
    22e4:	14 c0       	rjmp	.+40     	; 0x230e <search_IC_name+0x12dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e6:	6b a1       	ldd	r22, Y+35	; 0x23
    22e8:	7c a1       	ldd	r23, Y+36	; 0x24
    22ea:	8d a1       	ldd	r24, Y+37	; 0x25
    22ec:	9e a1       	ldd	r25, Y+38	; 0x26
    22ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	9a a3       	std	Y+34, r25	; 0x22
    22f8:	89 a3       	std	Y+33, r24	; 0x21
    22fa:	89 a1       	ldd	r24, Y+33	; 0x21
    22fc:	9a a1       	ldd	r25, Y+34	; 0x22
    22fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2300:	8d 8f       	std	Y+29, r24	; 0x1d
    2302:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2304:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <search_IC_name+0x12d4>
    230a:	9e 8f       	std	Y+30, r25	; 0x1e
    230c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		current_data=current_data<<8;
    230e:	fe 01       	movw	r30, r28
    2310:	e5 53       	subi	r30, 0x35	; 53
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 81       	ld	r24, Z
    2316:	91 81       	ldd	r25, Z+1	; 0x01
    2318:	a2 81       	ldd	r26, Z+2	; 0x02
    231a:	b3 81       	ldd	r27, Z+3	; 0x03
    231c:	ba 2f       	mov	r27, r26
    231e:	a9 2f       	mov	r26, r25
    2320:	98 2f       	mov	r25, r24
    2322:	88 27       	eor	r24, r24
    2324:	fe 01       	movw	r30, r28
    2326:	e5 53       	subi	r30, 0x35	; 53
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 83       	st	Z, r24
    232c:	91 83       	std	Z+1, r25	; 0x01
    232e:	a2 83       	std	Z+2, r26	; 0x02
    2330:	b3 83       	std	Z+3, r27	; 0x03
		EEPROM_readByte(current_address+1,&current_data);
    2332:	fe 01       	movw	r30, r28
    2334:	eb 53       	subi	r30, 0x3B	; 59
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	01 96       	adiw	r24, 0x01	; 1
    233e:	cc 01       	movw	r24, r24
    2340:	a0 e0       	ldi	r26, 0x00	; 0
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	9e 01       	movw	r18, r28
    2346:	25 53       	subi	r18, 0x35	; 53
    2348:	3f 4f       	sbci	r19, 0xFF	; 255
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	a9 01       	movw	r20, r18
    2350:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e2       	ldi	r26, 0x20	; 32
    235a:	b1 e4       	ldi	r27, 0x41	; 65
    235c:	89 8f       	std	Y+25, r24	; 0x19
    235e:	9a 8f       	std	Y+26, r25	; 0x1a
    2360:	ab 8f       	std	Y+27, r26	; 0x1b
    2362:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2364:	69 8d       	ldd	r22, Y+25	; 0x19
    2366:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	4a e7       	ldi	r20, 0x7A	; 122
    2372:	55 e4       	ldi	r21, 0x45	; 69
    2374:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	8d 8b       	std	Y+21, r24	; 0x15
    237e:	9e 8b       	std	Y+22, r25	; 0x16
    2380:	af 8b       	std	Y+23, r26	; 0x17
    2382:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2384:	6d 89       	ldd	r22, Y+21	; 0x15
    2386:	7e 89       	ldd	r23, Y+22	; 0x16
    2388:	8f 89       	ldd	r24, Y+23	; 0x17
    238a:	98 8d       	ldd	r25, Y+24	; 0x18
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e8       	ldi	r20, 0x80	; 128
    2392:	5f e3       	ldi	r21, 0x3F	; 63
    2394:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2398:	88 23       	and	r24, r24
    239a:	2c f4       	brge	.+10     	; 0x23a6 <search_IC_name+0x1374>
		__ticks = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	9c 8b       	std	Y+20, r25	; 0x14
    23a2:	8b 8b       	std	Y+19, r24	; 0x13
    23a4:	3f c0       	rjmp	.+126    	; 0x2424 <search_IC_name+0x13f2>
	else if (__tmp > 65535)
    23a6:	6d 89       	ldd	r22, Y+21	; 0x15
    23a8:	7e 89       	ldd	r23, Y+22	; 0x16
    23aa:	8f 89       	ldd	r24, Y+23	; 0x17
    23ac:	98 8d       	ldd	r25, Y+24	; 0x18
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	3f ef       	ldi	r19, 0xFF	; 255
    23b2:	4f e7       	ldi	r20, 0x7F	; 127
    23b4:	57 e4       	ldi	r21, 0x47	; 71
    23b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23ba:	18 16       	cp	r1, r24
    23bc:	4c f5       	brge	.+82     	; 0x2410 <search_IC_name+0x13de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23be:	69 8d       	ldd	r22, Y+25	; 0x19
    23c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	9c 8b       	std	Y+20, r25	; 0x14
    23e4:	8b 8b       	std	Y+19, r24	; 0x13
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <search_IC_name+0x13d4>
    23e8:	80 e9       	ldi	r24, 0x90	; 144
    23ea:	91 e0       	ldi	r25, 0x01	; 1
    23ec:	9a 8b       	std	Y+18, r25	; 0x12
    23ee:	89 8b       	std	Y+17, r24	; 0x11
    23f0:	89 89       	ldd	r24, Y+17	; 0x11
    23f2:	9a 89       	ldd	r25, Y+18	; 0x12
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <search_IC_name+0x13c2>
    23f8:	9a 8b       	std	Y+18, r25	; 0x12
    23fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fc:	8b 89       	ldd	r24, Y+19	; 0x13
    23fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	9c 8b       	std	Y+20, r25	; 0x14
    2404:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	8b 89       	ldd	r24, Y+19	; 0x13
    2408:	9c 89       	ldd	r25, Y+20	; 0x14
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	69 f7       	brne	.-38     	; 0x23e8 <search_IC_name+0x13b6>
    240e:	14 c0       	rjmp	.+40     	; 0x2438 <search_IC_name+0x1406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	6d 89       	ldd	r22, Y+21	; 0x15
    2412:	7e 89       	ldd	r23, Y+22	; 0x16
    2414:	8f 89       	ldd	r24, Y+23	; 0x17
    2416:	98 8d       	ldd	r25, Y+24	; 0x18
    2418:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9c 8b       	std	Y+20, r25	; 0x14
    2422:	8b 8b       	std	Y+19, r24	; 0x13
    2424:	8b 89       	ldd	r24, Y+19	; 0x13
    2426:	9c 89       	ldd	r25, Y+20	; 0x14
    2428:	98 8b       	std	Y+16, r25	; 0x10
    242a:	8f 87       	std	Y+15, r24	; 0x0f
    242c:	8f 85       	ldd	r24, Y+15	; 0x0f
    242e:	98 89       	ldd	r25, Y+16	; 0x10
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <search_IC_name+0x13fe>
    2434:	98 8b       	std	Y+16, r25	; 0x10
    2436:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		current_data=current_data<<8;
    2438:	fe 01       	movw	r30, r28
    243a:	e5 53       	subi	r30, 0x35	; 53
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 81       	ld	r24, Z
    2440:	91 81       	ldd	r25, Z+1	; 0x01
    2442:	a2 81       	ldd	r26, Z+2	; 0x02
    2444:	b3 81       	ldd	r27, Z+3	; 0x03
    2446:	ba 2f       	mov	r27, r26
    2448:	a9 2f       	mov	r26, r25
    244a:	98 2f       	mov	r25, r24
    244c:	88 27       	eor	r24, r24
    244e:	fe 01       	movw	r30, r28
    2450:	e5 53       	subi	r30, 0x35	; 53
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 83       	st	Z, r24
    2456:	91 83       	std	Z+1, r25	; 0x01
    2458:	a2 83       	std	Z+2, r26	; 0x02
    245a:	b3 83       	std	Z+3, r27	; 0x03
		EEPROM_readByte(current_address+2,&current_data);
    245c:	fe 01       	movw	r30, r28
    245e:	eb 53       	subi	r30, 0x3B	; 59
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	02 96       	adiw	r24, 0x02	; 2
    2468:	cc 01       	movw	r24, r24
    246a:	a0 e0       	ldi	r26, 0x00	; 0
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	9e 01       	movw	r18, r28
    2470:	25 53       	subi	r18, 0x35	; 53
    2472:	3f 4f       	sbci	r19, 0xFF	; 255
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	a9 01       	movw	r20, r18
    247a:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	a0 e2       	ldi	r26, 0x20	; 32
    2484:	b1 e4       	ldi	r27, 0x41	; 65
    2486:	8b 87       	std	Y+11, r24	; 0x0b
    2488:	9c 87       	std	Y+12, r25	; 0x0c
    248a:	ad 87       	std	Y+13, r26	; 0x0d
    248c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2490:	7c 85       	ldd	r23, Y+12	; 0x0c
    2492:	8d 85       	ldd	r24, Y+13	; 0x0d
    2494:	9e 85       	ldd	r25, Y+14	; 0x0e
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	4a e7       	ldi	r20, 0x7A	; 122
    249c:	55 e4       	ldi	r21, 0x45	; 69
    249e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8f 83       	std	Y+7, r24	; 0x07
    24a8:	98 87       	std	Y+8, r25	; 0x08
    24aa:	a9 87       	std	Y+9, r26	; 0x09
    24ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ae:	6f 81       	ldd	r22, Y+7	; 0x07
    24b0:	78 85       	ldd	r23, Y+8	; 0x08
    24b2:	89 85       	ldd	r24, Y+9	; 0x09
    24b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e8       	ldi	r20, 0x80	; 128
    24bc:	5f e3       	ldi	r21, 0x3F	; 63
    24be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24c2:	88 23       	and	r24, r24
    24c4:	2c f4       	brge	.+10     	; 0x24d0 <search_IC_name+0x149e>
		__ticks = 1;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
    24ce:	3f c0       	rjmp	.+126    	; 0x254e <search_IC_name+0x151c>
	else if (__tmp > 65535)
    24d0:	6f 81       	ldd	r22, Y+7	; 0x07
    24d2:	78 85       	ldd	r23, Y+8	; 0x08
    24d4:	89 85       	ldd	r24, Y+9	; 0x09
    24d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	3f ef       	ldi	r19, 0xFF	; 255
    24dc:	4f e7       	ldi	r20, 0x7F	; 127
    24de:	57 e4       	ldi	r21, 0x47	; 71
    24e0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24e4:	18 16       	cp	r1, r24
    24e6:	4c f5       	brge	.+82     	; 0x253a <search_IC_name+0x1508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e2       	ldi	r20, 0x20	; 32
    24f6:	51 e4       	ldi	r21, 0x41	; 65
    24f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	bc 01       	movw	r22, r24
    2502:	cd 01       	movw	r24, r26
    2504:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	0f c0       	rjmp	.+30     	; 0x2530 <search_IC_name+0x14fe>
    2512:	80 e9       	ldi	r24, 0x90	; 144
    2514:	91 e0       	ldi	r25, 0x01	; 1
    2516:	9c 83       	std	Y+4, r25	; 0x04
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	9c 81       	ldd	r25, Y+4	; 0x04
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <search_IC_name+0x14ec>
    2522:	9c 83       	std	Y+4, r25	; 0x04
    2524:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2526:	8d 81       	ldd	r24, Y+5	; 0x05
    2528:	9e 81       	ldd	r25, Y+6	; 0x06
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	9e 81       	ldd	r25, Y+6	; 0x06
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	69 f7       	brne	.-38     	; 0x2512 <search_IC_name+0x14e0>
    2538:	3c cb       	rjmp	.-2440   	; 0x1bb2 <search_IC_name+0xb80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253a:	6f 81       	ldd	r22, Y+7	; 0x07
    253c:	78 85       	ldd	r23, Y+8	; 0x08
    253e:	89 85       	ldd	r24, Y+9	; 0x09
    2540:	9a 85       	ldd	r25, Y+10	; 0x0a
    2542:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	9a 83       	std	Y+2, r25	; 0x02
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	f1 f7       	brne	.-4      	; 0x255a <search_IC_name+0x1528>
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	89 83       	std	Y+1, r24	; 0x01
    2562:	27 cb       	rjmp	.-2482   	; 0x1bb2 <search_IC_name+0xb80>
		_delay_ms(10);
	}
    2564:	c9 52       	subi	r28, 0x29	; 41
    2566:	df 4f       	sbci	r29, 0xFF	; 255
    2568:	88 81       	ld	r24, Y
    256a:	99 81       	ldd	r25, Y+1	; 0x01
    256c:	aa 81       	ldd	r26, Y+2	; 0x02
    256e:	bb 81       	ldd	r27, Y+3	; 0x03
    2570:	c7 5d       	subi	r28, 0xD7	; 215
    2572:	d0 40       	sbci	r29, 0x00	; 0
}
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	c6 52       	subi	r28, 0x26	; 38
    257a:	df 4f       	sbci	r29, 0xFF	; 255
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	1f 91       	pop	r17
    258c:	0f 91       	pop	r16
    258e:	08 95       	ret

00002590 <change_array_to_BCD>:

/******************************************************************
 *  ezzat
 *****************************************************************/
uint32 change_array_to_BCD(uint8 *a_arr , uint8 a_size)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	29 97       	sbiw	r28, 0x09	; 9
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	98 87       	std	Y+8, r25	; 0x08
    25a6:	8f 83       	std	Y+7, r24	; 0x07
    25a8:	69 87       	std	Y+9, r22	; 0x09
	/*Change the IC number in array to hexa form*/
	uint32 IC_number_in_hexa=0;
    25aa:	1b 82       	std	Y+3, r1	; 0x03
    25ac:	1c 82       	std	Y+4, r1	; 0x04
    25ae:	1d 82       	std	Y+5, r1	; 0x05
    25b0:	1e 82       	std	Y+6, r1	; 0x06

	for(int i=0;i<a_size-1;i++)
    25b2:	1a 82       	std	Y+2, r1	; 0x02
    25b4:	19 82       	std	Y+1, r1	; 0x01
    25b6:	35 c0       	rjmp	.+106    	; 0x2622 <change_array_to_BCD+0x92>
	{
		IC_number_in_hexa|=a_arr[i];
    25b8:	29 81       	ldd	r18, Y+1	; 0x01
    25ba:	3a 81       	ldd	r19, Y+2	; 0x02
    25bc:	8f 81       	ldd	r24, Y+7	; 0x07
    25be:	98 85       	ldd	r25, Y+8	; 0x08
    25c0:	fc 01       	movw	r30, r24
    25c2:	e2 0f       	add	r30, r18
    25c4:	f3 1f       	adc	r31, r19
    25c6:	80 81       	ld	r24, Z
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	9c 81       	ldd	r25, Y+4	; 0x04
    25d4:	ad 81       	ldd	r26, Y+5	; 0x05
    25d6:	be 81       	ldd	r27, Y+6	; 0x06
    25d8:	82 2b       	or	r24, r18
    25da:	93 2b       	or	r25, r19
    25dc:	a4 2b       	or	r26, r20
    25de:	b5 2b       	or	r27, r21
    25e0:	8b 83       	std	Y+3, r24	; 0x03
    25e2:	9c 83       	std	Y+4, r25	; 0x04
    25e4:	ad 83       	std	Y+5, r26	; 0x05
    25e6:	be 83       	std	Y+6, r27	; 0x06
		IC_number_in_hexa=IC_number_in_hexa<<4;
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	9c 81       	ldd	r25, Y+4	; 0x04
    25ec:	ad 81       	ldd	r26, Y+5	; 0x05
    25ee:	be 81       	ldd	r27, Y+6	; 0x06
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	aa 1f       	adc	r26, r26
    25f6:	bb 1f       	adc	r27, r27
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	aa 1f       	adc	r26, r26
    25fe:	bb 1f       	adc	r27, r27
    2600:	88 0f       	add	r24, r24
    2602:	99 1f       	adc	r25, r25
    2604:	aa 1f       	adc	r26, r26
    2606:	bb 1f       	adc	r27, r27
    2608:	88 0f       	add	r24, r24
    260a:	99 1f       	adc	r25, r25
    260c:	aa 1f       	adc	r26, r26
    260e:	bb 1f       	adc	r27, r27
    2610:	8b 83       	std	Y+3, r24	; 0x03
    2612:	9c 83       	std	Y+4, r25	; 0x04
    2614:	ad 83       	std	Y+5, r26	; 0x05
    2616:	be 83       	std	Y+6, r27	; 0x06
uint32 change_array_to_BCD(uint8 *a_arr , uint8 a_size)
{
	/*Change the IC number in array to hexa form*/
	uint32 IC_number_in_hexa=0;

	for(int i=0;i<a_size-1;i++)
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	9a 83       	std	Y+2, r25	; 0x02
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	89 85       	ldd	r24, Y+9	; 0x09
    2624:	88 2f       	mov	r24, r24
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9c 01       	movw	r18, r24
    262a:	21 50       	subi	r18, 0x01	; 1
    262c:	30 40       	sbci	r19, 0x00	; 0
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	9a 81       	ldd	r25, Y+2	; 0x02
    2632:	82 17       	cp	r24, r18
    2634:	93 07       	cpc	r25, r19
    2636:	0c f4       	brge	.+2      	; 0x263a <change_array_to_BCD+0xaa>
    2638:	bf cf       	rjmp	.-130    	; 0x25b8 <change_array_to_BCD+0x28>
	{
		IC_number_in_hexa|=a_arr[i];
		IC_number_in_hexa=IC_number_in_hexa<<4;
	}
	IC_number_in_hexa|=a_arr[a_size-1];
    263a:	89 85       	ldd	r24, Y+9	; 0x09
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	9c 01       	movw	r18, r24
    2642:	21 50       	subi	r18, 0x01	; 1
    2644:	30 40       	sbci	r19, 0x00	; 0
    2646:	8f 81       	ldd	r24, Y+7	; 0x07
    2648:	98 85       	ldd	r25, Y+8	; 0x08
    264a:	fc 01       	movw	r30, r24
    264c:	e2 0f       	add	r30, r18
    264e:	f3 1f       	adc	r31, r19
    2650:	80 81       	ld	r24, Z
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	9c 81       	ldd	r25, Y+4	; 0x04
    265e:	ad 81       	ldd	r26, Y+5	; 0x05
    2660:	be 81       	ldd	r27, Y+6	; 0x06
    2662:	82 2b       	or	r24, r18
    2664:	93 2b       	or	r25, r19
    2666:	a4 2b       	or	r26, r20
    2668:	b5 2b       	or	r27, r21
    266a:	8b 83       	std	Y+3, r24	; 0x03
    266c:	9c 83       	std	Y+4, r25	; 0x04
    266e:	ad 83       	std	Y+5, r26	; 0x05
    2670:	be 83       	std	Y+6, r27	; 0x06

	return IC_number_in_hexa;
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	9c 81       	ldd	r25, Y+4	; 0x04
    2676:	ad 81       	ldd	r26, Y+5	; 0x05
    2678:	be 81       	ldd	r27, Y+6	; 0x06
}
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	29 96       	adiw	r28, 0x09	; 9
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	f8 94       	cli
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	08 95       	ret

00002690 <adjust_testcase_to_16_bit>:
 * adjust it to 16 bit size, becase all test cases in the memory
 * is 16 bit and I didn't save the pins number in memory, so all
 * pins are 16 pins
 ***************************************************************/
void adjust_testcase_to_16_bit(uint8 *a_arr, uint8 a_size)
{
    2690:	df 93       	push	r29
    2692:	cf 93       	push	r28
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	69 97       	sbiw	r28, 0x19	; 25
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	98 8f       	std	Y+24, r25	; 0x18
    26a6:	8f 8b       	std	Y+23, r24	; 0x17
    26a8:	69 8f       	std	Y+25, r22	; 0x19
	uint8 half_size = a_size/2; /*half of the size*/
    26aa:	89 8d       	ldd	r24, Y+25	; 0x19
    26ac:	86 95       	lsr	r24
    26ae:	8e 83       	std	Y+6, r24	; 0x06
	uint8 temp_arr[MAX_PINS_FOR_IC] = {0}; /*temp array to the result in it and initalize it with zero*/
    26b0:	80 e1       	ldi	r24, 0x10	; 16
    26b2:	fe 01       	movw	r30, r28
    26b4:	37 96       	adiw	r30, 0x07	; 7
    26b6:	df 01       	movw	r26, r30
    26b8:	98 2f       	mov	r25, r24
    26ba:	1d 92       	st	X+, r1
    26bc:	9a 95       	dec	r25
    26be:	e9 f7       	brne	.-6      	; 0x26ba <adjust_testcase_to_16_bit+0x2a>


	uint8 j = 0;
    26c0:	1d 82       	std	Y+5, r1	; 0x05
	for(uint8 i=0; i<half_size ; i++,j++)/*The first half of the test case will be add in the first 8 bits in temp array*/
    26c2:	1b 82       	std	Y+3, r1	; 0x03
    26c4:	18 c0       	rjmp	.+48     	; 0x26f6 <adjust_testcase_to_16_bit+0x66>
		temp_arr[j] = a_arr[i];
    26c6:	8d 81       	ldd	r24, Y+5	; 0x05
    26c8:	48 2f       	mov	r20, r24
    26ca:	50 e0       	ldi	r21, 0x00	; 0
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	28 2f       	mov	r18, r24
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	8f 89       	ldd	r24, Y+23	; 0x17
    26d4:	98 8d       	ldd	r25, Y+24	; 0x18
    26d6:	fc 01       	movw	r30, r24
    26d8:	e2 0f       	add	r30, r18
    26da:	f3 1f       	adc	r31, r19
    26dc:	20 81       	ld	r18, Z
    26de:	ce 01       	movw	r24, r28
    26e0:	07 96       	adiw	r24, 0x07	; 7
    26e2:	fc 01       	movw	r30, r24
    26e4:	e4 0f       	add	r30, r20
    26e6:	f5 1f       	adc	r31, r21
    26e8:	20 83       	st	Z, r18
	uint8 half_size = a_size/2; /*half of the size*/
	uint8 temp_arr[MAX_PINS_FOR_IC] = {0}; /*temp array to the result in it and initalize it with zero*/


	uint8 j = 0;
	for(uint8 i=0; i<half_size ; i++,j++)/*The first half of the test case will be add in the first 8 bits in temp array*/
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	8f 5f       	subi	r24, 0xFF	; 255
    26ee:	8b 83       	std	Y+3, r24	; 0x03
    26f0:	8d 81       	ldd	r24, Y+5	; 0x05
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	8d 83       	std	Y+5, r24	; 0x05
    26f6:	9b 81       	ldd	r25, Y+3	; 0x03
    26f8:	8e 81       	ldd	r24, Y+6	; 0x06
    26fa:	98 17       	cp	r25, r24
    26fc:	20 f3       	brcs	.-56     	; 0x26c6 <adjust_testcase_to_16_bit+0x36>
		temp_arr[j] = a_arr[i];



	uint8 counter = half_size;
    26fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2700:	8c 83       	std	Y+4, r24	; 0x04
	if( a_size%2 == 1 )  /*If the size is odd so half of size will be decimal and half, so I will increment the counter by 1*/
    2702:	89 8d       	ldd	r24, Y+25	; 0x19
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	81 70       	andi	r24, 0x01	; 1
    270a:	90 70       	andi	r25, 0x00	; 0
    270c:	88 23       	and	r24, r24
    270e:	19 f0       	breq	.+6      	; 0x2716 <adjust_testcase_to_16_bit+0x86>
		counter ++;
    2710:	8c 81       	ldd	r24, Y+4	; 0x04
    2712:	8f 5f       	subi	r24, 0xFF	; 255
    2714:	8c 83       	std	Y+4, r24	; 0x04

	j = MAX_PINS_FOR_IC/2;
    2716:	88 e0       	ldi	r24, 0x08	; 8
    2718:	8d 83       	std	Y+5, r24	; 0x05
	for(uint8 i=0 ; i<counter ; i++,j++)/*The second half of the test case will be add in the last 8 bits in temp array*/
    271a:	1a 82       	std	Y+2, r1	; 0x02
    271c:	1e c0       	rjmp	.+60     	; 0x275a <adjust_testcase_to_16_bit+0xca>
		temp_arr[j] = a_arr[i+half_size];
    271e:	8d 81       	ldd	r24, Y+5	; 0x05
    2720:	48 2f       	mov	r20, r24
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	8e 81       	ldd	r24, Y+6	; 0x06
    272c:	88 2f       	mov	r24, r24
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	82 0f       	add	r24, r18
    2732:	93 1f       	adc	r25, r19
    2734:	9c 01       	movw	r18, r24
    2736:	8f 89       	ldd	r24, Y+23	; 0x17
    2738:	98 8d       	ldd	r25, Y+24	; 0x18
    273a:	fc 01       	movw	r30, r24
    273c:	e2 0f       	add	r30, r18
    273e:	f3 1f       	adc	r31, r19
    2740:	20 81       	ld	r18, Z
    2742:	ce 01       	movw	r24, r28
    2744:	07 96       	adiw	r24, 0x07	; 7
    2746:	fc 01       	movw	r30, r24
    2748:	e4 0f       	add	r30, r20
    274a:	f5 1f       	adc	r31, r21
    274c:	20 83       	st	Z, r18
	uint8 counter = half_size;
	if( a_size%2 == 1 )  /*If the size is odd so half of size will be decimal and half, so I will increment the counter by 1*/
		counter ++;

	j = MAX_PINS_FOR_IC/2;
	for(uint8 i=0 ; i<counter ; i++,j++)/*The second half of the test case will be add in the last 8 bits in temp array*/
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	8f 5f       	subi	r24, 0xFF	; 255
    2752:	8a 83       	std	Y+2, r24	; 0x02
    2754:	8d 81       	ldd	r24, Y+5	; 0x05
    2756:	8f 5f       	subi	r24, 0xFF	; 255
    2758:	8d 83       	std	Y+5, r24	; 0x05
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	8c 81       	ldd	r24, Y+4	; 0x04
    275e:	98 17       	cp	r25, r24
    2760:	f0 f2       	brcs	.-68     	; 0x271e <adjust_testcase_to_16_bit+0x8e>
		temp_arr[j] = a_arr[i+half_size];


	for(uint8 i=0;i<MAX_PINS_FOR_IC;i++) /*Finally copy the temp array in origanl array */
    2762:	19 82       	std	Y+1, r1	; 0x01
    2764:	15 c0       	rjmp	.+42     	; 0x2790 <adjust_testcase_to_16_bit+0x100>
	{
		a_arr[i] = temp_arr[i];
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	8f 89       	ldd	r24, Y+23	; 0x17
    276e:	98 8d       	ldd	r25, Y+24	; 0x18
    2770:	dc 01       	movw	r26, r24
    2772:	a2 0f       	add	r26, r18
    2774:	b3 1f       	adc	r27, r19
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	ce 01       	movw	r24, r28
    277e:	07 96       	adiw	r24, 0x07	; 7
    2780:	fc 01       	movw	r30, r24
    2782:	e2 0f       	add	r30, r18
    2784:	f3 1f       	adc	r31, r19
    2786:	80 81       	ld	r24, Z
    2788:	8c 93       	st	X, r24
	j = MAX_PINS_FOR_IC/2;
	for(uint8 i=0 ; i<counter ; i++,j++)/*The second half of the test case will be add in the last 8 bits in temp array*/
		temp_arr[j] = a_arr[i+half_size];


	for(uint8 i=0;i<MAX_PINS_FOR_IC;i++) /*Finally copy the temp array in origanl array */
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	8f 5f       	subi	r24, 0xFF	; 255
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	80 31       	cpi	r24, 0x10	; 16
    2794:	40 f3       	brcs	.-48     	; 0x2766 <adjust_testcase_to_16_bit+0xd6>
	{
		a_arr[i] = temp_arr[i];
	}


}
    2796:	69 96       	adiw	r28, 0x19	; 25
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <EEPROM_writeByte>:
#include "external_eeprom.h"
#include "twi.h"
#include "avr/delay.h"

uint8 EEPROM_writeByte(uint32 u16addr, uint8 u8data)
{
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <EEPROM_writeByte+0x6>
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <EEPROM_writeByte+0x8>
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <EEPROM_writeByte+0xa>
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	69 83       	std	Y+1, r22	; 0x01
    27b8:	7a 83       	std	Y+2, r23	; 0x02
    27ba:	8b 83       	std	Y+3, r24	; 0x03
    27bc:	9c 83       	std	Y+4, r25	; 0x04
    27be:	4d 83       	std	Y+5, r20	; 0x05
	/* Send the Start Bit */
	TWI_start();
    27c0:	0e 94 d5 34 	call	0x69aa	; 0x69aa <TWI_start>
	if (TWI_getStatus() != TWI_START)
    27c4:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <TWI_getStatus>
    27c8:	88 30       	cpi	r24, 0x08	; 8
    27ca:	11 f0       	breq	.+4      	; 0x27d0 <EEPROM_writeByte+0x28>
		return ERROR;
    27cc:	1e 82       	std	Y+6, r1	; 0x06
    27ce:	40 c0       	rjmp	.+128    	; 0x2850 <EEPROM_writeByte+0xa8>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte( (uint8)((0xA0) | ((u16addr & 0x00070000)>>15)));
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	9a 81       	ldd	r25, Y+2	; 0x02
    27d4:	ab 81       	ldd	r26, Y+3	; 0x03
    27d6:	bc 81       	ldd	r27, Y+4	; 0x04
    27d8:	80 70       	andi	r24, 0x00	; 0
    27da:	90 70       	andi	r25, 0x00	; 0
    27dc:	a7 70       	andi	r26, 0x07	; 7
    27de:	b0 70       	andi	r27, 0x00	; 0
    27e0:	07 2e       	mov	r0, r23
    27e2:	7f e0       	ldi	r23, 0x0F	; 15
    27e4:	b6 95       	lsr	r27
    27e6:	a7 95       	ror	r26
    27e8:	97 95       	ror	r25
    27ea:	87 95       	ror	r24
    27ec:	7a 95       	dec	r23
    27ee:	d1 f7       	brne	.-12     	; 0x27e4 <EEPROM_writeByte+0x3c>
    27f0:	70 2d       	mov	r23, r0
    27f2:	80 6a       	ori	r24, 0xA0	; 160
    27f4:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    27f8:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <TWI_getStatus>
    27fc:	88 31       	cpi	r24, 0x18	; 24
    27fe:	11 f0       	breq	.+4      	; 0x2804 <EEPROM_writeByte+0x5c>
		return ERROR;
    2800:	1e 82       	std	Y+6, r1	; 0x06
    2802:	26 c0       	rjmp	.+76     	; 0x2850 <EEPROM_writeByte+0xa8>

	/* Send the required memory location address */
	TWI_writeByte( (uint8) (u16addr>>8)); /*Send the first byte from MSB*/
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	9a 81       	ldd	r25, Y+2	; 0x02
    2808:	ab 81       	ldd	r26, Y+3	; 0x03
    280a:	bc 81       	ldd	r27, Y+4	; 0x04
    280c:	89 2f       	mov	r24, r25
    280e:	9a 2f       	mov	r25, r26
    2810:	ab 2f       	mov	r26, r27
    2812:	bb 27       	eor	r27, r27
    2814:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2818:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <TWI_getStatus>
    281c:	88 32       	cpi	r24, 0x28	; 40
    281e:	11 f0       	breq	.+4      	; 0x2824 <EEPROM_writeByte+0x7c>
		return ERROR;
    2820:	1e 82       	std	Y+6, r1	; 0x06
    2822:	16 c0       	rjmp	.+44     	; 0x2850 <EEPROM_writeByte+0xa8>

	/* Send the required memory location address */
	TWI_writeByte( (uint8) (u16addr));  /*Send the second byte from LSB*/
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    282a:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <TWI_getStatus>
    282e:	88 32       	cpi	r24, 0x28	; 40
    2830:	11 f0       	breq	.+4      	; 0x2836 <EEPROM_writeByte+0x8e>
		return ERROR;
    2832:	1e 82       	std	Y+6, r1	; 0x06
    2834:	0d c0       	rjmp	.+26     	; 0x2850 <EEPROM_writeByte+0xa8>


	/* write byte to eeprom */
	TWI_writeByte(u8data);
    2836:	8d 81       	ldd	r24, Y+5	; 0x05
    2838:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    283c:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <TWI_getStatus>
    2840:	88 32       	cpi	r24, 0x28	; 40
    2842:	11 f0       	breq	.+4      	; 0x2848 <EEPROM_writeByte+0xa0>
		return ERROR;
    2844:	1e 82       	std	Y+6, r1	; 0x06
    2846:	04 c0       	rjmp	.+8      	; 0x2850 <EEPROM_writeByte+0xa8>

	/* Send the Stop Bit */
	TWI_stop();
    2848:	0e 94 e5 34 	call	0x69ca	; 0x69ca <TWI_stop>

	return SUCCESS;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	8e 83       	std	Y+6, r24	; 0x06
    2850:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2852:	26 96       	adiw	r28, 0x06	; 6
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint32 u16addr, uint8 *u8data)
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	27 97       	sbiw	r28, 0x07	; 7
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	69 83       	std	Y+1, r22	; 0x01
    287a:	7a 83       	std	Y+2, r23	; 0x02
    287c:	8b 83       	std	Y+3, r24	; 0x03
    287e:	9c 83       	std	Y+4, r25	; 0x04
    2880:	5e 83       	std	Y+6, r21	; 0x06
    2882:	4d 83       	std	Y+5, r20	; 0x05
	/* Send the Start Bit */
	TWI_start();
    2884:	0e 94 d5 34 	call	0x69aa	; 0x69aa <TWI_start>
	if (TWI_getStatus() != TWI_START)
    2888:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <TWI_getStatus>
    288c:	88 30       	cpi	r24, 0x08	; 8
    288e:	11 f0       	breq	.+4      	; 0x2894 <EEPROM_readByte+0x30>
		return ERROR;
    2890:	1f 82       	std	Y+7, r1	; 0x07
    2892:	63 c0       	rjmp	.+198    	; 0x295a <EEPROM_readByte+0xf6>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x00070000)>>15)));
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	ab 81       	ldd	r26, Y+3	; 0x03
    289a:	bc 81       	ldd	r27, Y+4	; 0x04
    289c:	80 70       	andi	r24, 0x00	; 0
    289e:	90 70       	andi	r25, 0x00	; 0
    28a0:	a7 70       	andi	r26, 0x07	; 7
    28a2:	b0 70       	andi	r27, 0x00	; 0
    28a4:	07 2e       	mov	r0, r23
    28a6:	7f e0       	ldi	r23, 0x0F	; 15
    28a8:	b6 95       	lsr	r27
    28aa:	a7 95       	ror	r26
    28ac:	97 95       	ror	r25
    28ae:	87 95       	ror	r24
    28b0:	7a 95       	dec	r23
    28b2:	d1 f7       	brne	.-12     	; 0x28a8 <EEPROM_readByte+0x44>
    28b4:	70 2d       	mov	r23, r0
    28b6:	80 6a       	ori	r24, 0xA0	; 160
    28b8:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    28bc:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <TWI_getStatus>
    28c0:	88 31       	cpi	r24, 0x18	; 24
    28c2:	19 f0       	breq	.+6      	; 0x28ca <EEPROM_readByte+0x66>
		return 11;
    28c4:	8b e0       	ldi	r24, 0x0B	; 11
    28c6:	8f 83       	std	Y+7, r24	; 0x07
    28c8:	48 c0       	rjmp	.+144    	; 0x295a <EEPROM_readByte+0xf6>

	/* Send the required memory location address */
	TWI_writeByte( (uint8) (u16addr>>8)); /*Send the first byte from MSB*/
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	9a 81       	ldd	r25, Y+2	; 0x02
    28ce:	ab 81       	ldd	r26, Y+3	; 0x03
    28d0:	bc 81       	ldd	r27, Y+4	; 0x04
    28d2:	89 2f       	mov	r24, r25
    28d4:	9a 2f       	mov	r25, r26
    28d6:	ab 2f       	mov	r26, r27
    28d8:	bb 27       	eor	r27, r27
    28da:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <TWI_writeByte>

	TWI_writeByte( (uint8) (u16addr));  /*Send the second byte from LSB*/
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <TWI_writeByte>

	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    28e4:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <TWI_getStatus>
    28e8:	88 32       	cpi	r24, 0x28	; 40
    28ea:	19 f0       	breq	.+6      	; 0x28f2 <EEPROM_readByte+0x8e>
		return 12;
    28ec:	8c e0       	ldi	r24, 0x0C	; 12
    28ee:	8f 83       	std	Y+7, r24	; 0x07
    28f0:	34 c0       	rjmp	.+104    	; 0x295a <EEPROM_readByte+0xf6>

	/* Send the Repeated Start Bit */
	TWI_start();
    28f2:	0e 94 d5 34 	call	0x69aa	; 0x69aa <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    28f6:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <TWI_getStatus>
    28fa:	80 31       	cpi	r24, 0x10	; 16
    28fc:	19 f0       	breq	.+6      	; 0x2904 <EEPROM_readByte+0xa0>
		return 13;
    28fe:	8d e0       	ldi	r24, 0x0D	; 13
    2900:	8f 83       	std	Y+7, r24	; 0x07
    2902:	2b c0       	rjmp	.+86     	; 0x295a <EEPROM_readByte+0xf6>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte( (uint8)( (0xA0) |  ( (u16addr & 0x00070000)>>15) | 1 ) );
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	9a 81       	ldd	r25, Y+2	; 0x02
    2908:	ab 81       	ldd	r26, Y+3	; 0x03
    290a:	bc 81       	ldd	r27, Y+4	; 0x04
    290c:	80 70       	andi	r24, 0x00	; 0
    290e:	90 70       	andi	r25, 0x00	; 0
    2910:	a7 70       	andi	r26, 0x07	; 7
    2912:	b0 70       	andi	r27, 0x00	; 0
    2914:	07 2e       	mov	r0, r23
    2916:	7f e0       	ldi	r23, 0x0F	; 15
    2918:	b6 95       	lsr	r27
    291a:	a7 95       	ror	r26
    291c:	97 95       	ror	r25
    291e:	87 95       	ror	r24
    2920:	7a 95       	dec	r23
    2922:	d1 f7       	brne	.-12     	; 0x2918 <EEPROM_readByte+0xb4>
    2924:	70 2d       	mov	r23, r0
    2926:	81 6a       	ori	r24, 0xA1	; 161
    2928:	0e 94 f0 34 	call	0x69e0	; 0x69e0 <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    292c:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <TWI_getStatus>
    2930:	80 34       	cpi	r24, 0x40	; 64
    2932:	19 f0       	breq	.+6      	; 0x293a <EEPROM_readByte+0xd6>
		return 14;
    2934:	8e e0       	ldi	r24, 0x0E	; 14
    2936:	8f 83       	std	Y+7, r24	; 0x07
    2938:	10 c0       	rjmp	.+32     	; 0x295a <EEPROM_readByte+0xf6>

	/* Read Byte from Memory without send ACK */
	*u8data = TWI_readByteWithNACK();
    293a:	0e 94 1a 35 	call	0x6a34	; 0x6a34 <TWI_readByteWithNACK>
    293e:	ed 81       	ldd	r30, Y+5	; 0x05
    2940:	fe 81       	ldd	r31, Y+6	; 0x06
    2942:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2944:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <TWI_getStatus>
    2948:	88 35       	cpi	r24, 0x58	; 88
    294a:	19 f0       	breq	.+6      	; 0x2952 <EEPROM_readByte+0xee>
		return 15;
    294c:	8f e0       	ldi	r24, 0x0F	; 15
    294e:	8f 83       	std	Y+7, r24	; 0x07
    2950:	04 c0       	rjmp	.+8      	; 0x295a <EEPROM_readByte+0xf6>

	/* Send the Stop Bit */
	TWI_stop();
    2952:	0e 94 e5 34 	call	0x69ca	; 0x69ca <TWI_stop>

	return SUCCESS;
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	8f 83       	std	Y+7, r24	; 0x07
    295a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    295c:	27 96       	adiw	r28, 0x07	; 7
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	00 d0       	rcall	.+0      	; 0x2974 <GPIO_setupPinDirection+0x6>
    2974:	00 d0       	rcall	.+0      	; 0x2976 <GPIO_setupPinDirection+0x8>
    2976:	0f 92       	push	r0
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	6a 83       	std	Y+2, r22	; 0x02
    2980:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if( port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	84 30       	cpi	r24, 0x04	; 4
    2986:	08 f0       	brcs	.+2      	; 0x298a <GPIO_setupPinDirection+0x1c>
    2988:	d5 c0       	rjmp	.+426    	; 0x2b34 <GPIO_setupPinDirection+0x1c6>
    298a:	8a 81       	ldd	r24, Y+2	; 0x02
    298c:	88 30       	cpi	r24, 0x08	; 8
    298e:	08 f0       	brcs	.+2      	; 0x2992 <GPIO_setupPinDirection+0x24>
    2990:	d1 c0       	rjmp	.+418    	; 0x2b34 <GPIO_setupPinDirection+0x1c6>
	{
		/* do nothing */
	}else
	{
		switch(port_num)
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	28 2f       	mov	r18, r24
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	3d 83       	std	Y+5, r19	; 0x05
    299a:	2c 83       	std	Y+4, r18	; 0x04
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	9d 81       	ldd	r25, Y+5	; 0x05
    29a0:	81 30       	cpi	r24, 0x01	; 1
    29a2:	91 05       	cpc	r25, r1
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <GPIO_setupPinDirection+0x3a>
    29a6:	43 c0       	rjmp	.+134    	; 0x2a2e <GPIO_setupPinDirection+0xc0>
    29a8:	2c 81       	ldd	r18, Y+4	; 0x04
    29aa:	3d 81       	ldd	r19, Y+5	; 0x05
    29ac:	22 30       	cpi	r18, 0x02	; 2
    29ae:	31 05       	cpc	r19, r1
    29b0:	2c f4       	brge	.+10     	; 0x29bc <GPIO_setupPinDirection+0x4e>
    29b2:	8c 81       	ldd	r24, Y+4	; 0x04
    29b4:	9d 81       	ldd	r25, Y+5	; 0x05
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	71 f0       	breq	.+28     	; 0x29d6 <GPIO_setupPinDirection+0x68>
    29ba:	bc c0       	rjmp	.+376    	; 0x2b34 <GPIO_setupPinDirection+0x1c6>
    29bc:	2c 81       	ldd	r18, Y+4	; 0x04
    29be:	3d 81       	ldd	r19, Y+5	; 0x05
    29c0:	22 30       	cpi	r18, 0x02	; 2
    29c2:	31 05       	cpc	r19, r1
    29c4:	09 f4       	brne	.+2      	; 0x29c8 <GPIO_setupPinDirection+0x5a>
    29c6:	5f c0       	rjmp	.+190    	; 0x2a86 <GPIO_setupPinDirection+0x118>
    29c8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ca:	9d 81       	ldd	r25, Y+5	; 0x05
    29cc:	83 30       	cpi	r24, 0x03	; 3
    29ce:	91 05       	cpc	r25, r1
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <GPIO_setupPinDirection+0x66>
    29d2:	85 c0       	rjmp	.+266    	; 0x2ade <GPIO_setupPinDirection+0x170>
    29d4:	af c0       	rjmp	.+350    	; 0x2b34 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == 1)
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	81 30       	cpi	r24, 0x01	; 1
    29da:	a1 f4       	brne	.+40     	; 0x2a04 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA,pin_num);
    29dc:	aa e3       	ldi	r26, 0x3A	; 58
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	ea e3       	ldi	r30, 0x3A	; 58
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	48 2f       	mov	r20, r24
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	02 2e       	mov	r0, r18
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <GPIO_setupPinDirection+0x8c>
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	0a 94       	dec	r0
    29fc:	e2 f7       	brpl	.-8      	; 0x29f6 <GPIO_setupPinDirection+0x88>
    29fe:	84 2b       	or	r24, r20
    2a00:	8c 93       	st	X, r24
    2a02:	98 c0       	rjmp	.+304    	; 0x2b34 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRA,pin_num);
    2a04:	aa e3       	ldi	r26, 0x3A	; 58
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	ea e3       	ldi	r30, 0x3A	; 58
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	48 2f       	mov	r20, r24
    2a10:	8a 81       	ldd	r24, Y+2	; 0x02
    2a12:	28 2f       	mov	r18, r24
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	02 2e       	mov	r0, r18
    2a1c:	02 c0       	rjmp	.+4      	; 0x2a22 <GPIO_setupPinDirection+0xb4>
    2a1e:	88 0f       	add	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	0a 94       	dec	r0
    2a24:	e2 f7       	brpl	.-8      	; 0x2a1e <GPIO_setupPinDirection+0xb0>
    2a26:	80 95       	com	r24
    2a28:	84 23       	and	r24, r20
    2a2a:	8c 93       	st	X, r24
    2a2c:	83 c0       	rjmp	.+262    	; 0x2b34 <GPIO_setupPinDirection+0x1c6>
			break;

		case PORTB_ID:
			if(direction == 1)
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	81 30       	cpi	r24, 0x01	; 1
    2a32:	a1 f4       	brne	.+40     	; 0x2a5c <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB,pin_num);
    2a34:	a7 e3       	ldi	r26, 0x37	; 55
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e7 e3       	ldi	r30, 0x37	; 55
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	48 2f       	mov	r20, r24
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	02 2e       	mov	r0, r18
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <GPIO_setupPinDirection+0xe4>
    2a4e:	88 0f       	add	r24, r24
    2a50:	99 1f       	adc	r25, r25
    2a52:	0a 94       	dec	r0
    2a54:	e2 f7       	brpl	.-8      	; 0x2a4e <GPIO_setupPinDirection+0xe0>
    2a56:	84 2b       	or	r24, r20
    2a58:	8c 93       	st	X, r24
    2a5a:	6c c0       	rjmp	.+216    	; 0x2b34 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRB,pin_num);
    2a5c:	a7 e3       	ldi	r26, 0x37	; 55
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e7 e3       	ldi	r30, 0x37	; 55
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	48 2f       	mov	r20, r24
    2a68:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	02 2e       	mov	r0, r18
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <GPIO_setupPinDirection+0x10c>
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	0a 94       	dec	r0
    2a7c:	e2 f7       	brpl	.-8      	; 0x2a76 <GPIO_setupPinDirection+0x108>
    2a7e:	80 95       	com	r24
    2a80:	84 23       	and	r24, r20
    2a82:	8c 93       	st	X, r24
    2a84:	57 c0       	rjmp	.+174    	; 0x2b34 <GPIO_setupPinDirection+0x1c6>
			break;

		case PORTC_ID:
			if(direction == 1)
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03
    2a88:	81 30       	cpi	r24, 0x01	; 1
    2a8a:	a1 f4       	brne	.+40     	; 0x2ab4 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC,pin_num);
    2a8c:	a4 e3       	ldi	r26, 0x34	; 52
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e4 e3       	ldi	r30, 0x34	; 52
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	48 2f       	mov	r20, r24
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	02 2e       	mov	r0, r18
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <GPIO_setupPinDirection+0x13c>
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	0a 94       	dec	r0
    2aac:	e2 f7       	brpl	.-8      	; 0x2aa6 <GPIO_setupPinDirection+0x138>
    2aae:	84 2b       	or	r24, r20
    2ab0:	8c 93       	st	X, r24
    2ab2:	40 c0       	rjmp	.+128    	; 0x2b34 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRC,pin_num);
    2ab4:	a4 e3       	ldi	r26, 0x34	; 52
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e4 e3       	ldi	r30, 0x34	; 52
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	48 2f       	mov	r20, r24
    2ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac2:	28 2f       	mov	r18, r24
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	02 2e       	mov	r0, r18
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <GPIO_setupPinDirection+0x164>
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	0a 94       	dec	r0
    2ad4:	e2 f7       	brpl	.-8      	; 0x2ace <GPIO_setupPinDirection+0x160>
    2ad6:	80 95       	com	r24
    2ad8:	84 23       	and	r24, r20
    2ada:	8c 93       	st	X, r24
    2adc:	2b c0       	rjmp	.+86     	; 0x2b34 <GPIO_setupPinDirection+0x1c6>
			break;

		case PORTD_ID:
			if(direction == 1)
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	81 30       	cpi	r24, 0x01	; 1
    2ae2:	a1 f4       	brne	.+40     	; 0x2b0c <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD,pin_num);
    2ae4:	a1 e3       	ldi	r26, 0x31	; 49
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e1 e3       	ldi	r30, 0x31	; 49
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	48 2f       	mov	r20, r24
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	02 2e       	mov	r0, r18
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <GPIO_setupPinDirection+0x194>
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	0a 94       	dec	r0
    2b04:	e2 f7       	brpl	.-8      	; 0x2afe <GPIO_setupPinDirection+0x190>
    2b06:	84 2b       	or	r24, r20
    2b08:	8c 93       	st	X, r24
    2b0a:	14 c0       	rjmp	.+40     	; 0x2b34 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT(DDRD,pin_num);
    2b0c:	a1 e3       	ldi	r26, 0x31	; 49
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	e1 e3       	ldi	r30, 0x31	; 49
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	48 2f       	mov	r20, r24
    2b18:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	02 2e       	mov	r0, r18
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <GPIO_setupPinDirection+0x1bc>
    2b26:	88 0f       	add	r24, r24
    2b28:	99 1f       	adc	r25, r25
    2b2a:	0a 94       	dec	r0
    2b2c:	e2 f7       	brpl	.-8      	; 0x2b26 <GPIO_setupPinDirection+0x1b8>
    2b2e:	80 95       	com	r24
    2b30:	84 23       	and	r24, r20
    2b32:	8c 93       	st	X, r24
		}
	}
}
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <GPIO_writePin+0x6>
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <GPIO_writePin+0x8>
    2b4c:	0f 92       	push	r0
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	89 83       	std	Y+1, r24	; 0x01
    2b54:	6a 83       	std	Y+2, r22	; 0x02
    2b56:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
    2b58:	89 81       	ldd	r24, Y+1	; 0x01
    2b5a:	84 30       	cpi	r24, 0x04	; 4
    2b5c:	08 f0       	brcs	.+2      	; 0x2b60 <GPIO_writePin+0x1c>
    2b5e:	d5 c0       	rjmp	.+426    	; 0x2d0a <GPIO_writePin+0x1c6>
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	88 30       	cpi	r24, 0x08	; 8
    2b64:	08 f0       	brcs	.+2      	; 0x2b68 <GPIO_writePin+0x24>
    2b66:	d1 c0       	rjmp	.+418    	; 0x2d0a <GPIO_writePin+0x1c6>
	{
		/*Do nothing*/
	}else
	{
		switch(port_num)
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	3d 83       	std	Y+5, r19	; 0x05
    2b70:	2c 83       	std	Y+4, r18	; 0x04
    2b72:	8c 81       	ldd	r24, Y+4	; 0x04
    2b74:	9d 81       	ldd	r25, Y+5	; 0x05
    2b76:	81 30       	cpi	r24, 0x01	; 1
    2b78:	91 05       	cpc	r25, r1
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <GPIO_writePin+0x3a>
    2b7c:	43 c0       	rjmp	.+134    	; 0x2c04 <GPIO_writePin+0xc0>
    2b7e:	2c 81       	ldd	r18, Y+4	; 0x04
    2b80:	3d 81       	ldd	r19, Y+5	; 0x05
    2b82:	22 30       	cpi	r18, 0x02	; 2
    2b84:	31 05       	cpc	r19, r1
    2b86:	2c f4       	brge	.+10     	; 0x2b92 <GPIO_writePin+0x4e>
    2b88:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	71 f0       	breq	.+28     	; 0x2bac <GPIO_writePin+0x68>
    2b90:	bc c0       	rjmp	.+376    	; 0x2d0a <GPIO_writePin+0x1c6>
    2b92:	2c 81       	ldd	r18, Y+4	; 0x04
    2b94:	3d 81       	ldd	r19, Y+5	; 0x05
    2b96:	22 30       	cpi	r18, 0x02	; 2
    2b98:	31 05       	cpc	r19, r1
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <GPIO_writePin+0x5a>
    2b9c:	5f c0       	rjmp	.+190    	; 0x2c5c <GPIO_writePin+0x118>
    2b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba2:	83 30       	cpi	r24, 0x03	; 3
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <GPIO_writePin+0x66>
    2ba8:	85 c0       	rjmp	.+266    	; 0x2cb4 <GPIO_writePin+0x170>
    2baa:	af c0       	rjmp	.+350    	; 0x2d0a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == 1)
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	81 30       	cpi	r24, 0x01	; 1
    2bb0:	a1 f4       	brne	.+40     	; 0x2bda <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    2bb2:	ab e3       	ldi	r26, 0x3B	; 59
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	eb e3       	ldi	r30, 0x3B	; 59
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	48 2f       	mov	r20, r24
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	02 2e       	mov	r0, r18
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <GPIO_writePin+0x8c>
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	0a 94       	dec	r0
    2bd2:	e2 f7       	brpl	.-8      	; 0x2bcc <GPIO_writePin+0x88>
    2bd4:	84 2b       	or	r24, r20
    2bd6:	8c 93       	st	X, r24
    2bd8:	98 c0       	rjmp	.+304    	; 0x2d0a <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTA,pin_num);
    2bda:	ab e3       	ldi	r26, 0x3B	; 59
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	eb e3       	ldi	r30, 0x3B	; 59
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	48 2f       	mov	r20, r24
    2be6:	8a 81       	ldd	r24, Y+2	; 0x02
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	02 2e       	mov	r0, r18
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <GPIO_writePin+0xb4>
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	0a 94       	dec	r0
    2bfa:	e2 f7       	brpl	.-8      	; 0x2bf4 <GPIO_writePin+0xb0>
    2bfc:	80 95       	com	r24
    2bfe:	84 23       	and	r24, r20
    2c00:	8c 93       	st	X, r24
    2c02:	83 c0       	rjmp	.+262    	; 0x2d0a <GPIO_writePin+0x1c6>
			break;

		case PORTB_ID:
			if(value == 1)
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	81 30       	cpi	r24, 0x01	; 1
    2c08:	a1 f4       	brne	.+40     	; 0x2c32 <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    2c0a:	a8 e3       	ldi	r26, 0x38	; 56
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	e8 e3       	ldi	r30, 0x38	; 56
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	48 2f       	mov	r20, r24
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	28 2f       	mov	r18, r24
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	02 2e       	mov	r0, r18
    2c22:	02 c0       	rjmp	.+4      	; 0x2c28 <GPIO_writePin+0xe4>
    2c24:	88 0f       	add	r24, r24
    2c26:	99 1f       	adc	r25, r25
    2c28:	0a 94       	dec	r0
    2c2a:	e2 f7       	brpl	.-8      	; 0x2c24 <GPIO_writePin+0xe0>
    2c2c:	84 2b       	or	r24, r20
    2c2e:	8c 93       	st	X, r24
    2c30:	6c c0       	rjmp	.+216    	; 0x2d0a <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    2c32:	a8 e3       	ldi	r26, 0x38	; 56
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e8 e3       	ldi	r30, 0x38	; 56
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	48 2f       	mov	r20, r24
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	02 2e       	mov	r0, r18
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <GPIO_writePin+0x10c>
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	0a 94       	dec	r0
    2c52:	e2 f7       	brpl	.-8      	; 0x2c4c <GPIO_writePin+0x108>
    2c54:	80 95       	com	r24
    2c56:	84 23       	and	r24, r20
    2c58:	8c 93       	st	X, r24
    2c5a:	57 c0       	rjmp	.+174    	; 0x2d0a <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID:
			if(value == 1)
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	81 30       	cpi	r24, 0x01	; 1
    2c60:	a1 f4       	brne	.+40     	; 0x2c8a <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    2c62:	a5 e3       	ldi	r26, 0x35	; 53
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e5 e3       	ldi	r30, 0x35	; 53
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	48 2f       	mov	r20, r24
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	02 2e       	mov	r0, r18
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <GPIO_writePin+0x13c>
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	0a 94       	dec	r0
    2c82:	e2 f7       	brpl	.-8      	; 0x2c7c <GPIO_writePin+0x138>
    2c84:	84 2b       	or	r24, r20
    2c86:	8c 93       	st	X, r24
    2c88:	40 c0       	rjmp	.+128    	; 0x2d0a <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    2c8a:	a5 e3       	ldi	r26, 0x35	; 53
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	e5 e3       	ldi	r30, 0x35	; 53
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	48 2f       	mov	r20, r24
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	28 2f       	mov	r18, r24
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	02 2e       	mov	r0, r18
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <GPIO_writePin+0x164>
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	0a 94       	dec	r0
    2caa:	e2 f7       	brpl	.-8      	; 0x2ca4 <GPIO_writePin+0x160>
    2cac:	80 95       	com	r24
    2cae:	84 23       	and	r24, r20
    2cb0:	8c 93       	st	X, r24
    2cb2:	2b c0       	rjmp	.+86     	; 0x2d0a <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID:
			if(value == 1)
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	81 30       	cpi	r24, 0x01	; 1
    2cb8:	a1 f4       	brne	.+40     	; 0x2ce2 <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    2cba:	a2 e3       	ldi	r26, 0x32	; 50
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e2 e3       	ldi	r30, 0x32	; 50
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	48 2f       	mov	r20, r24
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	28 2f       	mov	r18, r24
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	02 2e       	mov	r0, r18
    2cd2:	02 c0       	rjmp	.+4      	; 0x2cd8 <GPIO_writePin+0x194>
    2cd4:	88 0f       	add	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	0a 94       	dec	r0
    2cda:	e2 f7       	brpl	.-8      	; 0x2cd4 <GPIO_writePin+0x190>
    2cdc:	84 2b       	or	r24, r20
    2cde:	8c 93       	st	X, r24
    2ce0:	14 c0       	rjmp	.+40     	; 0x2d0a <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    2ce2:	a2 e3       	ldi	r26, 0x32	; 50
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	e2 e3       	ldi	r30, 0x32	; 50
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	48 2f       	mov	r20, r24
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	02 2e       	mov	r0, r18
    2cfa:	02 c0       	rjmp	.+4      	; 0x2d00 <GPIO_writePin+0x1bc>
    2cfc:	88 0f       	add	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	0a 94       	dec	r0
    2d02:	e2 f7       	brpl	.-8      	; 0x2cfc <GPIO_writePin+0x1b8>
    2d04:	80 95       	com	r24
    2d06:	84 23       	and	r24, r20
    2d08:	8c 93       	st	X, r24
		}


	}
}
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	08 95       	ret

00002d1a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <GPIO_readPin+0x6>
    2d20:	00 d0       	rcall	.+0      	; 0x2d22 <GPIO_readPin+0x8>
    2d22:	0f 92       	push	r0
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	89 83       	std	Y+1, r24	; 0x01
    2d2a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	88 30       	cpi	r24, 0x08	; 8
    2d30:	08 f0       	brcs	.+2      	; 0x2d34 <GPIO_readPin+0x1a>
    2d32:	85 c0       	rjmp	.+266    	; 0x2e3e <GPIO_readPin+0x124>
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	84 30       	cpi	r24, 0x04	; 4
    2d38:	08 f0       	brcs	.+2      	; 0x2d3c <GPIO_readPin+0x22>
    2d3a:	81 c0       	rjmp	.+258    	; 0x2e3e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	28 2f       	mov	r18, r24
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	3d 83       	std	Y+5, r19	; 0x05
    2d44:	2c 83       	std	Y+4, r18	; 0x04
    2d46:	4c 81       	ldd	r20, Y+4	; 0x04
    2d48:	5d 81       	ldd	r21, Y+5	; 0x05
    2d4a:	41 30       	cpi	r20, 0x01	; 1
    2d4c:	51 05       	cpc	r21, r1
    2d4e:	79 f1       	breq	.+94     	; 0x2dae <GPIO_readPin+0x94>
    2d50:	8c 81       	ldd	r24, Y+4	; 0x04
    2d52:	9d 81       	ldd	r25, Y+5	; 0x05
    2d54:	82 30       	cpi	r24, 0x02	; 2
    2d56:	91 05       	cpc	r25, r1
    2d58:	34 f4       	brge	.+12     	; 0x2d66 <GPIO_readPin+0x4c>
    2d5a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d5c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d5e:	21 15       	cp	r18, r1
    2d60:	31 05       	cpc	r19, r1
    2d62:	69 f0       	breq	.+26     	; 0x2d7e <GPIO_readPin+0x64>
    2d64:	6c c0       	rjmp	.+216    	; 0x2e3e <GPIO_readPin+0x124>
    2d66:	4c 81       	ldd	r20, Y+4	; 0x04
    2d68:	5d 81       	ldd	r21, Y+5	; 0x05
    2d6a:	42 30       	cpi	r20, 0x02	; 2
    2d6c:	51 05       	cpc	r21, r1
    2d6e:	b9 f1       	breq	.+110    	; 0x2dde <GPIO_readPin+0xc4>
    2d70:	8c 81       	ldd	r24, Y+4	; 0x04
    2d72:	9d 81       	ldd	r25, Y+5	; 0x05
    2d74:	83 30       	cpi	r24, 0x03	; 3
    2d76:	91 05       	cpc	r25, r1
    2d78:	09 f4       	brne	.+2      	; 0x2d7c <GPIO_readPin+0x62>
    2d7a:	49 c0       	rjmp	.+146    	; 0x2e0e <GPIO_readPin+0xf4>
    2d7c:	60 c0       	rjmp	.+192    	; 0x2e3e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if( BIT_IS_SET(PINA , pin_num) )
    2d7e:	e9 e3       	ldi	r30, 0x39	; 57
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8a:	88 2f       	mov	r24, r24
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	a9 01       	movw	r20, r18
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <GPIO_readPin+0x7c>
    2d92:	55 95       	asr	r21
    2d94:	47 95       	ror	r20
    2d96:	8a 95       	dec	r24
    2d98:	e2 f7       	brpl	.-8      	; 0x2d92 <GPIO_readPin+0x78>
    2d9a:	ca 01       	movw	r24, r20
    2d9c:	81 70       	andi	r24, 0x01	; 1
    2d9e:	90 70       	andi	r25, 0x00	; 0
    2da0:	88 23       	and	r24, r24
    2da2:	19 f0       	breq	.+6      	; 0x2daa <GPIO_readPin+0x90>
				return 1;
    2da4:	51 e0       	ldi	r21, 0x01	; 1
    2da6:	5b 83       	std	Y+3, r21	; 0x03
    2da8:	4b c0       	rjmp	.+150    	; 0x2e40 <GPIO_readPin+0x126>
			else
				return 0;
    2daa:	1b 82       	std	Y+3, r1	; 0x03
    2dac:	49 c0       	rjmp	.+146    	; 0x2e40 <GPIO_readPin+0x126>
			break;

		case PORTB_ID:
			if( BIT_IS_SET(PINB , pin_num) )
    2dae:	e6 e3       	ldi	r30, 0x36	; 54
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	28 2f       	mov	r18, r24
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dba:	88 2f       	mov	r24, r24
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	a9 01       	movw	r20, r18
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <GPIO_readPin+0xac>
    2dc2:	55 95       	asr	r21
    2dc4:	47 95       	ror	r20
    2dc6:	8a 95       	dec	r24
    2dc8:	e2 f7       	brpl	.-8      	; 0x2dc2 <GPIO_readPin+0xa8>
    2dca:	ca 01       	movw	r24, r20
    2dcc:	81 70       	andi	r24, 0x01	; 1
    2dce:	90 70       	andi	r25, 0x00	; 0
    2dd0:	88 23       	and	r24, r24
    2dd2:	19 f0       	breq	.+6      	; 0x2dda <GPIO_readPin+0xc0>
				return 1;
    2dd4:	51 e0       	ldi	r21, 0x01	; 1
    2dd6:	5b 83       	std	Y+3, r21	; 0x03
    2dd8:	33 c0       	rjmp	.+102    	; 0x2e40 <GPIO_readPin+0x126>
			else
				return 0;
    2dda:	1b 82       	std	Y+3, r1	; 0x03
    2ddc:	31 c0       	rjmp	.+98     	; 0x2e40 <GPIO_readPin+0x126>
			break;

		case PORTC_ID:
			if( BIT_IS_SET(PINC , pin_num) )
    2dde:	e3 e3       	ldi	r30, 0x33	; 51
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	28 2f       	mov	r18, r24
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	88 2f       	mov	r24, r24
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	a9 01       	movw	r20, r18
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <GPIO_readPin+0xdc>
    2df2:	55 95       	asr	r21
    2df4:	47 95       	ror	r20
    2df6:	8a 95       	dec	r24
    2df8:	e2 f7       	brpl	.-8      	; 0x2df2 <GPIO_readPin+0xd8>
    2dfa:	ca 01       	movw	r24, r20
    2dfc:	81 70       	andi	r24, 0x01	; 1
    2dfe:	90 70       	andi	r25, 0x00	; 0
    2e00:	88 23       	and	r24, r24
    2e02:	19 f0       	breq	.+6      	; 0x2e0a <GPIO_readPin+0xf0>
				return 1;
    2e04:	51 e0       	ldi	r21, 0x01	; 1
    2e06:	5b 83       	std	Y+3, r21	; 0x03
    2e08:	1b c0       	rjmp	.+54     	; 0x2e40 <GPIO_readPin+0x126>
			else
				return 0;
    2e0a:	1b 82       	std	Y+3, r1	; 0x03
    2e0c:	19 c0       	rjmp	.+50     	; 0x2e40 <GPIO_readPin+0x126>
			break;

		case PORTD_ID:
			if( BIT_IS_SET(PIND , pin_num) )
    2e0e:	e0 e3       	ldi	r30, 0x30	; 48
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	88 2f       	mov	r24, r24
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	a9 01       	movw	r20, r18
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <GPIO_readPin+0x10c>
    2e22:	55 95       	asr	r21
    2e24:	47 95       	ror	r20
    2e26:	8a 95       	dec	r24
    2e28:	e2 f7       	brpl	.-8      	; 0x2e22 <GPIO_readPin+0x108>
    2e2a:	ca 01       	movw	r24, r20
    2e2c:	81 70       	andi	r24, 0x01	; 1
    2e2e:	90 70       	andi	r25, 0x00	; 0
    2e30:	88 23       	and	r24, r24
    2e32:	19 f0       	breq	.+6      	; 0x2e3a <GPIO_readPin+0x120>
				return 1;
    2e34:	51 e0       	ldi	r21, 0x01	; 1
    2e36:	5b 83       	std	Y+3, r21	; 0x03
    2e38:	03 c0       	rjmp	.+6      	; 0x2e40 <GPIO_readPin+0x126>
			else
				return 0;
    2e3a:	1b 82       	std	Y+3, r1	; 0x03
    2e3c:	01 c0       	rjmp	.+2      	; 0x2e40 <GPIO_readPin+0x126>
			break;
		}
	}
	return 0;
    2e3e:	1b 82       	std	Y+3, r1	; 0x03
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03

}
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	08 95       	ret

00002e52 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <GPIO_setupPortDirection+0x6>
    2e58:	00 d0       	rcall	.+0      	; 0x2e5a <GPIO_setupPortDirection+0x8>
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	89 83       	std	Y+1, r24	; 0x01
    2e60:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	84 30       	cpi	r24, 0x04	; 4
    2e66:	90 f5       	brcc	.+100    	; 0x2ecc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	3c 83       	std	Y+4, r19	; 0x04
    2e70:	2b 83       	std	Y+3, r18	; 0x03
    2e72:	8b 81       	ldd	r24, Y+3	; 0x03
    2e74:	9c 81       	ldd	r25, Y+4	; 0x04
    2e76:	81 30       	cpi	r24, 0x01	; 1
    2e78:	91 05       	cpc	r25, r1
    2e7a:	d1 f0       	breq	.+52     	; 0x2eb0 <GPIO_setupPortDirection+0x5e>
    2e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e80:	22 30       	cpi	r18, 0x02	; 2
    2e82:	31 05       	cpc	r19, r1
    2e84:	2c f4       	brge	.+10     	; 0x2e90 <GPIO_setupPortDirection+0x3e>
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8a:	00 97       	sbiw	r24, 0x00	; 0
    2e8c:	61 f0       	breq	.+24     	; 0x2ea6 <GPIO_setupPortDirection+0x54>
    2e8e:	1e c0       	rjmp	.+60     	; 0x2ecc <GPIO_setupPortDirection+0x7a>
    2e90:	2b 81       	ldd	r18, Y+3	; 0x03
    2e92:	3c 81       	ldd	r19, Y+4	; 0x04
    2e94:	22 30       	cpi	r18, 0x02	; 2
    2e96:	31 05       	cpc	r19, r1
    2e98:	81 f0       	breq	.+32     	; 0x2eba <GPIO_setupPortDirection+0x68>
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9e:	83 30       	cpi	r24, 0x03	; 3
    2ea0:	91 05       	cpc	r25, r1
    2ea2:	81 f0       	breq	.+32     	; 0x2ec4 <GPIO_setupPortDirection+0x72>
    2ea4:	13 c0       	rjmp	.+38     	; 0x2ecc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2ea6:	ea e3       	ldi	r30, 0x3A	; 58
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	80 83       	st	Z, r24
    2eae:	0e c0       	rjmp	.+28     	; 0x2ecc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2eb0:	e7 e3       	ldi	r30, 0x37	; 55
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	80 83       	st	Z, r24
    2eb8:	09 c0       	rjmp	.+18     	; 0x2ecc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2eba:	e4 e3       	ldi	r30, 0x34	; 52
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec0:	80 83       	st	Z, r24
    2ec2:	04 c0       	rjmp	.+8      	; 0x2ecc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2ec4:	e1 e3       	ldi	r30, 0x31	; 49
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eca:	80 83       	st	Z, r24
			break;
		}
	}
}
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	cf 91       	pop	r28
    2ed6:	df 91       	pop	r29
    2ed8:	08 95       	ret

00002eda <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2eda:	df 93       	push	r29
    2edc:	cf 93       	push	r28
    2ede:	00 d0       	rcall	.+0      	; 0x2ee0 <GPIO_writePort+0x6>
    2ee0:	00 d0       	rcall	.+0      	; 0x2ee2 <GPIO_writePort+0x8>
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    2ee8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	84 30       	cpi	r24, 0x04	; 4
    2eee:	90 f5       	brcc	.+100    	; 0x2f54 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	3c 83       	std	Y+4, r19	; 0x04
    2ef8:	2b 83       	std	Y+3, r18	; 0x03
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	9c 81       	ldd	r25, Y+4	; 0x04
    2efe:	81 30       	cpi	r24, 0x01	; 1
    2f00:	91 05       	cpc	r25, r1
    2f02:	d1 f0       	breq	.+52     	; 0x2f38 <GPIO_writePort+0x5e>
    2f04:	2b 81       	ldd	r18, Y+3	; 0x03
    2f06:	3c 81       	ldd	r19, Y+4	; 0x04
    2f08:	22 30       	cpi	r18, 0x02	; 2
    2f0a:	31 05       	cpc	r19, r1
    2f0c:	2c f4       	brge	.+10     	; 0x2f18 <GPIO_writePort+0x3e>
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	9c 81       	ldd	r25, Y+4	; 0x04
    2f12:	00 97       	sbiw	r24, 0x00	; 0
    2f14:	61 f0       	breq	.+24     	; 0x2f2e <GPIO_writePort+0x54>
    2f16:	1e c0       	rjmp	.+60     	; 0x2f54 <GPIO_writePort+0x7a>
    2f18:	2b 81       	ldd	r18, Y+3	; 0x03
    2f1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f1c:	22 30       	cpi	r18, 0x02	; 2
    2f1e:	31 05       	cpc	r19, r1
    2f20:	81 f0       	breq	.+32     	; 0x2f42 <GPIO_writePort+0x68>
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	83 30       	cpi	r24, 0x03	; 3
    2f28:	91 05       	cpc	r25, r1
    2f2a:	81 f0       	breq	.+32     	; 0x2f4c <GPIO_writePort+0x72>
    2f2c:	13 c0       	rjmp	.+38     	; 0x2f54 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2f2e:	eb e3       	ldi	r30, 0x3B	; 59
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	80 83       	st	Z, r24
    2f36:	0e c0       	rjmp	.+28     	; 0x2f54 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2f38:	e8 e3       	ldi	r30, 0x38	; 56
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	80 83       	st	Z, r24
    2f40:	09 c0       	rjmp	.+18     	; 0x2f54 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2f42:	e5 e3       	ldi	r30, 0x35	; 53
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	80 83       	st	Z, r24
    2f4a:	04 c0       	rjmp	.+8      	; 0x2f54 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2f4c:	e2 e3       	ldi	r30, 0x32	; 50
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	80 83       	st	Z, r24
			break;
		}
	}
}
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	00 d0       	rcall	.+0      	; 0x2f68 <GPIO_readPort+0x6>
    2f68:	00 d0       	rcall	.+0      	; 0x2f6a <GPIO_readPort+0x8>
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2f70:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	84 30       	cpi	r24, 0x04	; 4
    2f76:	90 f5       	brcc	.+100    	; 0x2fdc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2f78:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	3c 83       	std	Y+4, r19	; 0x04
    2f80:	2b 83       	std	Y+3, r18	; 0x03
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	9c 81       	ldd	r25, Y+4	; 0x04
    2f86:	81 30       	cpi	r24, 0x01	; 1
    2f88:	91 05       	cpc	r25, r1
    2f8a:	d1 f0       	breq	.+52     	; 0x2fc0 <GPIO_readPort+0x5e>
    2f8c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f8e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f90:	22 30       	cpi	r18, 0x02	; 2
    2f92:	31 05       	cpc	r19, r1
    2f94:	2c f4       	brge	.+10     	; 0x2fa0 <GPIO_readPort+0x3e>
    2f96:	8b 81       	ldd	r24, Y+3	; 0x03
    2f98:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	61 f0       	breq	.+24     	; 0x2fb6 <GPIO_readPort+0x54>
    2f9e:	1e c0       	rjmp	.+60     	; 0x2fdc <GPIO_readPort+0x7a>
    2fa0:	2b 81       	ldd	r18, Y+3	; 0x03
    2fa2:	3c 81       	ldd	r19, Y+4	; 0x04
    2fa4:	22 30       	cpi	r18, 0x02	; 2
    2fa6:	31 05       	cpc	r19, r1
    2fa8:	81 f0       	breq	.+32     	; 0x2fca <GPIO_readPort+0x68>
    2faa:	8b 81       	ldd	r24, Y+3	; 0x03
    2fac:	9c 81       	ldd	r25, Y+4	; 0x04
    2fae:	83 30       	cpi	r24, 0x03	; 3
    2fb0:	91 05       	cpc	r25, r1
    2fb2:	81 f0       	breq	.+32     	; 0x2fd4 <GPIO_readPort+0x72>
    2fb4:	13 c0       	rjmp	.+38     	; 0x2fdc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2fb6:	e9 e3       	ldi	r30, 0x39	; 57
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	0e c0       	rjmp	.+28     	; 0x2fdc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2fc0:	e6 e3       	ldi	r30, 0x36	; 54
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	89 83       	std	Y+1, r24	; 0x01
    2fc8:	09 c0       	rjmp	.+18     	; 0x2fdc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2fca:	e3 e3       	ldi	r30, 0x33	; 51
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	89 83       	std	Y+1, r24	; 0x01
    2fd2:	04 c0       	rjmp	.+8      	; 0x2fdc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2fd4:	e0 e3       	ldi	r30, 0x30	; 48
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <KEYPAD_getPressedKey>:
#include "avr/delay.h"

uint8 KEYPAD_adjustKeyNumber(uint8 button_num);

uint8 KEYPAD_getPressedKey()
{
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	64 97       	sbiw	r28, 0x14	; 20
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	de bf       	out	0x3e, r29	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	cd bf       	out	0x3d, r28	; 61
	/* Make the columns pins as input by static configuration */
	for(int i=0;i<KEYPAD_COLUMN_NUMB;i++)
    3000:	1c 8a       	std	Y+20, r1	; 0x14
    3002:	1b 8a       	std	Y+19, r1	; 0x13
    3004:	0d c0       	rjmp	.+26     	; 0x3020 <KEYPAD_getPressedKey+0x34>
    	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i, INPUT);
    3006:	8b 89       	ldd	r24, Y+19	; 0x13
    3008:	98 2f       	mov	r25, r24
    300a:	9c 5f       	subi	r25, 0xFC	; 252
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	69 2f       	mov	r22, r25
    3010:	40 e0       	ldi	r20, 0x00	; 0
    3012:	0e 94 b7 14 	call	0x296e	; 0x296e <GPIO_setupPinDirection>
uint8 KEYPAD_adjustKeyNumber(uint8 button_num);

uint8 KEYPAD_getPressedKey()
{
	/* Make the columns pins as input by static configuration */
	for(int i=0;i<KEYPAD_COLUMN_NUMB;i++)
    3016:	8b 89       	ldd	r24, Y+19	; 0x13
    3018:	9c 89       	ldd	r25, Y+20	; 0x14
    301a:	01 96       	adiw	r24, 0x01	; 1
    301c:	9c 8b       	std	Y+20, r25	; 0x14
    301e:	8b 8b       	std	Y+19, r24	; 0x13
    3020:	8b 89       	ldd	r24, Y+19	; 0x13
    3022:	9c 89       	ldd	r25, Y+20	; 0x14
    3024:	84 30       	cpi	r24, 0x04	; 4
    3026:	91 05       	cpc	r25, r1
    3028:	74 f3       	brlt	.-36     	; 0x3006 <KEYPAD_getPressedKey+0x1a>
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	a8 e4       	ldi	r26, 0x48	; 72
    3030:	b2 e4       	ldi	r27, 0x42	; 66
    3032:	8b 87       	std	Y+11, r24	; 0x0b
    3034:	9c 87       	std	Y+12, r25	; 0x0c
    3036:	ad 87       	std	Y+13, r26	; 0x0d
    3038:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303a:	6b 85       	ldd	r22, Y+11	; 0x0b
    303c:	7c 85       	ldd	r23, Y+12	; 0x0c
    303e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3040:	9e 85       	ldd	r25, Y+14	; 0x0e
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	4a e7       	ldi	r20, 0x7A	; 122
    3048:	55 e4       	ldi	r21, 0x45	; 69
    304a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	8f 83       	std	Y+7, r24	; 0x07
    3054:	98 87       	std	Y+8, r25	; 0x08
    3056:	a9 87       	std	Y+9, r26	; 0x09
    3058:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    305a:	6f 81       	ldd	r22, Y+7	; 0x07
    305c:	78 85       	ldd	r23, Y+8	; 0x08
    305e:	89 85       	ldd	r24, Y+9	; 0x09
    3060:	9a 85       	ldd	r25, Y+10	; 0x0a
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e8       	ldi	r20, 0x80	; 128
    3068:	5f e3       	ldi	r21, 0x3F	; 63
    306a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    306e:	88 23       	and	r24, r24
    3070:	2c f4       	brge	.+10     	; 0x307c <KEYPAD_getPressedKey+0x90>
		__ticks = 1;
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	9e 83       	std	Y+6, r25	; 0x06
    3078:	8d 83       	std	Y+5, r24	; 0x05
    307a:	3f c0       	rjmp	.+126    	; 0x30fa <KEYPAD_getPressedKey+0x10e>
	else if (__tmp > 65535)
    307c:	6f 81       	ldd	r22, Y+7	; 0x07
    307e:	78 85       	ldd	r23, Y+8	; 0x08
    3080:	89 85       	ldd	r24, Y+9	; 0x09
    3082:	9a 85       	ldd	r25, Y+10	; 0x0a
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	3f ef       	ldi	r19, 0xFF	; 255
    3088:	4f e7       	ldi	r20, 0x7F	; 127
    308a:	57 e4       	ldi	r21, 0x47	; 71
    308c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3090:	18 16       	cp	r1, r24
    3092:	4c f5       	brge	.+82     	; 0x30e6 <KEYPAD_getPressedKey+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3094:	6b 85       	ldd	r22, Y+11	; 0x0b
    3096:	7c 85       	ldd	r23, Y+12	; 0x0c
    3098:	8d 85       	ldd	r24, Y+13	; 0x0d
    309a:	9e 85       	ldd	r25, Y+14	; 0x0e
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e2       	ldi	r20, 0x20	; 32
    30a2:	51 e4       	ldi	r21, 0x41	; 65
    30a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	bc 01       	movw	r22, r24
    30ae:	cd 01       	movw	r24, r26
    30b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	9e 83       	std	Y+6, r25	; 0x06
    30ba:	8d 83       	std	Y+5, r24	; 0x05
    30bc:	0f c0       	rjmp	.+30     	; 0x30dc <KEYPAD_getPressedKey+0xf0>
    30be:	80 e9       	ldi	r24, 0x90	; 144
    30c0:	91 e0       	ldi	r25, 0x01	; 1
    30c2:	9c 83       	std	Y+4, r25	; 0x04
    30c4:	8b 83       	std	Y+3, r24	; 0x03
    30c6:	8b 81       	ldd	r24, Y+3	; 0x03
    30c8:	9c 81       	ldd	r25, Y+4	; 0x04
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	f1 f7       	brne	.-4      	; 0x30ca <KEYPAD_getPressedKey+0xde>
    30ce:	9c 83       	std	Y+4, r25	; 0x04
    30d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d2:	8d 81       	ldd	r24, Y+5	; 0x05
    30d4:	9e 81       	ldd	r25, Y+6	; 0x06
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	9e 83       	std	Y+6, r25	; 0x06
    30da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30dc:	8d 81       	ldd	r24, Y+5	; 0x05
    30de:	9e 81       	ldd	r25, Y+6	; 0x06
    30e0:	00 97       	sbiw	r24, 0x00	; 0
    30e2:	69 f7       	brne	.-38     	; 0x30be <KEYPAD_getPressedKey+0xd2>
    30e4:	14 c0       	rjmp	.+40     	; 0x310e <KEYPAD_getPressedKey+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e6:	6f 81       	ldd	r22, Y+7	; 0x07
    30e8:	78 85       	ldd	r23, Y+8	; 0x08
    30ea:	89 85       	ldd	r24, Y+9	; 0x09
    30ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	9e 83       	std	Y+6, r25	; 0x06
    30f8:	8d 83       	std	Y+5, r24	; 0x05
    30fa:	8d 81       	ldd	r24, Y+5	; 0x05
    30fc:	9e 81       	ldd	r25, Y+6	; 0x06
    30fe:	9a 83       	std	Y+2, r25	; 0x02
    3100:	89 83       	std	Y+1, r24	; 0x01
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	9a 81       	ldd	r25, Y+2	; 0x02
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	f1 f7       	brne	.-4      	; 0x3106 <KEYPAD_getPressedKey+0x11a>
    310a:	9a 83       	std	Y+2, r25	; 0x02
    310c:	89 83       	std	Y+1, r24	; 0x01
    	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i, INPUT);

	while(1)
	{
       _delay_ms(50);
		for(int row=0;row<KEYPAD_ROWS_NUMB;row++)
    310e:	1a 8a       	std	Y+18, r1	; 0x12
    3110:	19 8a       	std	Y+17, r1	; 0x11
    3112:	48 c0       	rjmp	.+144    	; 0x31a4 <KEYPAD_getPressedKey+0x1b8>
		{
			/*Make row pin as output and write 0 in it*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , OUTPUT);
    3114:	99 89       	ldd	r25, Y+17	; 0x11
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	69 2f       	mov	r22, r25
    311a:	41 e0       	ldi	r20, 0x01	; 1
    311c:	0e 94 b7 14 	call	0x296e	; 0x296e <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , BUTTON_IS_PRESSED);
    3120:	99 89       	ldd	r25, Y+17	; 0x11
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	69 2f       	mov	r22, r25
    3126:	40 e0       	ldi	r20, 0x00	; 0
    3128:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>

			/*check if the button is pressed on channel or not*/
			for(int col=0;col<KEYPAD_COLUMN_NUMB;col++)
    312c:	18 8a       	std	Y+16, r1	; 0x10
    312e:	1f 86       	std	Y+15, r1	; 0x0f
    3130:	29 c0       	rjmp	.+82     	; 0x3184 <KEYPAD_getPressedKey+0x198>
			{
			 if(GPIO_readPin(KEYPAD_COL_PORT_ID , KEYPAD_COL_START_PIN_ID+col) == BUTTON_IS_PRESSED )
    3132:	8f 85       	ldd	r24, Y+15	; 0x0f
    3134:	98 2f       	mov	r25, r24
    3136:	9c 5f       	subi	r25, 0xFC	; 252
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	69 2f       	mov	r22, r25
    313c:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <GPIO_readPin>
    3140:	88 23       	and	r24, r24
    3142:	d9 f4       	brne	.+54     	; 0x317a <KEYPAD_getPressedKey+0x18e>
			 {
				GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , INPUT);
    3144:	99 89       	ldd	r25, Y+17	; 0x11
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	69 2f       	mov	r22, r25
    314a:	40 e0       	ldi	r20, 0x00	; 0
    314c:	0e 94 b7 14 	call	0x296e	; 0x296e <GPIO_setupPinDirection>
				return KEYPAD_adjustKeyNumber((row*KEYPAD_COLUMN_NUMB)+col+1);
    3150:	89 89       	ldd	r24, Y+17	; 0x11
    3152:	9a 89       	ldd	r25, Y+18	; 0x12
    3154:	88 0f       	add	r24, r24
    3156:	99 1f       	adc	r25, r25
    3158:	88 0f       	add	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	98 2f       	mov	r25, r24
    315e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3160:	89 0f       	add	r24, r25
    3162:	8f 5f       	subi	r24, 0xFF	; 255
    3164:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <KEYPAD_adjustKeyNumber>
			}
            /*make this pin input to open another pin in row*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , INPUT);
		}
}
}
    3168:	64 96       	adiw	r28, 0x14	; 20
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	cf 91       	pop	r28
    3176:	df 91       	pop	r29
    3178:	08 95       	ret
			/*Make row pin as output and write 0 in it*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , BUTTON_IS_PRESSED);

			/*check if the button is pressed on channel or not*/
			for(int col=0;col<KEYPAD_COLUMN_NUMB;col++)
    317a:	8f 85       	ldd	r24, Y+15	; 0x0f
    317c:	98 89       	ldd	r25, Y+16	; 0x10
    317e:	01 96       	adiw	r24, 0x01	; 1
    3180:	98 8b       	std	Y+16, r25	; 0x10
    3182:	8f 87       	std	Y+15, r24	; 0x0f
    3184:	8f 85       	ldd	r24, Y+15	; 0x0f
    3186:	98 89       	ldd	r25, Y+16	; 0x10
    3188:	84 30       	cpi	r24, 0x04	; 4
    318a:	91 05       	cpc	r25, r1
    318c:	94 f2       	brlt	.-92     	; 0x3132 <KEYPAD_getPressedKey+0x146>
				return KEYPAD_adjustKeyNumber((row*KEYPAD_COLUMN_NUMB)+col+1);
			 }

			}
            /*make this pin input to open another pin in row*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_START_PIN_ID+row , INPUT);
    318e:	99 89       	ldd	r25, Y+17	; 0x11
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	69 2f       	mov	r22, r25
    3194:	40 e0       	ldi	r20, 0x00	; 0
    3196:	0e 94 b7 14 	call	0x296e	; 0x296e <GPIO_setupPinDirection>
    	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_START_PIN_ID+i, INPUT);

	while(1)
	{
       _delay_ms(50);
		for(int row=0;row<KEYPAD_ROWS_NUMB;row++)
    319a:	89 89       	ldd	r24, Y+17	; 0x11
    319c:	9a 89       	ldd	r25, Y+18	; 0x12
    319e:	01 96       	adiw	r24, 0x01	; 1
    31a0:	9a 8b       	std	Y+18, r25	; 0x12
    31a2:	89 8b       	std	Y+17, r24	; 0x11
    31a4:	89 89       	ldd	r24, Y+17	; 0x11
    31a6:	9a 89       	ldd	r25, Y+18	; 0x12
    31a8:	84 30       	cpi	r24, 0x04	; 4
    31aa:	91 05       	cpc	r25, r1
    31ac:	0c f4       	brge	.+2      	; 0x31b0 <KEYPAD_getPressedKey+0x1c4>
    31ae:	b2 cf       	rjmp	.-156    	; 0x3114 <KEYPAD_getPressedKey+0x128>
    31b0:	3c cf       	rjmp	.-392    	; 0x302a <KEYPAD_getPressedKey+0x3e>

000031b2 <KEYPAD_adjustKeyNumber>:
}
}


uint8 KEYPAD_adjustKeyNumber(uint8 button_num)
{
    31b2:	df 93       	push	r29
    31b4:	cf 93       	push	r28
    31b6:	00 d0       	rcall	.+0      	; 0x31b8 <KEYPAD_adjustKeyNumber+0x6>
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <KEYPAD_adjustKeyNumber+0x8>
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 adjustNum=0;
    31c0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_num)
    31c2:	8a 81       	ldd	r24, Y+2	; 0x02
    31c4:	28 2f       	mov	r18, r24
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	3c 83       	std	Y+4, r19	; 0x04
    31ca:	2b 83       	std	Y+3, r18	; 0x03
    31cc:	8b 81       	ldd	r24, Y+3	; 0x03
    31ce:	9c 81       	ldd	r25, Y+4	; 0x04
    31d0:	88 30       	cpi	r24, 0x08	; 8
    31d2:	91 05       	cpc	r25, r1
    31d4:	09 f4       	brne	.+2      	; 0x31d8 <KEYPAD_adjustKeyNumber+0x26>
    31d6:	70 c0       	rjmp	.+224    	; 0x32b8 <KEYPAD_adjustKeyNumber+0x106>
    31d8:	2b 81       	ldd	r18, Y+3	; 0x03
    31da:	3c 81       	ldd	r19, Y+4	; 0x04
    31dc:	29 30       	cpi	r18, 0x09	; 9
    31de:	31 05       	cpc	r19, r1
    31e0:	5c f5       	brge	.+86     	; 0x3238 <KEYPAD_adjustKeyNumber+0x86>
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	9c 81       	ldd	r25, Y+4	; 0x04
    31e6:	84 30       	cpi	r24, 0x04	; 4
    31e8:	91 05       	cpc	r25, r1
    31ea:	09 f4       	brne	.+2      	; 0x31ee <KEYPAD_adjustKeyNumber+0x3c>
    31ec:	59 c0       	rjmp	.+178    	; 0x32a0 <KEYPAD_adjustKeyNumber+0xee>
    31ee:	2b 81       	ldd	r18, Y+3	; 0x03
    31f0:	3c 81       	ldd	r19, Y+4	; 0x04
    31f2:	25 30       	cpi	r18, 0x05	; 5
    31f4:	31 05       	cpc	r19, r1
    31f6:	9c f4       	brge	.+38     	; 0x321e <KEYPAD_adjustKeyNumber+0x6c>
    31f8:	8b 81       	ldd	r24, Y+3	; 0x03
    31fa:	9c 81       	ldd	r25, Y+4	; 0x04
    31fc:	82 30       	cpi	r24, 0x02	; 2
    31fe:	91 05       	cpc	r25, r1
    3200:	09 f4       	brne	.+2      	; 0x3204 <KEYPAD_adjustKeyNumber+0x52>
    3202:	48 c0       	rjmp	.+144    	; 0x3294 <KEYPAD_adjustKeyNumber+0xe2>
    3204:	2b 81       	ldd	r18, Y+3	; 0x03
    3206:	3c 81       	ldd	r19, Y+4	; 0x04
    3208:	23 30       	cpi	r18, 0x03	; 3
    320a:	31 05       	cpc	r19, r1
    320c:	0c f0       	brlt	.+2      	; 0x3210 <KEYPAD_adjustKeyNumber+0x5e>
    320e:	45 c0       	rjmp	.+138    	; 0x329a <KEYPAD_adjustKeyNumber+0xe8>
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	9c 81       	ldd	r25, Y+4	; 0x04
    3214:	81 30       	cpi	r24, 0x01	; 1
    3216:	91 05       	cpc	r25, r1
    3218:	09 f4       	brne	.+2      	; 0x321c <KEYPAD_adjustKeyNumber+0x6a>
    321a:	39 c0       	rjmp	.+114    	; 0x328e <KEYPAD_adjustKeyNumber+0xdc>
    321c:	66 c0       	rjmp	.+204    	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
    321e:	2b 81       	ldd	r18, Y+3	; 0x03
    3220:	3c 81       	ldd	r19, Y+4	; 0x04
    3222:	26 30       	cpi	r18, 0x06	; 6
    3224:	31 05       	cpc	r19, r1
    3226:	09 f4       	brne	.+2      	; 0x322a <KEYPAD_adjustKeyNumber+0x78>
    3228:	41 c0       	rjmp	.+130    	; 0x32ac <KEYPAD_adjustKeyNumber+0xfa>
    322a:	8b 81       	ldd	r24, Y+3	; 0x03
    322c:	9c 81       	ldd	r25, Y+4	; 0x04
    322e:	87 30       	cpi	r24, 0x07	; 7
    3230:	91 05       	cpc	r25, r1
    3232:	0c f0       	brlt	.+2      	; 0x3236 <KEYPAD_adjustKeyNumber+0x84>
    3234:	3e c0       	rjmp	.+124    	; 0x32b2 <KEYPAD_adjustKeyNumber+0x100>
    3236:	37 c0       	rjmp	.+110    	; 0x32a6 <KEYPAD_adjustKeyNumber+0xf4>
    3238:	2b 81       	ldd	r18, Y+3	; 0x03
    323a:	3c 81       	ldd	r19, Y+4	; 0x04
    323c:	2c 30       	cpi	r18, 0x0C	; 12
    323e:	31 05       	cpc	r19, r1
    3240:	09 f4       	brne	.+2      	; 0x3244 <KEYPAD_adjustKeyNumber+0x92>
    3242:	46 c0       	rjmp	.+140    	; 0x32d0 <KEYPAD_adjustKeyNumber+0x11e>
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	9c 81       	ldd	r25, Y+4	; 0x04
    3248:	8d 30       	cpi	r24, 0x0D	; 13
    324a:	91 05       	cpc	r25, r1
    324c:	5c f4       	brge	.+22     	; 0x3264 <KEYPAD_adjustKeyNumber+0xb2>
    324e:	2b 81       	ldd	r18, Y+3	; 0x03
    3250:	3c 81       	ldd	r19, Y+4	; 0x04
    3252:	2a 30       	cpi	r18, 0x0A	; 10
    3254:	31 05       	cpc	r19, r1
    3256:	b1 f1       	breq	.+108    	; 0x32c4 <KEYPAD_adjustKeyNumber+0x112>
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	9c 81       	ldd	r25, Y+4	; 0x04
    325c:	8b 30       	cpi	r24, 0x0B	; 11
    325e:	91 05       	cpc	r25, r1
    3260:	a4 f5       	brge	.+104    	; 0x32ca <KEYPAD_adjustKeyNumber+0x118>
    3262:	2d c0       	rjmp	.+90     	; 0x32be <KEYPAD_adjustKeyNumber+0x10c>
    3264:	2b 81       	ldd	r18, Y+3	; 0x03
    3266:	3c 81       	ldd	r19, Y+4	; 0x04
    3268:	2e 30       	cpi	r18, 0x0E	; 14
    326a:	31 05       	cpc	r19, r1
    326c:	b9 f1       	breq	.+110    	; 0x32dc <KEYPAD_adjustKeyNumber+0x12a>
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	9c 81       	ldd	r25, Y+4	; 0x04
    3272:	8e 30       	cpi	r24, 0x0E	; 14
    3274:	91 05       	cpc	r25, r1
    3276:	7c f1       	brlt	.+94     	; 0x32d6 <KEYPAD_adjustKeyNumber+0x124>
    3278:	2b 81       	ldd	r18, Y+3	; 0x03
    327a:	3c 81       	ldd	r19, Y+4	; 0x04
    327c:	2f 30       	cpi	r18, 0x0F	; 15
    327e:	31 05       	cpc	r19, r1
    3280:	79 f1       	breq	.+94     	; 0x32e0 <KEYPAD_adjustKeyNumber+0x12e>
    3282:	8b 81       	ldd	r24, Y+3	; 0x03
    3284:	9c 81       	ldd	r25, Y+4	; 0x04
    3286:	80 31       	cpi	r24, 0x10	; 16
    3288:	91 05       	cpc	r25, r1
    328a:	69 f1       	breq	.+90     	; 0x32e6 <KEYPAD_adjustKeyNumber+0x134>
    328c:	2e c0       	rjmp	.+92     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
	{
	case 1:
			adjustNum = BUTTON1;
    328e:	87 e0       	ldi	r24, 0x07	; 7
    3290:	89 83       	std	Y+1, r24	; 0x01
    3292:	2b c0       	rjmp	.+86     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 2:
			adjustNum = BUTTON2;
    3294:	88 e0       	ldi	r24, 0x08	; 8
    3296:	89 83       	std	Y+1, r24	; 0x01
    3298:	28 c0       	rjmp	.+80     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 3:
			adjustNum = BUTTON3;
    329a:	89 e0       	ldi	r24, 0x09	; 9
    329c:	89 83       	std	Y+1, r24	; 0x01
    329e:	25 c0       	rjmp	.+74     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 4:
			adjustNum = BUTTON4;
    32a0:	8f e2       	ldi	r24, 0x2F	; 47
    32a2:	89 83       	std	Y+1, r24	; 0x01
    32a4:	22 c0       	rjmp	.+68     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 5:
			adjustNum = BUTTON5;
    32a6:	84 e0       	ldi	r24, 0x04	; 4
    32a8:	89 83       	std	Y+1, r24	; 0x01
    32aa:	1f c0       	rjmp	.+62     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 6:
			adjustNum = BUTTON6;
    32ac:	85 e0       	ldi	r24, 0x05	; 5
    32ae:	89 83       	std	Y+1, r24	; 0x01
    32b0:	1c c0       	rjmp	.+56     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 7:
			adjustNum = BUTTON7;
    32b2:	86 e0       	ldi	r24, 0x06	; 6
    32b4:	89 83       	std	Y+1, r24	; 0x01
    32b6:	19 c0       	rjmp	.+50     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 8:
			adjustNum = BUTTON8;
    32b8:	8a e2       	ldi	r24, 0x2A	; 42
    32ba:	89 83       	std	Y+1, r24	; 0x01
    32bc:	16 c0       	rjmp	.+44     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 9:
			adjustNum = BUTTON9;
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	89 83       	std	Y+1, r24	; 0x01
    32c2:	13 c0       	rjmp	.+38     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 10:
			adjustNum = BUTTON10;
    32c4:	82 e0       	ldi	r24, 0x02	; 2
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	10 c0       	rjmp	.+32     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 11:
			adjustNum = BUTTON11;
    32ca:	83 e0       	ldi	r24, 0x03	; 3
    32cc:	89 83       	std	Y+1, r24	; 0x01
    32ce:	0d c0       	rjmp	.+26     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 12:
			adjustNum = BUTTON12;
    32d0:	8d e2       	ldi	r24, 0x2D	; 45
    32d2:	89 83       	std	Y+1, r24	; 0x01
    32d4:	0a c0       	rjmp	.+20     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 13:
			adjustNum = BUTTON13;
    32d6:	80 e2       	ldi	r24, 0x20	; 32
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	07 c0       	rjmp	.+14     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 14:
			adjustNum = BUTTON14;
    32dc:	19 82       	std	Y+1, r1	; 0x01
    32de:	05 c0       	rjmp	.+10     	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 15:
			adjustNum = BUTTON15;
    32e0:	80 e2       	ldi	r24, 0x20	; 32
    32e2:	89 83       	std	Y+1, r24	; 0x01
    32e4:	02 c0       	rjmp	.+4      	; 0x32ea <KEYPAD_adjustKeyNumber+0x138>
			break;
	case 16:
			adjustNum = BUTTON16;
    32e6:	8b e2       	ldi	r24, 0x2B	; 43
    32e8:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return adjustNum;
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	cf 91       	pop	r28
    32f6:	df 91       	pop	r29
    32f8:	08 95       	ret

000032fa <LCD_sendCommand>:
#include "common_macros.h" /* To use the macros like SET_BIT */



void LCD_sendCommand(uint8 command)
{
    32fa:	0f 93       	push	r16
    32fc:	1f 93       	push	r17
    32fe:	df 93       	push	r29
    3300:	cf 93       	push	r28
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	c3 56       	subi	r28, 0x63	; 99
    3308:	d0 40       	sbci	r29, 0x00	; 0
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	fe 01       	movw	r30, r28
    3316:	ed 59       	subi	r30, 0x9D	; 157
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);     /*write 0 in RS pin */
    331c:	82 e0       	ldi	r24, 0x02	; 2
    331e:	62 e0       	ldi	r22, 0x02	; 2
    3320:	40 e0       	ldi	r20, 0x00	; 0
    3322:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    3326:	fe 01       	movw	r30, r28
    3328:	e1 5a       	subi	r30, 0xA1	; 161
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	a0 e8       	ldi	r26, 0x80	; 128
    3332:	bf e3       	ldi	r27, 0x3F	; 63
    3334:	80 83       	st	Z, r24
    3336:	91 83       	std	Z+1, r25	; 0x01
    3338:	a2 83       	std	Z+2, r26	; 0x02
    333a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    333c:	8e 01       	movw	r16, r28
    333e:	05 5a       	subi	r16, 0xA5	; 165
    3340:	1f 4f       	sbci	r17, 0xFF	; 255
    3342:	fe 01       	movw	r30, r28
    3344:	e1 5a       	subi	r30, 0xA1	; 161
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	60 81       	ld	r22, Z
    334a:	71 81       	ldd	r23, Z+1	; 0x01
    334c:	82 81       	ldd	r24, Z+2	; 0x02
    334e:	93 81       	ldd	r25, Z+3	; 0x03
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	4a e7       	ldi	r20, 0x7A	; 122
    3356:	55 e4       	ldi	r21, 0x45	; 69
    3358:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	f8 01       	movw	r30, r16
    3362:	80 83       	st	Z, r24
    3364:	91 83       	std	Z+1, r25	; 0x01
    3366:	a2 83       	std	Z+2, r26	; 0x02
    3368:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    336a:	fe 01       	movw	r30, r28
    336c:	e5 5a       	subi	r30, 0xA5	; 165
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	60 81       	ld	r22, Z
    3372:	71 81       	ldd	r23, Z+1	; 0x01
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	40 e8       	ldi	r20, 0x80	; 128
    337e:	5f e3       	ldi	r21, 0x3F	; 63
    3380:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3384:	88 23       	and	r24, r24
    3386:	44 f4       	brge	.+16     	; 0x3398 <LCD_sendCommand+0x9e>
		__ticks = 1;
    3388:	fe 01       	movw	r30, r28
    338a:	e7 5a       	subi	r30, 0xA7	; 167
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	91 83       	std	Z+1, r25	; 0x01
    3394:	80 83       	st	Z, r24
    3396:	64 c0       	rjmp	.+200    	; 0x3460 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    3398:	fe 01       	movw	r30, r28
    339a:	e5 5a       	subi	r30, 0xA5	; 165
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	60 81       	ld	r22, Z
    33a0:	71 81       	ldd	r23, Z+1	; 0x01
    33a2:	82 81       	ldd	r24, Z+2	; 0x02
    33a4:	93 81       	ldd	r25, Z+3	; 0x03
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	3f ef       	ldi	r19, 0xFF	; 255
    33aa:	4f e7       	ldi	r20, 0x7F	; 127
    33ac:	57 e4       	ldi	r21, 0x47	; 71
    33ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    33b2:	18 16       	cp	r1, r24
    33b4:	0c f0       	brlt	.+2      	; 0x33b8 <LCD_sendCommand+0xbe>
    33b6:	43 c0       	rjmp	.+134    	; 0x343e <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b8:	fe 01       	movw	r30, r28
    33ba:	e1 5a       	subi	r30, 0xA1	; 161
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	60 81       	ld	r22, Z
    33c0:	71 81       	ldd	r23, Z+1	; 0x01
    33c2:	82 81       	ldd	r24, Z+2	; 0x02
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	40 e2       	ldi	r20, 0x20	; 32
    33cc:	51 e4       	ldi	r21, 0x41	; 65
    33ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	8e 01       	movw	r16, r28
    33d8:	07 5a       	subi	r16, 0xA7	; 167
    33da:	1f 4f       	sbci	r17, 0xFF	; 255
    33dc:	bc 01       	movw	r22, r24
    33de:	cd 01       	movw	r24, r26
    33e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	f8 01       	movw	r30, r16
    33ea:	91 83       	std	Z+1, r25	; 0x01
    33ec:	80 83       	st	Z, r24
    33ee:	1f c0       	rjmp	.+62     	; 0x342e <LCD_sendCommand+0x134>
    33f0:	fe 01       	movw	r30, r28
    33f2:	e9 5a       	subi	r30, 0xA9	; 169
    33f4:	ff 4f       	sbci	r31, 0xFF	; 255
    33f6:	80 e9       	ldi	r24, 0x90	; 144
    33f8:	91 e0       	ldi	r25, 0x01	; 1
    33fa:	91 83       	std	Z+1, r25	; 0x01
    33fc:	80 83       	st	Z, r24
    33fe:	fe 01       	movw	r30, r28
    3400:	e9 5a       	subi	r30, 0xA9	; 169
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	80 81       	ld	r24, Z
    3406:	91 81       	ldd	r25, Z+1	; 0x01
    3408:	01 97       	sbiw	r24, 0x01	; 1
    340a:	f1 f7       	brne	.-4      	; 0x3408 <LCD_sendCommand+0x10e>
    340c:	fe 01       	movw	r30, r28
    340e:	e9 5a       	subi	r30, 0xA9	; 169
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	91 83       	std	Z+1, r25	; 0x01
    3414:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3416:	de 01       	movw	r26, r28
    3418:	a7 5a       	subi	r26, 0xA7	; 167
    341a:	bf 4f       	sbci	r27, 0xFF	; 255
    341c:	fe 01       	movw	r30, r28
    341e:	e7 5a       	subi	r30, 0xA7	; 167
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	80 81       	ld	r24, Z
    3424:	91 81       	ldd	r25, Z+1	; 0x01
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	11 96       	adiw	r26, 0x01	; 1
    342a:	9c 93       	st	X, r25
    342c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342e:	fe 01       	movw	r30, r28
    3430:	e7 5a       	subi	r30, 0xA7	; 167
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	80 81       	ld	r24, Z
    3436:	91 81       	ldd	r25, Z+1	; 0x01
    3438:	00 97       	sbiw	r24, 0x00	; 0
    343a:	d1 f6       	brne	.-76     	; 0x33f0 <LCD_sendCommand+0xf6>
    343c:	27 c0       	rjmp	.+78     	; 0x348c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    343e:	8e 01       	movw	r16, r28
    3440:	07 5a       	subi	r16, 0xA7	; 167
    3442:	1f 4f       	sbci	r17, 0xFF	; 255
    3444:	fe 01       	movw	r30, r28
    3446:	e5 5a       	subi	r30, 0xA5	; 165
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	60 81       	ld	r22, Z
    344c:	71 81       	ldd	r23, Z+1	; 0x01
    344e:	82 81       	ldd	r24, Z+2	; 0x02
    3450:	93 81       	ldd	r25, Z+3	; 0x03
    3452:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	f8 01       	movw	r30, r16
    345c:	91 83       	std	Z+1, r25	; 0x01
    345e:	80 83       	st	Z, r24
    3460:	de 01       	movw	r26, r28
    3462:	ab 5a       	subi	r26, 0xAB	; 171
    3464:	bf 4f       	sbci	r27, 0xFF	; 255
    3466:	fe 01       	movw	r30, r28
    3468:	e7 5a       	subi	r30, 0xA7	; 167
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	80 81       	ld	r24, Z
    346e:	91 81       	ldd	r25, Z+1	; 0x01
    3470:	8d 93       	st	X+, r24
    3472:	9c 93       	st	X, r25
    3474:	fe 01       	movw	r30, r28
    3476:	eb 5a       	subi	r30, 0xAB	; 171
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	80 81       	ld	r24, Z
    347c:	91 81       	ldd	r25, Z+1	; 0x01
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <LCD_sendCommand+0x184>
    3482:	fe 01       	movw	r30, r28
    3484:	eb 5a       	subi	r30, 0xAB	; 171
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	91 83       	std	Z+1, r25	; 0x01
    348a:	80 83       	st	Z, r24
	_delay_ms(1);

	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);   /*write 1 in enable pin */
    348c:	82 e0       	ldi	r24, 0x02	; 2
    348e:	63 e0       	ldi	r22, 0x03	; 3
    3490:	41 e0       	ldi	r20, 0x01	; 1
    3492:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    3496:	fe 01       	movw	r30, r28
    3498:	ef 5a       	subi	r30, 0xAF	; 175
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	a0 e8       	ldi	r26, 0x80	; 128
    34a2:	bf e3       	ldi	r27, 0x3F	; 63
    34a4:	80 83       	st	Z, r24
    34a6:	91 83       	std	Z+1, r25	; 0x01
    34a8:	a2 83       	std	Z+2, r26	; 0x02
    34aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ac:	8e 01       	movw	r16, r28
    34ae:	03 5b       	subi	r16, 0xB3	; 179
    34b0:	1f 4f       	sbci	r17, 0xFF	; 255
    34b2:	fe 01       	movw	r30, r28
    34b4:	ef 5a       	subi	r30, 0xAF	; 175
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	60 81       	ld	r22, Z
    34ba:	71 81       	ldd	r23, Z+1	; 0x01
    34bc:	82 81       	ldd	r24, Z+2	; 0x02
    34be:	93 81       	ldd	r25, Z+3	; 0x03
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	4a e7       	ldi	r20, 0x7A	; 122
    34c6:	55 e4       	ldi	r21, 0x45	; 69
    34c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	f8 01       	movw	r30, r16
    34d2:	80 83       	st	Z, r24
    34d4:	91 83       	std	Z+1, r25	; 0x01
    34d6:	a2 83       	std	Z+2, r26	; 0x02
    34d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34da:	fe 01       	movw	r30, r28
    34dc:	e3 5b       	subi	r30, 0xB3	; 179
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	60 81       	ld	r22, Z
    34e2:	71 81       	ldd	r23, Z+1	; 0x01
    34e4:	82 81       	ldd	r24, Z+2	; 0x02
    34e6:	93 81       	ldd	r25, Z+3	; 0x03
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	40 e8       	ldi	r20, 0x80	; 128
    34ee:	5f e3       	ldi	r21, 0x3F	; 63
    34f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    34f4:	88 23       	and	r24, r24
    34f6:	44 f4       	brge	.+16     	; 0x3508 <LCD_sendCommand+0x20e>
		__ticks = 1;
    34f8:	fe 01       	movw	r30, r28
    34fa:	e5 5b       	subi	r30, 0xB5	; 181
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	91 83       	std	Z+1, r25	; 0x01
    3504:	80 83       	st	Z, r24
    3506:	64 c0       	rjmp	.+200    	; 0x35d0 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    3508:	fe 01       	movw	r30, r28
    350a:	e3 5b       	subi	r30, 0xB3	; 179
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	60 81       	ld	r22, Z
    3510:	71 81       	ldd	r23, Z+1	; 0x01
    3512:	82 81       	ldd	r24, Z+2	; 0x02
    3514:	93 81       	ldd	r25, Z+3	; 0x03
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	3f ef       	ldi	r19, 0xFF	; 255
    351a:	4f e7       	ldi	r20, 0x7F	; 127
    351c:	57 e4       	ldi	r21, 0x47	; 71
    351e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3522:	18 16       	cp	r1, r24
    3524:	0c f0       	brlt	.+2      	; 0x3528 <LCD_sendCommand+0x22e>
    3526:	43 c0       	rjmp	.+134    	; 0x35ae <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3528:	fe 01       	movw	r30, r28
    352a:	ef 5a       	subi	r30, 0xAF	; 175
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	60 81       	ld	r22, Z
    3530:	71 81       	ldd	r23, Z+1	; 0x01
    3532:	82 81       	ldd	r24, Z+2	; 0x02
    3534:	93 81       	ldd	r25, Z+3	; 0x03
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e2       	ldi	r20, 0x20	; 32
    353c:	51 e4       	ldi	r21, 0x41	; 65
    353e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	8e 01       	movw	r16, r28
    3548:	05 5b       	subi	r16, 0xB5	; 181
    354a:	1f 4f       	sbci	r17, 0xFF	; 255
    354c:	bc 01       	movw	r22, r24
    354e:	cd 01       	movw	r24, r26
    3550:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	f8 01       	movw	r30, r16
    355a:	91 83       	std	Z+1, r25	; 0x01
    355c:	80 83       	st	Z, r24
    355e:	1f c0       	rjmp	.+62     	; 0x359e <LCD_sendCommand+0x2a4>
    3560:	fe 01       	movw	r30, r28
    3562:	e7 5b       	subi	r30, 0xB7	; 183
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	80 e9       	ldi	r24, 0x90	; 144
    3568:	91 e0       	ldi	r25, 0x01	; 1
    356a:	91 83       	std	Z+1, r25	; 0x01
    356c:	80 83       	st	Z, r24
    356e:	fe 01       	movw	r30, r28
    3570:	e7 5b       	subi	r30, 0xB7	; 183
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	80 81       	ld	r24, Z
    3576:	91 81       	ldd	r25, Z+1	; 0x01
    3578:	01 97       	sbiw	r24, 0x01	; 1
    357a:	f1 f7       	brne	.-4      	; 0x3578 <LCD_sendCommand+0x27e>
    357c:	fe 01       	movw	r30, r28
    357e:	e7 5b       	subi	r30, 0xB7	; 183
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	91 83       	std	Z+1, r25	; 0x01
    3584:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3586:	de 01       	movw	r26, r28
    3588:	a5 5b       	subi	r26, 0xB5	; 181
    358a:	bf 4f       	sbci	r27, 0xFF	; 255
    358c:	fe 01       	movw	r30, r28
    358e:	e5 5b       	subi	r30, 0xB5	; 181
    3590:	ff 4f       	sbci	r31, 0xFF	; 255
    3592:	80 81       	ld	r24, Z
    3594:	91 81       	ldd	r25, Z+1	; 0x01
    3596:	01 97       	sbiw	r24, 0x01	; 1
    3598:	11 96       	adiw	r26, 0x01	; 1
    359a:	9c 93       	st	X, r25
    359c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    359e:	fe 01       	movw	r30, r28
    35a0:	e5 5b       	subi	r30, 0xB5	; 181
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	80 81       	ld	r24, Z
    35a6:	91 81       	ldd	r25, Z+1	; 0x01
    35a8:	00 97       	sbiw	r24, 0x00	; 0
    35aa:	d1 f6       	brne	.-76     	; 0x3560 <LCD_sendCommand+0x266>
    35ac:	27 c0       	rjmp	.+78     	; 0x35fc <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ae:	8e 01       	movw	r16, r28
    35b0:	05 5b       	subi	r16, 0xB5	; 181
    35b2:	1f 4f       	sbci	r17, 0xFF	; 255
    35b4:	fe 01       	movw	r30, r28
    35b6:	e3 5b       	subi	r30, 0xB3	; 179
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	60 81       	ld	r22, Z
    35bc:	71 81       	ldd	r23, Z+1	; 0x01
    35be:	82 81       	ldd	r24, Z+2	; 0x02
    35c0:	93 81       	ldd	r25, Z+3	; 0x03
    35c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	f8 01       	movw	r30, r16
    35cc:	91 83       	std	Z+1, r25	; 0x01
    35ce:	80 83       	st	Z, r24
    35d0:	de 01       	movw	r26, r28
    35d2:	a9 5b       	subi	r26, 0xB9	; 185
    35d4:	bf 4f       	sbci	r27, 0xFF	; 255
    35d6:	fe 01       	movw	r30, r28
    35d8:	e5 5b       	subi	r30, 0xB5	; 181
    35da:	ff 4f       	sbci	r31, 0xFF	; 255
    35dc:	80 81       	ld	r24, Z
    35de:	91 81       	ldd	r25, Z+1	; 0x01
    35e0:	8d 93       	st	X+, r24
    35e2:	9c 93       	st	X, r25
    35e4:	fe 01       	movw	r30, r28
    35e6:	e9 5b       	subi	r30, 0xB9	; 185
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	80 81       	ld	r24, Z
    35ec:	91 81       	ldd	r25, Z+1	; 0x01
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	f1 f7       	brne	.-4      	; 0x35ee <LCD_sendCommand+0x2f4>
    35f2:	fe 01       	movw	r30, r28
    35f4:	e9 5b       	subi	r30, 0xB9	; 185
    35f6:	ff 4f       	sbci	r31, 0xFF	; 255
    35f8:	91 83       	std	Z+1, r25	; 0x01
    35fa:	80 83       	st	Z, r24

	_delay_ms(1);

#else

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(command,4) );
    35fc:	fe 01       	movw	r30, r28
    35fe:	ed 59       	subi	r30, 0x9D	; 157
    3600:	ff 4f       	sbci	r31, 0xFF	; 255
    3602:	80 81       	ld	r24, Z
    3604:	88 2f       	mov	r24, r24
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	80 71       	andi	r24, 0x10	; 16
    360a:	90 70       	andi	r25, 0x00	; 0
    360c:	95 95       	asr	r25
    360e:	87 95       	ror	r24
    3610:	95 95       	asr	r25
    3612:	87 95       	ror	r24
    3614:	95 95       	asr	r25
    3616:	87 95       	ror	r24
    3618:	95 95       	asr	r25
    361a:	87 95       	ror	r24
    361c:	98 2f       	mov	r25, r24
    361e:	82 e0       	ldi	r24, 0x02	; 2
    3620:	64 e0       	ldi	r22, 0x04	; 4
    3622:	49 2f       	mov	r20, r25
    3624:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(command,5) );
    3628:	fe 01       	movw	r30, r28
    362a:	ed 59       	subi	r30, 0x9D	; 157
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	80 81       	ld	r24, Z
    3630:	88 2f       	mov	r24, r24
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	80 72       	andi	r24, 0x20	; 32
    3636:	90 70       	andi	r25, 0x00	; 0
    3638:	95 95       	asr	r25
    363a:	87 95       	ror	r24
    363c:	95 95       	asr	r25
    363e:	87 95       	ror	r24
    3640:	95 95       	asr	r25
    3642:	87 95       	ror	r24
    3644:	95 95       	asr	r25
    3646:	87 95       	ror	r24
    3648:	95 95       	asr	r25
    364a:	87 95       	ror	r24
    364c:	98 2f       	mov	r25, r24
    364e:	82 e0       	ldi	r24, 0x02	; 2
    3650:	65 e0       	ldi	r22, 0x05	; 5
    3652:	49 2f       	mov	r20, r25
    3654:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(command,6) );
    3658:	fe 01       	movw	r30, r28
    365a:	ed 59       	subi	r30, 0x9D	; 157
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	80 81       	ld	r24, Z
    3660:	88 2f       	mov	r24, r24
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	80 74       	andi	r24, 0x40	; 64
    3666:	90 70       	andi	r25, 0x00	; 0
    3668:	08 2e       	mov	r0, r24
    366a:	89 2f       	mov	r24, r25
    366c:	00 0c       	add	r0, r0
    366e:	88 1f       	adc	r24, r24
    3670:	99 0b       	sbc	r25, r25
    3672:	00 0c       	add	r0, r0
    3674:	88 1f       	adc	r24, r24
    3676:	99 1f       	adc	r25, r25
    3678:	98 2f       	mov	r25, r24
    367a:	82 e0       	ldi	r24, 0x02	; 2
    367c:	66 e0       	ldi	r22, 0x06	; 6
    367e:	49 2f       	mov	r20, r25
    3680:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(command,7) );
    3684:	fe 01       	movw	r30, r28
    3686:	ed 59       	subi	r30, 0x9D	; 157
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	80 81       	ld	r24, Z
    368c:	98 2f       	mov	r25, r24
    368e:	99 1f       	adc	r25, r25
    3690:	99 27       	eor	r25, r25
    3692:	99 1f       	adc	r25, r25
    3694:	82 e0       	ldi	r24, 0x02	; 2
    3696:	67 e0       	ldi	r22, 0x07	; 7
    3698:	49 2f       	mov	r20, r25
    369a:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    369e:	fe 01       	movw	r30, r28
    36a0:	ed 5b       	subi	r30, 0xBD	; 189
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	a0 e8       	ldi	r26, 0x80	; 128
    36aa:	bf e3       	ldi	r27, 0x3F	; 63
    36ac:	80 83       	st	Z, r24
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	a2 83       	std	Z+2, r26	; 0x02
    36b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b4:	8e 01       	movw	r16, r28
    36b6:	01 5c       	subi	r16, 0xC1	; 193
    36b8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ba:	fe 01       	movw	r30, r28
    36bc:	ed 5b       	subi	r30, 0xBD	; 189
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	60 81       	ld	r22, Z
    36c2:	71 81       	ldd	r23, Z+1	; 0x01
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	93 81       	ldd	r25, Z+3	; 0x03
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	4a e7       	ldi	r20, 0x7A	; 122
    36ce:	55 e4       	ldi	r21, 0x45	; 69
    36d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	f8 01       	movw	r30, r16
    36da:	80 83       	st	Z, r24
    36dc:	91 83       	std	Z+1, r25	; 0x01
    36de:	a2 83       	std	Z+2, r26	; 0x02
    36e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36e2:	fe 01       	movw	r30, r28
    36e4:	ff 96       	adiw	r30, 0x3f	; 63
    36e6:	60 81       	ld	r22, Z
    36e8:	71 81       	ldd	r23, Z+1	; 0x01
    36ea:	82 81       	ldd	r24, Z+2	; 0x02
    36ec:	93 81       	ldd	r25, Z+3	; 0x03
    36ee:	20 e0       	ldi	r18, 0x00	; 0
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	40 e8       	ldi	r20, 0x80	; 128
    36f4:	5f e3       	ldi	r21, 0x3F	; 63
    36f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    36fa:	88 23       	and	r24, r24
    36fc:	2c f4       	brge	.+10     	; 0x3708 <LCD_sendCommand+0x40e>
		__ticks = 1;
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	9e af       	std	Y+62, r25	; 0x3e
    3704:	8d af       	std	Y+61, r24	; 0x3d
    3706:	46 c0       	rjmp	.+140    	; 0x3794 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    3708:	fe 01       	movw	r30, r28
    370a:	ff 96       	adiw	r30, 0x3f	; 63
    370c:	60 81       	ld	r22, Z
    370e:	71 81       	ldd	r23, Z+1	; 0x01
    3710:	82 81       	ldd	r24, Z+2	; 0x02
    3712:	93 81       	ldd	r25, Z+3	; 0x03
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	3f ef       	ldi	r19, 0xFF	; 255
    3718:	4f e7       	ldi	r20, 0x7F	; 127
    371a:	57 e4       	ldi	r21, 0x47	; 71
    371c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3720:	18 16       	cp	r1, r24
    3722:	64 f5       	brge	.+88     	; 0x377c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3724:	fe 01       	movw	r30, r28
    3726:	ed 5b       	subi	r30, 0xBD	; 189
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	60 81       	ld	r22, Z
    372c:	71 81       	ldd	r23, Z+1	; 0x01
    372e:	82 81       	ldd	r24, Z+2	; 0x02
    3730:	93 81       	ldd	r25, Z+3	; 0x03
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e2       	ldi	r20, 0x20	; 32
    3738:	51 e4       	ldi	r21, 0x41	; 65
    373a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	bc 01       	movw	r22, r24
    3744:	cd 01       	movw	r24, r26
    3746:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	9e af       	std	Y+62, r25	; 0x3e
    3750:	8d af       	std	Y+61, r24	; 0x3d
    3752:	0f c0       	rjmp	.+30     	; 0x3772 <LCD_sendCommand+0x478>
    3754:	80 e9       	ldi	r24, 0x90	; 144
    3756:	91 e0       	ldi	r25, 0x01	; 1
    3758:	9c af       	std	Y+60, r25	; 0x3c
    375a:	8b af       	std	Y+59, r24	; 0x3b
    375c:	8b ad       	ldd	r24, Y+59	; 0x3b
    375e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	f1 f7       	brne	.-4      	; 0x3760 <LCD_sendCommand+0x466>
    3764:	9c af       	std	Y+60, r25	; 0x3c
    3766:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3768:	8d ad       	ldd	r24, Y+61	; 0x3d
    376a:	9e ad       	ldd	r25, Y+62	; 0x3e
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	9e af       	std	Y+62, r25	; 0x3e
    3770:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3772:	8d ad       	ldd	r24, Y+61	; 0x3d
    3774:	9e ad       	ldd	r25, Y+62	; 0x3e
    3776:	00 97       	sbiw	r24, 0x00	; 0
    3778:	69 f7       	brne	.-38     	; 0x3754 <LCD_sendCommand+0x45a>
    377a:	16 c0       	rjmp	.+44     	; 0x37a8 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377c:	fe 01       	movw	r30, r28
    377e:	ff 96       	adiw	r30, 0x3f	; 63
    3780:	60 81       	ld	r22, Z
    3782:	71 81       	ldd	r23, Z+1	; 0x01
    3784:	82 81       	ldd	r24, Z+2	; 0x02
    3786:	93 81       	ldd	r25, Z+3	; 0x03
    3788:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	9e af       	std	Y+62, r25	; 0x3e
    3792:	8d af       	std	Y+61, r24	; 0x3d
    3794:	8d ad       	ldd	r24, Y+61	; 0x3d
    3796:	9e ad       	ldd	r25, Y+62	; 0x3e
    3798:	9a af       	std	Y+58, r25	; 0x3a
    379a:	89 af       	std	Y+57, r24	; 0x39
    379c:	89 ad       	ldd	r24, Y+57	; 0x39
    379e:	9a ad       	ldd	r25, Y+58	; 0x3a
    37a0:	01 97       	sbiw	r24, 0x01	; 1
    37a2:	f1 f7       	brne	.-4      	; 0x37a0 <LCD_sendCommand+0x4a6>
    37a4:	9a af       	std	Y+58, r25	; 0x3a
    37a6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW); /*write 0 in enable pin to make falling edge*/
    37a8:	82 e0       	ldi	r24, 0x02	; 2
    37aa:	63 e0       	ldi	r22, 0x03	; 3
    37ac:	40 e0       	ldi	r20, 0x00	; 0
    37ae:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	a0 e8       	ldi	r26, 0x80	; 128
    37b8:	bf e3       	ldi	r27, 0x3F	; 63
    37ba:	8d ab       	std	Y+53, r24	; 0x35
    37bc:	9e ab       	std	Y+54, r25	; 0x36
    37be:	af ab       	std	Y+55, r26	; 0x37
    37c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c2:	6d a9       	ldd	r22, Y+53	; 0x35
    37c4:	7e a9       	ldd	r23, Y+54	; 0x36
    37c6:	8f a9       	ldd	r24, Y+55	; 0x37
    37c8:	98 ad       	ldd	r25, Y+56	; 0x38
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	4a e7       	ldi	r20, 0x7A	; 122
    37d0:	55 e4       	ldi	r21, 0x45	; 69
    37d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	89 ab       	std	Y+49, r24	; 0x31
    37dc:	9a ab       	std	Y+50, r25	; 0x32
    37de:	ab ab       	std	Y+51, r26	; 0x33
    37e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37e2:	69 a9       	ldd	r22, Y+49	; 0x31
    37e4:	7a a9       	ldd	r23, Y+50	; 0x32
    37e6:	8b a9       	ldd	r24, Y+51	; 0x33
    37e8:	9c a9       	ldd	r25, Y+52	; 0x34
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 e8       	ldi	r20, 0x80	; 128
    37f0:	5f e3       	ldi	r21, 0x3F	; 63
    37f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    37f6:	88 23       	and	r24, r24
    37f8:	2c f4       	brge	.+10     	; 0x3804 <LCD_sendCommand+0x50a>
		__ticks = 1;
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	98 ab       	std	Y+48, r25	; 0x30
    3800:	8f a7       	std	Y+47, r24	; 0x2f
    3802:	3f c0       	rjmp	.+126    	; 0x3882 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    3804:	69 a9       	ldd	r22, Y+49	; 0x31
    3806:	7a a9       	ldd	r23, Y+50	; 0x32
    3808:	8b a9       	ldd	r24, Y+51	; 0x33
    380a:	9c a9       	ldd	r25, Y+52	; 0x34
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	3f ef       	ldi	r19, 0xFF	; 255
    3810:	4f e7       	ldi	r20, 0x7F	; 127
    3812:	57 e4       	ldi	r21, 0x47	; 71
    3814:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3818:	18 16       	cp	r1, r24
    381a:	4c f5       	brge	.+82     	; 0x386e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    381c:	6d a9       	ldd	r22, Y+53	; 0x35
    381e:	7e a9       	ldd	r23, Y+54	; 0x36
    3820:	8f a9       	ldd	r24, Y+55	; 0x37
    3822:	98 ad       	ldd	r25, Y+56	; 0x38
    3824:	20 e0       	ldi	r18, 0x00	; 0
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	40 e2       	ldi	r20, 0x20	; 32
    382a:	51 e4       	ldi	r21, 0x41	; 65
    382c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	bc 01       	movw	r22, r24
    3836:	cd 01       	movw	r24, r26
    3838:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	98 ab       	std	Y+48, r25	; 0x30
    3842:	8f a7       	std	Y+47, r24	; 0x2f
    3844:	0f c0       	rjmp	.+30     	; 0x3864 <LCD_sendCommand+0x56a>
    3846:	80 e9       	ldi	r24, 0x90	; 144
    3848:	91 e0       	ldi	r25, 0x01	; 1
    384a:	9e a7       	std	Y+46, r25	; 0x2e
    384c:	8d a7       	std	Y+45, r24	; 0x2d
    384e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3850:	9e a5       	ldd	r25, Y+46	; 0x2e
    3852:	01 97       	sbiw	r24, 0x01	; 1
    3854:	f1 f7       	brne	.-4      	; 0x3852 <LCD_sendCommand+0x558>
    3856:	9e a7       	std	Y+46, r25	; 0x2e
    3858:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    385a:	8f a5       	ldd	r24, Y+47	; 0x2f
    385c:	98 a9       	ldd	r25, Y+48	; 0x30
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	98 ab       	std	Y+48, r25	; 0x30
    3862:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3864:	8f a5       	ldd	r24, Y+47	; 0x2f
    3866:	98 a9       	ldd	r25, Y+48	; 0x30
    3868:	00 97       	sbiw	r24, 0x00	; 0
    386a:	69 f7       	brne	.-38     	; 0x3846 <LCD_sendCommand+0x54c>
    386c:	14 c0       	rjmp	.+40     	; 0x3896 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386e:	69 a9       	ldd	r22, Y+49	; 0x31
    3870:	7a a9       	ldd	r23, Y+50	; 0x32
    3872:	8b a9       	ldd	r24, Y+51	; 0x33
    3874:	9c a9       	ldd	r25, Y+52	; 0x34
    3876:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	98 ab       	std	Y+48, r25	; 0x30
    3880:	8f a7       	std	Y+47, r24	; 0x2f
    3882:	8f a5       	ldd	r24, Y+47	; 0x2f
    3884:	98 a9       	ldd	r25, Y+48	; 0x30
    3886:	9c a7       	std	Y+44, r25	; 0x2c
    3888:	8b a7       	std	Y+43, r24	; 0x2b
    388a:	8b a5       	ldd	r24, Y+43	; 0x2b
    388c:	9c a5       	ldd	r25, Y+44	; 0x2c
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	f1 f7       	brne	.-4      	; 0x388e <LCD_sendCommand+0x594>
    3892:	9c a7       	std	Y+44, r25	; 0x2c
    3894:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH); /*write 1 in enable pin */
    3896:	82 e0       	ldi	r24, 0x02	; 2
    3898:	63 e0       	ldi	r22, 0x03	; 3
    389a:	41 e0       	ldi	r20, 0x01	; 1
    389c:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	a0 e8       	ldi	r26, 0x80	; 128
    38a6:	bf e3       	ldi	r27, 0x3F	; 63
    38a8:	8f a3       	std	Y+39, r24	; 0x27
    38aa:	98 a7       	std	Y+40, r25	; 0x28
    38ac:	a9 a7       	std	Y+41, r26	; 0x29
    38ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b0:	6f a1       	ldd	r22, Y+39	; 0x27
    38b2:	78 a5       	ldd	r23, Y+40	; 0x28
    38b4:	89 a5       	ldd	r24, Y+41	; 0x29
    38b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    38b8:	20 e0       	ldi	r18, 0x00	; 0
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	4a e7       	ldi	r20, 0x7A	; 122
    38be:	55 e4       	ldi	r21, 0x45	; 69
    38c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	8b a3       	std	Y+35, r24	; 0x23
    38ca:	9c a3       	std	Y+36, r25	; 0x24
    38cc:	ad a3       	std	Y+37, r26	; 0x25
    38ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38d0:	6b a1       	ldd	r22, Y+35	; 0x23
    38d2:	7c a1       	ldd	r23, Y+36	; 0x24
    38d4:	8d a1       	ldd	r24, Y+37	; 0x25
    38d6:	9e a1       	ldd	r25, Y+38	; 0x26
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	40 e8       	ldi	r20, 0x80	; 128
    38de:	5f e3       	ldi	r21, 0x3F	; 63
    38e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    38e4:	88 23       	and	r24, r24
    38e6:	2c f4       	brge	.+10     	; 0x38f2 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	9a a3       	std	Y+34, r25	; 0x22
    38ee:	89 a3       	std	Y+33, r24	; 0x21
    38f0:	3f c0       	rjmp	.+126    	; 0x3970 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    38f2:	6b a1       	ldd	r22, Y+35	; 0x23
    38f4:	7c a1       	ldd	r23, Y+36	; 0x24
    38f6:	8d a1       	ldd	r24, Y+37	; 0x25
    38f8:	9e a1       	ldd	r25, Y+38	; 0x26
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	3f ef       	ldi	r19, 0xFF	; 255
    38fe:	4f e7       	ldi	r20, 0x7F	; 127
    3900:	57 e4       	ldi	r21, 0x47	; 71
    3902:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3906:	18 16       	cp	r1, r24
    3908:	4c f5       	brge	.+82     	; 0x395c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    390a:	6f a1       	ldd	r22, Y+39	; 0x27
    390c:	78 a5       	ldd	r23, Y+40	; 0x28
    390e:	89 a5       	ldd	r24, Y+41	; 0x29
    3910:	9a a5       	ldd	r25, Y+42	; 0x2a
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	40 e2       	ldi	r20, 0x20	; 32
    3918:	51 e4       	ldi	r21, 0x41	; 65
    391a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	bc 01       	movw	r22, r24
    3924:	cd 01       	movw	r24, r26
    3926:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	9a a3       	std	Y+34, r25	; 0x22
    3930:	89 a3       	std	Y+33, r24	; 0x21
    3932:	0f c0       	rjmp	.+30     	; 0x3952 <LCD_sendCommand+0x658>
    3934:	80 e9       	ldi	r24, 0x90	; 144
    3936:	91 e0       	ldi	r25, 0x01	; 1
    3938:	98 a3       	std	Y+32, r25	; 0x20
    393a:	8f 8f       	std	Y+31, r24	; 0x1f
    393c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    393e:	98 a1       	ldd	r25, Y+32	; 0x20
    3940:	01 97       	sbiw	r24, 0x01	; 1
    3942:	f1 f7       	brne	.-4      	; 0x3940 <LCD_sendCommand+0x646>
    3944:	98 a3       	std	Y+32, r25	; 0x20
    3946:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3948:	89 a1       	ldd	r24, Y+33	; 0x21
    394a:	9a a1       	ldd	r25, Y+34	; 0x22
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	9a a3       	std	Y+34, r25	; 0x22
    3950:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3952:	89 a1       	ldd	r24, Y+33	; 0x21
    3954:	9a a1       	ldd	r25, Y+34	; 0x22
    3956:	00 97       	sbiw	r24, 0x00	; 0
    3958:	69 f7       	brne	.-38     	; 0x3934 <LCD_sendCommand+0x63a>
    395a:	14 c0       	rjmp	.+40     	; 0x3984 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    395c:	6b a1       	ldd	r22, Y+35	; 0x23
    395e:	7c a1       	ldd	r23, Y+36	; 0x24
    3960:	8d a1       	ldd	r24, Y+37	; 0x25
    3962:	9e a1       	ldd	r25, Y+38	; 0x26
    3964:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	9a a3       	std	Y+34, r25	; 0x22
    396e:	89 a3       	std	Y+33, r24	; 0x21
    3970:	89 a1       	ldd	r24, Y+33	; 0x21
    3972:	9a a1       	ldd	r25, Y+34	; 0x22
    3974:	9e 8f       	std	Y+30, r25	; 0x1e
    3976:	8d 8f       	std	Y+29, r24	; 0x1d
    3978:	8d 8d       	ldd	r24, Y+29	; 0x1d
    397a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    397c:	01 97       	sbiw	r24, 0x01	; 1
    397e:	f1 f7       	brne	.-4      	; 0x397c <LCD_sendCommand+0x682>
    3980:	9e 8f       	std	Y+30, r25	; 0x1e
    3982:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(command,0) );
    3984:	fe 01       	movw	r30, r28
    3986:	ed 59       	subi	r30, 0x9D	; 157
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	80 81       	ld	r24, Z
    398c:	98 2f       	mov	r25, r24
    398e:	91 70       	andi	r25, 0x01	; 1
    3990:	82 e0       	ldi	r24, 0x02	; 2
    3992:	64 e0       	ldi	r22, 0x04	; 4
    3994:	49 2f       	mov	r20, r25
    3996:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(command,1) );
    399a:	fe 01       	movw	r30, r28
    399c:	ed 59       	subi	r30, 0x9D	; 157
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	80 81       	ld	r24, Z
    39a2:	88 2f       	mov	r24, r24
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	82 70       	andi	r24, 0x02	; 2
    39a8:	90 70       	andi	r25, 0x00	; 0
    39aa:	95 95       	asr	r25
    39ac:	87 95       	ror	r24
    39ae:	98 2f       	mov	r25, r24
    39b0:	82 e0       	ldi	r24, 0x02	; 2
    39b2:	65 e0       	ldi	r22, 0x05	; 5
    39b4:	49 2f       	mov	r20, r25
    39b6:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(command,2) );
    39ba:	fe 01       	movw	r30, r28
    39bc:	ed 59       	subi	r30, 0x9D	; 157
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	80 81       	ld	r24, Z
    39c2:	88 2f       	mov	r24, r24
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	84 70       	andi	r24, 0x04	; 4
    39c8:	90 70       	andi	r25, 0x00	; 0
    39ca:	95 95       	asr	r25
    39cc:	87 95       	ror	r24
    39ce:	95 95       	asr	r25
    39d0:	87 95       	ror	r24
    39d2:	98 2f       	mov	r25, r24
    39d4:	82 e0       	ldi	r24, 0x02	; 2
    39d6:	66 e0       	ldi	r22, 0x06	; 6
    39d8:	49 2f       	mov	r20, r25
    39da:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(command,3) );
    39de:	fe 01       	movw	r30, r28
    39e0:	ed 59       	subi	r30, 0x9D	; 157
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	80 81       	ld	r24, Z
    39e6:	88 2f       	mov	r24, r24
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	88 70       	andi	r24, 0x08	; 8
    39ec:	90 70       	andi	r25, 0x00	; 0
    39ee:	95 95       	asr	r25
    39f0:	87 95       	ror	r24
    39f2:	95 95       	asr	r25
    39f4:	87 95       	ror	r24
    39f6:	95 95       	asr	r25
    39f8:	87 95       	ror	r24
    39fa:	98 2f       	mov	r25, r24
    39fc:	82 e0       	ldi	r24, 0x02	; 2
    39fe:	67 e0       	ldi	r22, 0x07	; 7
    3a00:	49 2f       	mov	r20, r25
    3a02:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	a0 e8       	ldi	r26, 0x80	; 128
    3a0c:	bf e3       	ldi	r27, 0x3F	; 63
    3a0e:	89 8f       	std	Y+25, r24	; 0x19
    3a10:	9a 8f       	std	Y+26, r25	; 0x1a
    3a12:	ab 8f       	std	Y+27, r26	; 0x1b
    3a14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a16:	69 8d       	ldd	r22, Y+25	; 0x19
    3a18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	4a e7       	ldi	r20, 0x7A	; 122
    3a24:	55 e4       	ldi	r21, 0x45	; 69
    3a26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	8d 8b       	std	Y+21, r24	; 0x15
    3a30:	9e 8b       	std	Y+22, r25	; 0x16
    3a32:	af 8b       	std	Y+23, r26	; 0x17
    3a34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a36:	6d 89       	ldd	r22, Y+21	; 0x15
    3a38:	7e 89       	ldd	r23, Y+22	; 0x16
    3a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	40 e8       	ldi	r20, 0x80	; 128
    3a44:	5f e3       	ldi	r21, 0x3F	; 63
    3a46:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3a4a:	88 23       	and	r24, r24
    3a4c:	2c f4       	brge	.+10     	; 0x3a58 <LCD_sendCommand+0x75e>
		__ticks = 1;
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	9c 8b       	std	Y+20, r25	; 0x14
    3a54:	8b 8b       	std	Y+19, r24	; 0x13
    3a56:	3f c0       	rjmp	.+126    	; 0x3ad6 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    3a58:	6d 89       	ldd	r22, Y+21	; 0x15
    3a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	3f ef       	ldi	r19, 0xFF	; 255
    3a64:	4f e7       	ldi	r20, 0x7F	; 127
    3a66:	57 e4       	ldi	r21, 0x47	; 71
    3a68:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3a6c:	18 16       	cp	r1, r24
    3a6e:	4c f5       	brge	.+82     	; 0x3ac2 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a70:	69 8d       	ldd	r22, Y+25	; 0x19
    3a72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e2       	ldi	r20, 0x20	; 32
    3a7e:	51 e4       	ldi	r21, 0x41	; 65
    3a80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	bc 01       	movw	r22, r24
    3a8a:	cd 01       	movw	r24, r26
    3a8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	9c 8b       	std	Y+20, r25	; 0x14
    3a96:	8b 8b       	std	Y+19, r24	; 0x13
    3a98:	0f c0       	rjmp	.+30     	; 0x3ab8 <LCD_sendCommand+0x7be>
    3a9a:	80 e9       	ldi	r24, 0x90	; 144
    3a9c:	91 e0       	ldi	r25, 0x01	; 1
    3a9e:	9a 8b       	std	Y+18, r25	; 0x12
    3aa0:	89 8b       	std	Y+17, r24	; 0x11
    3aa2:	89 89       	ldd	r24, Y+17	; 0x11
    3aa4:	9a 89       	ldd	r25, Y+18	; 0x12
    3aa6:	01 97       	sbiw	r24, 0x01	; 1
    3aa8:	f1 f7       	brne	.-4      	; 0x3aa6 <LCD_sendCommand+0x7ac>
    3aaa:	9a 8b       	std	Y+18, r25	; 0x12
    3aac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aae:	8b 89       	ldd	r24, Y+19	; 0x13
    3ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ab2:	01 97       	sbiw	r24, 0x01	; 1
    3ab4:	9c 8b       	std	Y+20, r25	; 0x14
    3ab6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aba:	9c 89       	ldd	r25, Y+20	; 0x14
    3abc:	00 97       	sbiw	r24, 0x00	; 0
    3abe:	69 f7       	brne	.-38     	; 0x3a9a <LCD_sendCommand+0x7a0>
    3ac0:	14 c0       	rjmp	.+40     	; 0x3aea <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    3aca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	9c 8b       	std	Y+20, r25	; 0x14
    3ad4:	8b 8b       	std	Y+19, r24	; 0x13
    3ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    3ada:	98 8b       	std	Y+16, r25	; 0x10
    3adc:	8f 87       	std	Y+15, r24	; 0x0f
    3ade:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ae0:	98 89       	ldd	r25, Y+16	; 0x10
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	f1 f7       	brne	.-4      	; 0x3ae2 <LCD_sendCommand+0x7e8>
    3ae6:	98 8b       	std	Y+16, r25	; 0x10
    3ae8:	8f 87       	std	Y+15, r24	; 0x0f



#endif

	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    3aea:	82 e0       	ldi	r24, 0x02	; 2
    3aec:	63 e0       	ldi	r22, 0x03	; 3
    3aee:	40 e0       	ldi	r20, 0x00	; 0
    3af0:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    3af4:	80 e0       	ldi	r24, 0x00	; 0
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	a0 e8       	ldi	r26, 0x80	; 128
    3afa:	bf e3       	ldi	r27, 0x3F	; 63
    3afc:	8b 87       	std	Y+11, r24	; 0x0b
    3afe:	9c 87       	std	Y+12, r25	; 0x0c
    3b00:	ad 87       	std	Y+13, r26	; 0x0d
    3b02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	4a e7       	ldi	r20, 0x7A	; 122
    3b12:	55 e4       	ldi	r21, 0x45	; 69
    3b14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	8f 83       	std	Y+7, r24	; 0x07
    3b1e:	98 87       	std	Y+8, r25	; 0x08
    3b20:	a9 87       	std	Y+9, r26	; 0x09
    3b22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b24:	6f 81       	ldd	r22, Y+7	; 0x07
    3b26:	78 85       	ldd	r23, Y+8	; 0x08
    3b28:	89 85       	ldd	r24, Y+9	; 0x09
    3b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	40 e8       	ldi	r20, 0x80	; 128
    3b32:	5f e3       	ldi	r21, 0x3F	; 63
    3b34:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3b38:	88 23       	and	r24, r24
    3b3a:	2c f4       	brge	.+10     	; 0x3b46 <LCD_sendCommand+0x84c>
		__ticks = 1;
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	9e 83       	std	Y+6, r25	; 0x06
    3b42:	8d 83       	std	Y+5, r24	; 0x05
    3b44:	3f c0       	rjmp	.+126    	; 0x3bc4 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    3b46:	6f 81       	ldd	r22, Y+7	; 0x07
    3b48:	78 85       	ldd	r23, Y+8	; 0x08
    3b4a:	89 85       	ldd	r24, Y+9	; 0x09
    3b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	3f ef       	ldi	r19, 0xFF	; 255
    3b52:	4f e7       	ldi	r20, 0x7F	; 127
    3b54:	57 e4       	ldi	r21, 0x47	; 71
    3b56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3b5a:	18 16       	cp	r1, r24
    3b5c:	4c f5       	brge	.+82     	; 0x3bb0 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	40 e2       	ldi	r20, 0x20	; 32
    3b6c:	51 e4       	ldi	r21, 0x41	; 65
    3b6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	bc 01       	movw	r22, r24
    3b78:	cd 01       	movw	r24, r26
    3b7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b7e:	dc 01       	movw	r26, r24
    3b80:	cb 01       	movw	r24, r22
    3b82:	9e 83       	std	Y+6, r25	; 0x06
    3b84:	8d 83       	std	Y+5, r24	; 0x05
    3b86:	0f c0       	rjmp	.+30     	; 0x3ba6 <LCD_sendCommand+0x8ac>
    3b88:	80 e9       	ldi	r24, 0x90	; 144
    3b8a:	91 e0       	ldi	r25, 0x01	; 1
    3b8c:	9c 83       	std	Y+4, r25	; 0x04
    3b8e:	8b 83       	std	Y+3, r24	; 0x03
    3b90:	8b 81       	ldd	r24, Y+3	; 0x03
    3b92:	9c 81       	ldd	r25, Y+4	; 0x04
    3b94:	01 97       	sbiw	r24, 0x01	; 1
    3b96:	f1 f7       	brne	.-4      	; 0x3b94 <LCD_sendCommand+0x89a>
    3b98:	9c 83       	std	Y+4, r25	; 0x04
    3b9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba0:	01 97       	sbiw	r24, 0x01	; 1
    3ba2:	9e 83       	std	Y+6, r25	; 0x06
    3ba4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    3baa:	00 97       	sbiw	r24, 0x00	; 0
    3bac:	69 f7       	brne	.-38     	; 0x3b88 <LCD_sendCommand+0x88e>
    3bae:	14 c0       	rjmp	.+40     	; 0x3bd8 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb2:	78 85       	ldd	r23, Y+8	; 0x08
    3bb4:	89 85       	ldd	r24, Y+9	; 0x09
    3bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	9e 83       	std	Y+6, r25	; 0x06
    3bc2:	8d 83       	std	Y+5, r24	; 0x05
    3bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc8:	9a 83       	std	Y+2, r25	; 0x02
    3bca:	89 83       	std	Y+1, r24	; 0x01
    3bcc:	89 81       	ldd	r24, Y+1	; 0x01
    3bce:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd0:	01 97       	sbiw	r24, 0x01	; 1
    3bd2:	f1 f7       	brne	.-4      	; 0x3bd0 <LCD_sendCommand+0x8d6>
    3bd4:	9a 83       	std	Y+2, r25	; 0x02
    3bd6:	89 83       	std	Y+1, r24	; 0x01
	/*write  0 in enable pin beacase LCD read the at falling edge of enable, so we make it 1 then 0*/

	_delay_ms(1);
}
    3bd8:	cd 59       	subi	r28, 0x9D	; 157
    3bda:	df 4f       	sbci	r29, 0xFF	; 255
    3bdc:	0f b6       	in	r0, 0x3f	; 63
    3bde:	f8 94       	cli
    3be0:	de bf       	out	0x3e, r29	; 62
    3be2:	0f be       	out	0x3f, r0	; 63
    3be4:	cd bf       	out	0x3d, r28	; 61
    3be6:	cf 91       	pop	r28
    3be8:	df 91       	pop	r29
    3bea:	1f 91       	pop	r17
    3bec:	0f 91       	pop	r16
    3bee:	08 95       	ret

00003bf0 <LCD_init>:


void LCD_init(void)
{
    3bf0:	df 93       	push	r29
    3bf2:	cf 93       	push	r28
    3bf4:	cd b7       	in	r28, 0x3d	; 61
    3bf6:	de b7       	in	r29, 0x3e	; 62
    3bf8:	6c 97       	sbiw	r28, 0x1c	; 28
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	f8 94       	cli
    3bfe:	de bf       	out	0x3e, r29	; 62
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID,OUTPUT);/*make enable output*/
    3c04:	82 e0       	ldi	r24, 0x02	; 2
    3c06:	63 e0       	ldi	r22, 0x03	; 3
    3c08:	41 e0       	ldi	r20, 0x01	; 1
    3c0a:	0e 94 b7 14 	call	0x296e	; 0x296e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID,OUTPUT);/*make RS  output*/
    3c0e:	82 e0       	ldi	r24, 0x02	; 2
    3c10:	62 e0       	ldi	r22, 0x02	; 2
    3c12:	41 e0       	ldi	r20, 0x01	; 1
    3c14:	0e 94 b7 14 	call	0x296e	; 0x296e <GPIO_setupPinDirection>
    3c18:	80 e0       	ldi	r24, 0x00	; 0
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	a0 ea       	ldi	r26, 0xA0	; 160
    3c1e:	b1 e4       	ldi	r27, 0x41	; 65
    3c20:	89 8f       	std	Y+25, r24	; 0x19
    3c22:	9a 8f       	std	Y+26, r25	; 0x1a
    3c24:	ab 8f       	std	Y+27, r26	; 0x1b
    3c26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c28:	69 8d       	ldd	r22, Y+25	; 0x19
    3c2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	4a e7       	ldi	r20, 0x7A	; 122
    3c36:	55 e4       	ldi	r21, 0x45	; 69
    3c38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c3c:	dc 01       	movw	r26, r24
    3c3e:	cb 01       	movw	r24, r22
    3c40:	8d 8b       	std	Y+21, r24	; 0x15
    3c42:	9e 8b       	std	Y+22, r25	; 0x16
    3c44:	af 8b       	std	Y+23, r26	; 0x17
    3c46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c48:	6d 89       	ldd	r22, Y+21	; 0x15
    3c4a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c4e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e8       	ldi	r20, 0x80	; 128
    3c56:	5f e3       	ldi	r21, 0x3F	; 63
    3c58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3c5c:	88 23       	and	r24, r24
    3c5e:	2c f4       	brge	.+10     	; 0x3c6a <LCD_init+0x7a>
		__ticks = 1;
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	9c 8b       	std	Y+20, r25	; 0x14
    3c66:	8b 8b       	std	Y+19, r24	; 0x13
    3c68:	3f c0       	rjmp	.+126    	; 0x3ce8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    3c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c70:	98 8d       	ldd	r25, Y+24	; 0x18
    3c72:	20 e0       	ldi	r18, 0x00	; 0
    3c74:	3f ef       	ldi	r19, 0xFF	; 255
    3c76:	4f e7       	ldi	r20, 0x7F	; 127
    3c78:	57 e4       	ldi	r21, 0x47	; 71
    3c7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3c7e:	18 16       	cp	r1, r24
    3c80:	4c f5       	brge	.+82     	; 0x3cd4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c82:	69 8d       	ldd	r22, Y+25	; 0x19
    3c84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	40 e2       	ldi	r20, 0x20	; 32
    3c90:	51 e4       	ldi	r21, 0x41	; 65
    3c92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
    3c9a:	bc 01       	movw	r22, r24
    3c9c:	cd 01       	movw	r24, r26
    3c9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	9c 8b       	std	Y+20, r25	; 0x14
    3ca8:	8b 8b       	std	Y+19, r24	; 0x13
    3caa:	0f c0       	rjmp	.+30     	; 0x3cca <LCD_init+0xda>
    3cac:	80 e9       	ldi	r24, 0x90	; 144
    3cae:	91 e0       	ldi	r25, 0x01	; 1
    3cb0:	9a 8b       	std	Y+18, r25	; 0x12
    3cb2:	89 8b       	std	Y+17, r24	; 0x11
    3cb4:	89 89       	ldd	r24, Y+17	; 0x11
    3cb6:	9a 89       	ldd	r25, Y+18	; 0x12
    3cb8:	01 97       	sbiw	r24, 0x01	; 1
    3cba:	f1 f7       	brne	.-4      	; 0x3cb8 <LCD_init+0xc8>
    3cbc:	9a 8b       	std	Y+18, r25	; 0x12
    3cbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	9c 8b       	std	Y+20, r25	; 0x14
    3cc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cca:	8b 89       	ldd	r24, Y+19	; 0x13
    3ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    3cce:	00 97       	sbiw	r24, 0x00	; 0
    3cd0:	69 f7       	brne	.-38     	; 0x3cac <LCD_init+0xbc>
    3cd2:	14 c0       	rjmp	.+40     	; 0x3cfc <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cd4:	6d 89       	ldd	r22, Y+21	; 0x15
    3cd6:	7e 89       	ldd	r23, Y+22	; 0x16
    3cd8:	8f 89       	ldd	r24, Y+23	; 0x17
    3cda:	98 8d       	ldd	r25, Y+24	; 0x18
    3cdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	9c 8b       	std	Y+20, r25	; 0x14
    3ce6:	8b 8b       	std	Y+19, r24	; 0x13
    3ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    3cea:	9c 89       	ldd	r25, Y+20	; 0x14
    3cec:	98 8b       	std	Y+16, r25	; 0x10
    3cee:	8f 87       	std	Y+15, r24	; 0x0f
    3cf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cf2:	98 89       	ldd	r25, Y+16	; 0x10
    3cf4:	01 97       	sbiw	r24, 0x01	; 1
    3cf6:	f1 f7       	brne	.-4      	; 0x3cf4 <LCD_init+0x104>
    3cf8:	98 8b       	std	Y+16, r25	; 0x10
    3cfa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);  /*make LCD 8 bit mode and 2 line*/


#else
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN4 , OUTPUT);
    3cfc:	82 e0       	ldi	r24, 0x02	; 2
    3cfe:	64 e0       	ldi	r22, 0x04	; 4
    3d00:	41 e0       	ldi	r20, 0x01	; 1
    3d02:	0e 94 b7 14 	call	0x296e	; 0x296e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN5 , OUTPUT);
    3d06:	82 e0       	ldi	r24, 0x02	; 2
    3d08:	65 e0       	ldi	r22, 0x05	; 5
    3d0a:	41 e0       	ldi	r20, 0x01	; 1
    3d0c:	0e 94 b7 14 	call	0x296e	; 0x296e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN6 , OUTPUT);
    3d10:	82 e0       	ldi	r24, 0x02	; 2
    3d12:	66 e0       	ldi	r22, 0x06	; 6
    3d14:	41 e0       	ldi	r20, 0x01	; 1
    3d16:	0e 94 b7 14 	call	0x296e	; 0x296e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID , LCD_DATA_PIN7 , OUTPUT);
    3d1a:	82 e0       	ldi	r24, 0x02	; 2
    3d1c:	67 e0       	ldi	r22, 0x07	; 7
    3d1e:	41 e0       	ldi	r20, 0x01	; 1
    3d20:	0e 94 b7 14 	call	0x296e	; 0x296e <GPIO_setupPinDirection>
    3d24:	80 e0       	ldi	r24, 0x00	; 0
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	a0 ea       	ldi	r26, 0xA0	; 160
    3d2a:	b1 e4       	ldi	r27, 0x41	; 65
    3d2c:	8b 87       	std	Y+11, r24	; 0x0b
    3d2e:	9c 87       	std	Y+12, r25	; 0x0c
    3d30:	ad 87       	std	Y+13, r26	; 0x0d
    3d32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	4a e7       	ldi	r20, 0x7A	; 122
    3d42:	55 e4       	ldi	r21, 0x45	; 69
    3d44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	8f 83       	std	Y+7, r24	; 0x07
    3d4e:	98 87       	std	Y+8, r25	; 0x08
    3d50:	a9 87       	std	Y+9, r26	; 0x09
    3d52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d54:	6f 81       	ldd	r22, Y+7	; 0x07
    3d56:	78 85       	ldd	r23, Y+8	; 0x08
    3d58:	89 85       	ldd	r24, Y+9	; 0x09
    3d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d5c:	20 e0       	ldi	r18, 0x00	; 0
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	40 e8       	ldi	r20, 0x80	; 128
    3d62:	5f e3       	ldi	r21, 0x3F	; 63
    3d64:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3d68:	88 23       	and	r24, r24
    3d6a:	2c f4       	brge	.+10     	; 0x3d76 <LCD_init+0x186>
		__ticks = 1;
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	9e 83       	std	Y+6, r25	; 0x06
    3d72:	8d 83       	std	Y+5, r24	; 0x05
    3d74:	3f c0       	rjmp	.+126    	; 0x3df4 <LCD_init+0x204>
	else if (__tmp > 65535)
    3d76:	6f 81       	ldd	r22, Y+7	; 0x07
    3d78:	78 85       	ldd	r23, Y+8	; 0x08
    3d7a:	89 85       	ldd	r24, Y+9	; 0x09
    3d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	3f ef       	ldi	r19, 0xFF	; 255
    3d82:	4f e7       	ldi	r20, 0x7F	; 127
    3d84:	57 e4       	ldi	r21, 0x47	; 71
    3d86:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3d8a:	18 16       	cp	r1, r24
    3d8c:	4c f5       	brge	.+82     	; 0x3de0 <LCD_init+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d90:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	40 e2       	ldi	r20, 0x20	; 32
    3d9c:	51 e4       	ldi	r21, 0x41	; 65
    3d9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	bc 01       	movw	r22, r24
    3da8:	cd 01       	movw	r24, r26
    3daa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	9e 83       	std	Y+6, r25	; 0x06
    3db4:	8d 83       	std	Y+5, r24	; 0x05
    3db6:	0f c0       	rjmp	.+30     	; 0x3dd6 <LCD_init+0x1e6>
    3db8:	80 e9       	ldi	r24, 0x90	; 144
    3dba:	91 e0       	ldi	r25, 0x01	; 1
    3dbc:	9c 83       	std	Y+4, r25	; 0x04
    3dbe:	8b 83       	std	Y+3, r24	; 0x03
    3dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	f1 f7       	brne	.-4      	; 0x3dc4 <LCD_init+0x1d4>
    3dc8:	9c 83       	std	Y+4, r25	; 0x04
    3dca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dce:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd0:	01 97       	sbiw	r24, 0x01	; 1
    3dd2:	9e 83       	std	Y+6, r25	; 0x06
    3dd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dda:	00 97       	sbiw	r24, 0x00	; 0
    3ddc:	69 f7       	brne	.-38     	; 0x3db8 <LCD_init+0x1c8>
    3dde:	14 c0       	rjmp	.+40     	; 0x3e08 <LCD_init+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3de0:	6f 81       	ldd	r22, Y+7	; 0x07
    3de2:	78 85       	ldd	r23, Y+8	; 0x08
    3de4:	89 85       	ldd	r24, Y+9	; 0x09
    3de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	9e 83       	std	Y+6, r25	; 0x06
    3df2:	8d 83       	std	Y+5, r24	; 0x05
    3df4:	8d 81       	ldd	r24, Y+5	; 0x05
    3df6:	9e 81       	ldd	r25, Y+6	; 0x06
    3df8:	9a 83       	std	Y+2, r25	; 0x02
    3dfa:	89 83       	std	Y+1, r24	; 0x01
    3dfc:	89 81       	ldd	r24, Y+1	; 0x01
    3dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    3e00:	01 97       	sbiw	r24, 0x01	; 1
    3e02:	f1 f7       	brne	.-4      	; 0x3e00 <LCD_init+0x210>
    3e04:	9a 83       	std	Y+2, r25	; 0x02
    3e06:	89 83       	std	Y+1, r24	; 0x01
	/*make last 4 pins in portc output*/
	_delay_ms(20);
	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    3e08:	83 e3       	ldi	r24, 0x33	; 51
    3e0a:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    3e0e:	82 e3       	ldi	r24, 0x32	; 50
    3e10:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    3e14:	88 e2       	ldi	r24, 0x28	; 40
    3e16:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_sendCommand>

#endif


	LCD_sendCommand(LCD_CURSOR_OFF);
    3e1a:	8c e0       	ldi	r24, 0x0C	; 12
    3e1c:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_sendCommand>

}
    3e26:	6c 96       	adiw	r28, 0x1c	; 28
    3e28:	0f b6       	in	r0, 0x3f	; 63
    3e2a:	f8 94       	cli
    3e2c:	de bf       	out	0x3e, r29	; 62
    3e2e:	0f be       	out	0x3f, r0	; 63
    3e30:	cd bf       	out	0x3d, r28	; 61
    3e32:	cf 91       	pop	r28
    3e34:	df 91       	pop	r29
    3e36:	08 95       	ret

00003e38 <LCD_writeChar>:

void LCD_writeChar(uint8 ch)
{
    3e38:	0f 93       	push	r16
    3e3a:	1f 93       	push	r17
    3e3c:	df 93       	push	r29
    3e3e:	cf 93       	push	r28
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
    3e44:	c3 56       	subi	r28, 0x63	; 99
    3e46:	d0 40       	sbci	r29, 0x00	; 0
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	f8 94       	cli
    3e4c:	de bf       	out	0x3e, r29	; 62
    3e4e:	0f be       	out	0x3f, r0	; 63
    3e50:	cd bf       	out	0x3d, r28	; 61
    3e52:	fe 01       	movw	r30, r28
    3e54:	ed 59       	subi	r30, 0x9D	; 157
    3e56:	ff 4f       	sbci	r31, 0xFF	; 255
    3e58:	80 83       	st	Z, r24
	  GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);     /*write 1 in RS pin */
    3e5a:	82 e0       	ldi	r24, 0x02	; 2
    3e5c:	62 e0       	ldi	r22, 0x02	; 2
    3e5e:	41 e0       	ldi	r20, 0x01	; 1
    3e60:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    3e64:	fe 01       	movw	r30, r28
    3e66:	e1 5a       	subi	r30, 0xA1	; 161
    3e68:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6a:	80 e0       	ldi	r24, 0x00	; 0
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	a0 e8       	ldi	r26, 0x80	; 128
    3e70:	bf e3       	ldi	r27, 0x3F	; 63
    3e72:	80 83       	st	Z, r24
    3e74:	91 83       	std	Z+1, r25	; 0x01
    3e76:	a2 83       	std	Z+2, r26	; 0x02
    3e78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e7a:	8e 01       	movw	r16, r28
    3e7c:	05 5a       	subi	r16, 0xA5	; 165
    3e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e80:	fe 01       	movw	r30, r28
    3e82:	e1 5a       	subi	r30, 0xA1	; 161
    3e84:	ff 4f       	sbci	r31, 0xFF	; 255
    3e86:	60 81       	ld	r22, Z
    3e88:	71 81       	ldd	r23, Z+1	; 0x01
    3e8a:	82 81       	ldd	r24, Z+2	; 0x02
    3e8c:	93 81       	ldd	r25, Z+3	; 0x03
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	4a e7       	ldi	r20, 0x7A	; 122
    3e94:	55 e4       	ldi	r21, 0x45	; 69
    3e96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	f8 01       	movw	r30, r16
    3ea0:	80 83       	st	Z, r24
    3ea2:	91 83       	std	Z+1, r25	; 0x01
    3ea4:	a2 83       	std	Z+2, r26	; 0x02
    3ea6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	e5 5a       	subi	r30, 0xA5	; 165
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	60 81       	ld	r22, Z
    3eb0:	71 81       	ldd	r23, Z+1	; 0x01
    3eb2:	82 81       	ldd	r24, Z+2	; 0x02
    3eb4:	93 81       	ldd	r25, Z+3	; 0x03
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	40 e8       	ldi	r20, 0x80	; 128
    3ebc:	5f e3       	ldi	r21, 0x3F	; 63
    3ebe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3ec2:	88 23       	and	r24, r24
    3ec4:	44 f4       	brge	.+16     	; 0x3ed6 <LCD_writeChar+0x9e>
		__ticks = 1;
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	e7 5a       	subi	r30, 0xA7	; 167
    3eca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	91 83       	std	Z+1, r25	; 0x01
    3ed2:	80 83       	st	Z, r24
    3ed4:	64 c0       	rjmp	.+200    	; 0x3f9e <LCD_writeChar+0x166>
	else if (__tmp > 65535)
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	e5 5a       	subi	r30, 0xA5	; 165
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	60 81       	ld	r22, Z
    3ede:	71 81       	ldd	r23, Z+1	; 0x01
    3ee0:	82 81       	ldd	r24, Z+2	; 0x02
    3ee2:	93 81       	ldd	r25, Z+3	; 0x03
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	3f ef       	ldi	r19, 0xFF	; 255
    3ee8:	4f e7       	ldi	r20, 0x7F	; 127
    3eea:	57 e4       	ldi	r21, 0x47	; 71
    3eec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3ef0:	18 16       	cp	r1, r24
    3ef2:	0c f0       	brlt	.+2      	; 0x3ef6 <LCD_writeChar+0xbe>
    3ef4:	43 c0       	rjmp	.+134    	; 0x3f7c <LCD_writeChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	e1 5a       	subi	r30, 0xA1	; 161
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	60 81       	ld	r22, Z
    3efe:	71 81       	ldd	r23, Z+1	; 0x01
    3f00:	82 81       	ldd	r24, Z+2	; 0x02
    3f02:	93 81       	ldd	r25, Z+3	; 0x03
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	40 e2       	ldi	r20, 0x20	; 32
    3f0a:	51 e4       	ldi	r21, 0x41	; 65
    3f0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22
    3f14:	8e 01       	movw	r16, r28
    3f16:	07 5a       	subi	r16, 0xA7	; 167
    3f18:	1f 4f       	sbci	r17, 0xFF	; 255
    3f1a:	bc 01       	movw	r22, r24
    3f1c:	cd 01       	movw	r24, r26
    3f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	f8 01       	movw	r30, r16
    3f28:	91 83       	std	Z+1, r25	; 0x01
    3f2a:	80 83       	st	Z, r24
    3f2c:	1f c0       	rjmp	.+62     	; 0x3f6c <LCD_writeChar+0x134>
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e9 5a       	subi	r30, 0xA9	; 169
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	80 e9       	ldi	r24, 0x90	; 144
    3f36:	91 e0       	ldi	r25, 0x01	; 1
    3f38:	91 83       	std	Z+1, r25	; 0x01
    3f3a:	80 83       	st	Z, r24
    3f3c:	fe 01       	movw	r30, r28
    3f3e:	e9 5a       	subi	r30, 0xA9	; 169
    3f40:	ff 4f       	sbci	r31, 0xFF	; 255
    3f42:	80 81       	ld	r24, Z
    3f44:	91 81       	ldd	r25, Z+1	; 0x01
    3f46:	01 97       	sbiw	r24, 0x01	; 1
    3f48:	f1 f7       	brne	.-4      	; 0x3f46 <LCD_writeChar+0x10e>
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	e9 5a       	subi	r30, 0xA9	; 169
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	91 83       	std	Z+1, r25	; 0x01
    3f52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f54:	de 01       	movw	r26, r28
    3f56:	a7 5a       	subi	r26, 0xA7	; 167
    3f58:	bf 4f       	sbci	r27, 0xFF	; 255
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	e7 5a       	subi	r30, 0xA7	; 167
    3f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f60:	80 81       	ld	r24, Z
    3f62:	91 81       	ldd	r25, Z+1	; 0x01
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	11 96       	adiw	r26, 0x01	; 1
    3f68:	9c 93       	st	X, r25
    3f6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	e7 5a       	subi	r30, 0xA7	; 167
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	80 81       	ld	r24, Z
    3f74:	91 81       	ldd	r25, Z+1	; 0x01
    3f76:	00 97       	sbiw	r24, 0x00	; 0
    3f78:	d1 f6       	brne	.-76     	; 0x3f2e <LCD_writeChar+0xf6>
    3f7a:	27 c0       	rjmp	.+78     	; 0x3fca <LCD_writeChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f7c:	8e 01       	movw	r16, r28
    3f7e:	07 5a       	subi	r16, 0xA7	; 167
    3f80:	1f 4f       	sbci	r17, 0xFF	; 255
    3f82:	fe 01       	movw	r30, r28
    3f84:	e5 5a       	subi	r30, 0xA5	; 165
    3f86:	ff 4f       	sbci	r31, 0xFF	; 255
    3f88:	60 81       	ld	r22, Z
    3f8a:	71 81       	ldd	r23, Z+1	; 0x01
    3f8c:	82 81       	ldd	r24, Z+2	; 0x02
    3f8e:	93 81       	ldd	r25, Z+3	; 0x03
    3f90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	f8 01       	movw	r30, r16
    3f9a:	91 83       	std	Z+1, r25	; 0x01
    3f9c:	80 83       	st	Z, r24
    3f9e:	de 01       	movw	r26, r28
    3fa0:	ab 5a       	subi	r26, 0xAB	; 171
    3fa2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	e7 5a       	subi	r30, 0xA7	; 167
    3fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3faa:	80 81       	ld	r24, Z
    3fac:	91 81       	ldd	r25, Z+1	; 0x01
    3fae:	8d 93       	st	X+, r24
    3fb0:	9c 93       	st	X, r25
    3fb2:	fe 01       	movw	r30, r28
    3fb4:	eb 5a       	subi	r30, 0xAB	; 171
    3fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb8:	80 81       	ld	r24, Z
    3fba:	91 81       	ldd	r25, Z+1	; 0x01
    3fbc:	01 97       	sbiw	r24, 0x01	; 1
    3fbe:	f1 f7       	brne	.-4      	; 0x3fbc <LCD_writeChar+0x184>
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	eb 5a       	subi	r30, 0xAB	; 171
    3fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc6:	91 83       	std	Z+1, r25	; 0x01
    3fc8:	80 83       	st	Z, r24
			_delay_ms(1);

			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);   /*write 1 in enable pin */
    3fca:	82 e0       	ldi	r24, 0x02	; 2
    3fcc:	63 e0       	ldi	r22, 0x03	; 3
    3fce:	41 e0       	ldi	r20, 0x01	; 1
    3fd0:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    3fd4:	fe 01       	movw	r30, r28
    3fd6:	ef 5a       	subi	r30, 0xAF	; 175
    3fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	a0 e8       	ldi	r26, 0x80	; 128
    3fe0:	bf e3       	ldi	r27, 0x3F	; 63
    3fe2:	80 83       	st	Z, r24
    3fe4:	91 83       	std	Z+1, r25	; 0x01
    3fe6:	a2 83       	std	Z+2, r26	; 0x02
    3fe8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fea:	8e 01       	movw	r16, r28
    3fec:	03 5b       	subi	r16, 0xB3	; 179
    3fee:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	ef 5a       	subi	r30, 0xAF	; 175
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	60 81       	ld	r22, Z
    3ff8:	71 81       	ldd	r23, Z+1	; 0x01
    3ffa:	82 81       	ldd	r24, Z+2	; 0x02
    3ffc:	93 81       	ldd	r25, Z+3	; 0x03
    3ffe:	20 e0       	ldi	r18, 0x00	; 0
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	4a e7       	ldi	r20, 0x7A	; 122
    4004:	55 e4       	ldi	r21, 0x45	; 69
    4006:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    400a:	dc 01       	movw	r26, r24
    400c:	cb 01       	movw	r24, r22
    400e:	f8 01       	movw	r30, r16
    4010:	80 83       	st	Z, r24
    4012:	91 83       	std	Z+1, r25	; 0x01
    4014:	a2 83       	std	Z+2, r26	; 0x02
    4016:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4018:	fe 01       	movw	r30, r28
    401a:	e3 5b       	subi	r30, 0xB3	; 179
    401c:	ff 4f       	sbci	r31, 0xFF	; 255
    401e:	60 81       	ld	r22, Z
    4020:	71 81       	ldd	r23, Z+1	; 0x01
    4022:	82 81       	ldd	r24, Z+2	; 0x02
    4024:	93 81       	ldd	r25, Z+3	; 0x03
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	40 e8       	ldi	r20, 0x80	; 128
    402c:	5f e3       	ldi	r21, 0x3F	; 63
    402e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4032:	88 23       	and	r24, r24
    4034:	44 f4       	brge	.+16     	; 0x4046 <LCD_writeChar+0x20e>
		__ticks = 1;
    4036:	fe 01       	movw	r30, r28
    4038:	e5 5b       	subi	r30, 0xB5	; 181
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	91 83       	std	Z+1, r25	; 0x01
    4042:	80 83       	st	Z, r24
    4044:	64 c0       	rjmp	.+200    	; 0x410e <LCD_writeChar+0x2d6>
	else if (__tmp > 65535)
    4046:	fe 01       	movw	r30, r28
    4048:	e3 5b       	subi	r30, 0xB3	; 179
    404a:	ff 4f       	sbci	r31, 0xFF	; 255
    404c:	60 81       	ld	r22, Z
    404e:	71 81       	ldd	r23, Z+1	; 0x01
    4050:	82 81       	ldd	r24, Z+2	; 0x02
    4052:	93 81       	ldd	r25, Z+3	; 0x03
    4054:	20 e0       	ldi	r18, 0x00	; 0
    4056:	3f ef       	ldi	r19, 0xFF	; 255
    4058:	4f e7       	ldi	r20, 0x7F	; 127
    405a:	57 e4       	ldi	r21, 0x47	; 71
    405c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4060:	18 16       	cp	r1, r24
    4062:	0c f0       	brlt	.+2      	; 0x4066 <LCD_writeChar+0x22e>
    4064:	43 c0       	rjmp	.+134    	; 0x40ec <LCD_writeChar+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4066:	fe 01       	movw	r30, r28
    4068:	ef 5a       	subi	r30, 0xAF	; 175
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	60 81       	ld	r22, Z
    406e:	71 81       	ldd	r23, Z+1	; 0x01
    4070:	82 81       	ldd	r24, Z+2	; 0x02
    4072:	93 81       	ldd	r25, Z+3	; 0x03
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	40 e2       	ldi	r20, 0x20	; 32
    407a:	51 e4       	ldi	r21, 0x41	; 65
    407c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4080:	dc 01       	movw	r26, r24
    4082:	cb 01       	movw	r24, r22
    4084:	8e 01       	movw	r16, r28
    4086:	05 5b       	subi	r16, 0xB5	; 181
    4088:	1f 4f       	sbci	r17, 0xFF	; 255
    408a:	bc 01       	movw	r22, r24
    408c:	cd 01       	movw	r24, r26
    408e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4092:	dc 01       	movw	r26, r24
    4094:	cb 01       	movw	r24, r22
    4096:	f8 01       	movw	r30, r16
    4098:	91 83       	std	Z+1, r25	; 0x01
    409a:	80 83       	st	Z, r24
    409c:	1f c0       	rjmp	.+62     	; 0x40dc <LCD_writeChar+0x2a4>
    409e:	fe 01       	movw	r30, r28
    40a0:	e7 5b       	subi	r30, 0xB7	; 183
    40a2:	ff 4f       	sbci	r31, 0xFF	; 255
    40a4:	80 e9       	ldi	r24, 0x90	; 144
    40a6:	91 e0       	ldi	r25, 0x01	; 1
    40a8:	91 83       	std	Z+1, r25	; 0x01
    40aa:	80 83       	st	Z, r24
    40ac:	fe 01       	movw	r30, r28
    40ae:	e7 5b       	subi	r30, 0xB7	; 183
    40b0:	ff 4f       	sbci	r31, 0xFF	; 255
    40b2:	80 81       	ld	r24, Z
    40b4:	91 81       	ldd	r25, Z+1	; 0x01
    40b6:	01 97       	sbiw	r24, 0x01	; 1
    40b8:	f1 f7       	brne	.-4      	; 0x40b6 <LCD_writeChar+0x27e>
    40ba:	fe 01       	movw	r30, r28
    40bc:	e7 5b       	subi	r30, 0xB7	; 183
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	91 83       	std	Z+1, r25	; 0x01
    40c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c4:	de 01       	movw	r26, r28
    40c6:	a5 5b       	subi	r26, 0xB5	; 181
    40c8:	bf 4f       	sbci	r27, 0xFF	; 255
    40ca:	fe 01       	movw	r30, r28
    40cc:	e5 5b       	subi	r30, 0xB5	; 181
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	80 81       	ld	r24, Z
    40d2:	91 81       	ldd	r25, Z+1	; 0x01
    40d4:	01 97       	sbiw	r24, 0x01	; 1
    40d6:	11 96       	adiw	r26, 0x01	; 1
    40d8:	9c 93       	st	X, r25
    40da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40dc:	fe 01       	movw	r30, r28
    40de:	e5 5b       	subi	r30, 0xB5	; 181
    40e0:	ff 4f       	sbci	r31, 0xFF	; 255
    40e2:	80 81       	ld	r24, Z
    40e4:	91 81       	ldd	r25, Z+1	; 0x01
    40e6:	00 97       	sbiw	r24, 0x00	; 0
    40e8:	d1 f6       	brne	.-76     	; 0x409e <LCD_writeChar+0x266>
    40ea:	27 c0       	rjmp	.+78     	; 0x413a <LCD_writeChar+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ec:	8e 01       	movw	r16, r28
    40ee:	05 5b       	subi	r16, 0xB5	; 181
    40f0:	1f 4f       	sbci	r17, 0xFF	; 255
    40f2:	fe 01       	movw	r30, r28
    40f4:	e3 5b       	subi	r30, 0xB3	; 179
    40f6:	ff 4f       	sbci	r31, 0xFF	; 255
    40f8:	60 81       	ld	r22, Z
    40fa:	71 81       	ldd	r23, Z+1	; 0x01
    40fc:	82 81       	ldd	r24, Z+2	; 0x02
    40fe:	93 81       	ldd	r25, Z+3	; 0x03
    4100:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4104:	dc 01       	movw	r26, r24
    4106:	cb 01       	movw	r24, r22
    4108:	f8 01       	movw	r30, r16
    410a:	91 83       	std	Z+1, r25	; 0x01
    410c:	80 83       	st	Z, r24
    410e:	de 01       	movw	r26, r28
    4110:	a9 5b       	subi	r26, 0xB9	; 185
    4112:	bf 4f       	sbci	r27, 0xFF	; 255
    4114:	fe 01       	movw	r30, r28
    4116:	e5 5b       	subi	r30, 0xB5	; 181
    4118:	ff 4f       	sbci	r31, 0xFF	; 255
    411a:	80 81       	ld	r24, Z
    411c:	91 81       	ldd	r25, Z+1	; 0x01
    411e:	8d 93       	st	X+, r24
    4120:	9c 93       	st	X, r25
    4122:	fe 01       	movw	r30, r28
    4124:	e9 5b       	subi	r30, 0xB9	; 185
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	80 81       	ld	r24, Z
    412a:	91 81       	ldd	r25, Z+1	; 0x01
    412c:	01 97       	sbiw	r24, 0x01	; 1
    412e:	f1 f7       	brne	.-4      	; 0x412c <LCD_writeChar+0x2f4>
    4130:	fe 01       	movw	r30, r28
    4132:	e9 5b       	subi	r30, 0xB9	; 185
    4134:	ff 4f       	sbci	r31, 0xFF	; 255
    4136:	91 83       	std	Z+1, r25	; 0x01
    4138:	80 83       	st	Z, r24

			_delay_ms(1);

		#else

			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(ch,4) );
    413a:	fe 01       	movw	r30, r28
    413c:	ed 59       	subi	r30, 0x9D	; 157
    413e:	ff 4f       	sbci	r31, 0xFF	; 255
    4140:	80 81       	ld	r24, Z
    4142:	88 2f       	mov	r24, r24
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	80 71       	andi	r24, 0x10	; 16
    4148:	90 70       	andi	r25, 0x00	; 0
    414a:	95 95       	asr	r25
    414c:	87 95       	ror	r24
    414e:	95 95       	asr	r25
    4150:	87 95       	ror	r24
    4152:	95 95       	asr	r25
    4154:	87 95       	ror	r24
    4156:	95 95       	asr	r25
    4158:	87 95       	ror	r24
    415a:	98 2f       	mov	r25, r24
    415c:	82 e0       	ldi	r24, 0x02	; 2
    415e:	64 e0       	ldi	r22, 0x04	; 4
    4160:	49 2f       	mov	r20, r25
    4162:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(ch,5) );
    4166:	fe 01       	movw	r30, r28
    4168:	ed 59       	subi	r30, 0x9D	; 157
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	80 81       	ld	r24, Z
    416e:	88 2f       	mov	r24, r24
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	80 72       	andi	r24, 0x20	; 32
    4174:	90 70       	andi	r25, 0x00	; 0
    4176:	95 95       	asr	r25
    4178:	87 95       	ror	r24
    417a:	95 95       	asr	r25
    417c:	87 95       	ror	r24
    417e:	95 95       	asr	r25
    4180:	87 95       	ror	r24
    4182:	95 95       	asr	r25
    4184:	87 95       	ror	r24
    4186:	95 95       	asr	r25
    4188:	87 95       	ror	r24
    418a:	98 2f       	mov	r25, r24
    418c:	82 e0       	ldi	r24, 0x02	; 2
    418e:	65 e0       	ldi	r22, 0x05	; 5
    4190:	49 2f       	mov	r20, r25
    4192:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(ch,6) );
    4196:	fe 01       	movw	r30, r28
    4198:	ed 59       	subi	r30, 0x9D	; 157
    419a:	ff 4f       	sbci	r31, 0xFF	; 255
    419c:	80 81       	ld	r24, Z
    419e:	88 2f       	mov	r24, r24
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	80 74       	andi	r24, 0x40	; 64
    41a4:	90 70       	andi	r25, 0x00	; 0
    41a6:	08 2e       	mov	r0, r24
    41a8:	89 2f       	mov	r24, r25
    41aa:	00 0c       	add	r0, r0
    41ac:	88 1f       	adc	r24, r24
    41ae:	99 0b       	sbc	r25, r25
    41b0:	00 0c       	add	r0, r0
    41b2:	88 1f       	adc	r24, r24
    41b4:	99 1f       	adc	r25, r25
    41b6:	98 2f       	mov	r25, r24
    41b8:	82 e0       	ldi	r24, 0x02	; 2
    41ba:	66 e0       	ldi	r22, 0x06	; 6
    41bc:	49 2f       	mov	r20, r25
    41be:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(ch,7) );
    41c2:	fe 01       	movw	r30, r28
    41c4:	ed 59       	subi	r30, 0x9D	; 157
    41c6:	ff 4f       	sbci	r31, 0xFF	; 255
    41c8:	80 81       	ld	r24, Z
    41ca:	98 2f       	mov	r25, r24
    41cc:	99 1f       	adc	r25, r25
    41ce:	99 27       	eor	r25, r25
    41d0:	99 1f       	adc	r25, r25
    41d2:	82 e0       	ldi	r24, 0x02	; 2
    41d4:	67 e0       	ldi	r22, 0x07	; 7
    41d6:	49 2f       	mov	r20, r25
    41d8:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    41dc:	fe 01       	movw	r30, r28
    41de:	ed 5b       	subi	r30, 0xBD	; 189
    41e0:	ff 4f       	sbci	r31, 0xFF	; 255
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	a0 e8       	ldi	r26, 0x80	; 128
    41e8:	bf e3       	ldi	r27, 0x3F	; 63
    41ea:	80 83       	st	Z, r24
    41ec:	91 83       	std	Z+1, r25	; 0x01
    41ee:	a2 83       	std	Z+2, r26	; 0x02
    41f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f2:	8e 01       	movw	r16, r28
    41f4:	01 5c       	subi	r16, 0xC1	; 193
    41f6:	1f 4f       	sbci	r17, 0xFF	; 255
    41f8:	fe 01       	movw	r30, r28
    41fa:	ed 5b       	subi	r30, 0xBD	; 189
    41fc:	ff 4f       	sbci	r31, 0xFF	; 255
    41fe:	60 81       	ld	r22, Z
    4200:	71 81       	ldd	r23, Z+1	; 0x01
    4202:	82 81       	ldd	r24, Z+2	; 0x02
    4204:	93 81       	ldd	r25, Z+3	; 0x03
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	4a e7       	ldi	r20, 0x7A	; 122
    420c:	55 e4       	ldi	r21, 0x45	; 69
    420e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	f8 01       	movw	r30, r16
    4218:	80 83       	st	Z, r24
    421a:	91 83       	std	Z+1, r25	; 0x01
    421c:	a2 83       	std	Z+2, r26	; 0x02
    421e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4220:	fe 01       	movw	r30, r28
    4222:	ff 96       	adiw	r30, 0x3f	; 63
    4224:	60 81       	ld	r22, Z
    4226:	71 81       	ldd	r23, Z+1	; 0x01
    4228:	82 81       	ldd	r24, Z+2	; 0x02
    422a:	93 81       	ldd	r25, Z+3	; 0x03
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	40 e8       	ldi	r20, 0x80	; 128
    4232:	5f e3       	ldi	r21, 0x3F	; 63
    4234:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4238:	88 23       	and	r24, r24
    423a:	2c f4       	brge	.+10     	; 0x4246 <LCD_writeChar+0x40e>
		__ticks = 1;
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	9e af       	std	Y+62, r25	; 0x3e
    4242:	8d af       	std	Y+61, r24	; 0x3d
    4244:	46 c0       	rjmp	.+140    	; 0x42d2 <LCD_writeChar+0x49a>
	else if (__tmp > 65535)
    4246:	fe 01       	movw	r30, r28
    4248:	ff 96       	adiw	r30, 0x3f	; 63
    424a:	60 81       	ld	r22, Z
    424c:	71 81       	ldd	r23, Z+1	; 0x01
    424e:	82 81       	ldd	r24, Z+2	; 0x02
    4250:	93 81       	ldd	r25, Z+3	; 0x03
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	3f ef       	ldi	r19, 0xFF	; 255
    4256:	4f e7       	ldi	r20, 0x7F	; 127
    4258:	57 e4       	ldi	r21, 0x47	; 71
    425a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    425e:	18 16       	cp	r1, r24
    4260:	64 f5       	brge	.+88     	; 0x42ba <LCD_writeChar+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4262:	fe 01       	movw	r30, r28
    4264:	ed 5b       	subi	r30, 0xBD	; 189
    4266:	ff 4f       	sbci	r31, 0xFF	; 255
    4268:	60 81       	ld	r22, Z
    426a:	71 81       	ldd	r23, Z+1	; 0x01
    426c:	82 81       	ldd	r24, Z+2	; 0x02
    426e:	93 81       	ldd	r25, Z+3	; 0x03
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	40 e2       	ldi	r20, 0x20	; 32
    4276:	51 e4       	ldi	r21, 0x41	; 65
    4278:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	bc 01       	movw	r22, r24
    4282:	cd 01       	movw	r24, r26
    4284:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	9e af       	std	Y+62, r25	; 0x3e
    428e:	8d af       	std	Y+61, r24	; 0x3d
    4290:	0f c0       	rjmp	.+30     	; 0x42b0 <LCD_writeChar+0x478>
    4292:	80 e9       	ldi	r24, 0x90	; 144
    4294:	91 e0       	ldi	r25, 0x01	; 1
    4296:	9c af       	std	Y+60, r25	; 0x3c
    4298:	8b af       	std	Y+59, r24	; 0x3b
    429a:	8b ad       	ldd	r24, Y+59	; 0x3b
    429c:	9c ad       	ldd	r25, Y+60	; 0x3c
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	f1 f7       	brne	.-4      	; 0x429e <LCD_writeChar+0x466>
    42a2:	9c af       	std	Y+60, r25	; 0x3c
    42a4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    42a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    42aa:	01 97       	sbiw	r24, 0x01	; 1
    42ac:	9e af       	std	Y+62, r25	; 0x3e
    42ae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    42b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    42b4:	00 97       	sbiw	r24, 0x00	; 0
    42b6:	69 f7       	brne	.-38     	; 0x4292 <LCD_writeChar+0x45a>
    42b8:	16 c0       	rjmp	.+44     	; 0x42e6 <LCD_writeChar+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ba:	fe 01       	movw	r30, r28
    42bc:	ff 96       	adiw	r30, 0x3f	; 63
    42be:	60 81       	ld	r22, Z
    42c0:	71 81       	ldd	r23, Z+1	; 0x01
    42c2:	82 81       	ldd	r24, Z+2	; 0x02
    42c4:	93 81       	ldd	r25, Z+3	; 0x03
    42c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    42ca:	dc 01       	movw	r26, r24
    42cc:	cb 01       	movw	r24, r22
    42ce:	9e af       	std	Y+62, r25	; 0x3e
    42d0:	8d af       	std	Y+61, r24	; 0x3d
    42d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    42d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    42d6:	9a af       	std	Y+58, r25	; 0x3a
    42d8:	89 af       	std	Y+57, r24	; 0x39
    42da:	89 ad       	ldd	r24, Y+57	; 0x39
    42dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    42de:	01 97       	sbiw	r24, 0x01	; 1
    42e0:	f1 f7       	brne	.-4      	; 0x42de <LCD_writeChar+0x4a6>
    42e2:	9a af       	std	Y+58, r25	; 0x3a
    42e4:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(1);
			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW); /*write 0 in enable pin to make falling edge*/
    42e6:	82 e0       	ldi	r24, 0x02	; 2
    42e8:	63 e0       	ldi	r22, 0x03	; 3
    42ea:	40 e0       	ldi	r20, 0x00	; 0
    42ec:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	a0 e8       	ldi	r26, 0x80	; 128
    42f6:	bf e3       	ldi	r27, 0x3F	; 63
    42f8:	8d ab       	std	Y+53, r24	; 0x35
    42fa:	9e ab       	std	Y+54, r25	; 0x36
    42fc:	af ab       	std	Y+55, r26	; 0x37
    42fe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4300:	6d a9       	ldd	r22, Y+53	; 0x35
    4302:	7e a9       	ldd	r23, Y+54	; 0x36
    4304:	8f a9       	ldd	r24, Y+55	; 0x37
    4306:	98 ad       	ldd	r25, Y+56	; 0x38
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	4a e7       	ldi	r20, 0x7A	; 122
    430e:	55 e4       	ldi	r21, 0x45	; 69
    4310:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4314:	dc 01       	movw	r26, r24
    4316:	cb 01       	movw	r24, r22
    4318:	89 ab       	std	Y+49, r24	; 0x31
    431a:	9a ab       	std	Y+50, r25	; 0x32
    431c:	ab ab       	std	Y+51, r26	; 0x33
    431e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4320:	69 a9       	ldd	r22, Y+49	; 0x31
    4322:	7a a9       	ldd	r23, Y+50	; 0x32
    4324:	8b a9       	ldd	r24, Y+51	; 0x33
    4326:	9c a9       	ldd	r25, Y+52	; 0x34
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	40 e8       	ldi	r20, 0x80	; 128
    432e:	5f e3       	ldi	r21, 0x3F	; 63
    4330:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4334:	88 23       	and	r24, r24
    4336:	2c f4       	brge	.+10     	; 0x4342 <LCD_writeChar+0x50a>
		__ticks = 1;
    4338:	81 e0       	ldi	r24, 0x01	; 1
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	98 ab       	std	Y+48, r25	; 0x30
    433e:	8f a7       	std	Y+47, r24	; 0x2f
    4340:	3f c0       	rjmp	.+126    	; 0x43c0 <LCD_writeChar+0x588>
	else if (__tmp > 65535)
    4342:	69 a9       	ldd	r22, Y+49	; 0x31
    4344:	7a a9       	ldd	r23, Y+50	; 0x32
    4346:	8b a9       	ldd	r24, Y+51	; 0x33
    4348:	9c a9       	ldd	r25, Y+52	; 0x34
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	3f ef       	ldi	r19, 0xFF	; 255
    434e:	4f e7       	ldi	r20, 0x7F	; 127
    4350:	57 e4       	ldi	r21, 0x47	; 71
    4352:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4356:	18 16       	cp	r1, r24
    4358:	4c f5       	brge	.+82     	; 0x43ac <LCD_writeChar+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    435a:	6d a9       	ldd	r22, Y+53	; 0x35
    435c:	7e a9       	ldd	r23, Y+54	; 0x36
    435e:	8f a9       	ldd	r24, Y+55	; 0x37
    4360:	98 ad       	ldd	r25, Y+56	; 0x38
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	40 e2       	ldi	r20, 0x20	; 32
    4368:	51 e4       	ldi	r21, 0x41	; 65
    436a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	bc 01       	movw	r22, r24
    4374:	cd 01       	movw	r24, r26
    4376:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    437a:	dc 01       	movw	r26, r24
    437c:	cb 01       	movw	r24, r22
    437e:	98 ab       	std	Y+48, r25	; 0x30
    4380:	8f a7       	std	Y+47, r24	; 0x2f
    4382:	0f c0       	rjmp	.+30     	; 0x43a2 <LCD_writeChar+0x56a>
    4384:	80 e9       	ldi	r24, 0x90	; 144
    4386:	91 e0       	ldi	r25, 0x01	; 1
    4388:	9e a7       	std	Y+46, r25	; 0x2e
    438a:	8d a7       	std	Y+45, r24	; 0x2d
    438c:	8d a5       	ldd	r24, Y+45	; 0x2d
    438e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4390:	01 97       	sbiw	r24, 0x01	; 1
    4392:	f1 f7       	brne	.-4      	; 0x4390 <LCD_writeChar+0x558>
    4394:	9e a7       	std	Y+46, r25	; 0x2e
    4396:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4398:	8f a5       	ldd	r24, Y+47	; 0x2f
    439a:	98 a9       	ldd	r25, Y+48	; 0x30
    439c:	01 97       	sbiw	r24, 0x01	; 1
    439e:	98 ab       	std	Y+48, r25	; 0x30
    43a0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    43a4:	98 a9       	ldd	r25, Y+48	; 0x30
    43a6:	00 97       	sbiw	r24, 0x00	; 0
    43a8:	69 f7       	brne	.-38     	; 0x4384 <LCD_writeChar+0x54c>
    43aa:	14 c0       	rjmp	.+40     	; 0x43d4 <LCD_writeChar+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ac:	69 a9       	ldd	r22, Y+49	; 0x31
    43ae:	7a a9       	ldd	r23, Y+50	; 0x32
    43b0:	8b a9       	ldd	r24, Y+51	; 0x33
    43b2:	9c a9       	ldd	r25, Y+52	; 0x34
    43b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    43b8:	dc 01       	movw	r26, r24
    43ba:	cb 01       	movw	r24, r22
    43bc:	98 ab       	std	Y+48, r25	; 0x30
    43be:	8f a7       	std	Y+47, r24	; 0x2f
    43c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    43c2:	98 a9       	ldd	r25, Y+48	; 0x30
    43c4:	9c a7       	std	Y+44, r25	; 0x2c
    43c6:	8b a7       	std	Y+43, r24	; 0x2b
    43c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    43ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    43cc:	01 97       	sbiw	r24, 0x01	; 1
    43ce:	f1 f7       	brne	.-4      	; 0x43cc <LCD_writeChar+0x594>
    43d0:	9c a7       	std	Y+44, r25	; 0x2c
    43d2:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH); /*write 1 in enable pin */
    43d4:	82 e0       	ldi	r24, 0x02	; 2
    43d6:	63 e0       	ldi	r22, 0x03	; 3
    43d8:	41 e0       	ldi	r20, 0x01	; 1
    43da:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    43de:	80 e0       	ldi	r24, 0x00	; 0
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	a0 e8       	ldi	r26, 0x80	; 128
    43e4:	bf e3       	ldi	r27, 0x3F	; 63
    43e6:	8f a3       	std	Y+39, r24	; 0x27
    43e8:	98 a7       	std	Y+40, r25	; 0x28
    43ea:	a9 a7       	std	Y+41, r26	; 0x29
    43ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ee:	6f a1       	ldd	r22, Y+39	; 0x27
    43f0:	78 a5       	ldd	r23, Y+40	; 0x28
    43f2:	89 a5       	ldd	r24, Y+41	; 0x29
    43f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	4a e7       	ldi	r20, 0x7A	; 122
    43fc:	55 e4       	ldi	r21, 0x45	; 69
    43fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4402:	dc 01       	movw	r26, r24
    4404:	cb 01       	movw	r24, r22
    4406:	8b a3       	std	Y+35, r24	; 0x23
    4408:	9c a3       	std	Y+36, r25	; 0x24
    440a:	ad a3       	std	Y+37, r26	; 0x25
    440c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    440e:	6b a1       	ldd	r22, Y+35	; 0x23
    4410:	7c a1       	ldd	r23, Y+36	; 0x24
    4412:	8d a1       	ldd	r24, Y+37	; 0x25
    4414:	9e a1       	ldd	r25, Y+38	; 0x26
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	40 e8       	ldi	r20, 0x80	; 128
    441c:	5f e3       	ldi	r21, 0x3F	; 63
    441e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4422:	88 23       	and	r24, r24
    4424:	2c f4       	brge	.+10     	; 0x4430 <LCD_writeChar+0x5f8>
		__ticks = 1;
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	9a a3       	std	Y+34, r25	; 0x22
    442c:	89 a3       	std	Y+33, r24	; 0x21
    442e:	3f c0       	rjmp	.+126    	; 0x44ae <LCD_writeChar+0x676>
	else if (__tmp > 65535)
    4430:	6b a1       	ldd	r22, Y+35	; 0x23
    4432:	7c a1       	ldd	r23, Y+36	; 0x24
    4434:	8d a1       	ldd	r24, Y+37	; 0x25
    4436:	9e a1       	ldd	r25, Y+38	; 0x26
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	3f ef       	ldi	r19, 0xFF	; 255
    443c:	4f e7       	ldi	r20, 0x7F	; 127
    443e:	57 e4       	ldi	r21, 0x47	; 71
    4440:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4444:	18 16       	cp	r1, r24
    4446:	4c f5       	brge	.+82     	; 0x449a <LCD_writeChar+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4448:	6f a1       	ldd	r22, Y+39	; 0x27
    444a:	78 a5       	ldd	r23, Y+40	; 0x28
    444c:	89 a5       	ldd	r24, Y+41	; 0x29
    444e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4450:	20 e0       	ldi	r18, 0x00	; 0
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	40 e2       	ldi	r20, 0x20	; 32
    4456:	51 e4       	ldi	r21, 0x41	; 65
    4458:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    445c:	dc 01       	movw	r26, r24
    445e:	cb 01       	movw	r24, r22
    4460:	bc 01       	movw	r22, r24
    4462:	cd 01       	movw	r24, r26
    4464:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	9a a3       	std	Y+34, r25	; 0x22
    446e:	89 a3       	std	Y+33, r24	; 0x21
    4470:	0f c0       	rjmp	.+30     	; 0x4490 <LCD_writeChar+0x658>
    4472:	80 e9       	ldi	r24, 0x90	; 144
    4474:	91 e0       	ldi	r25, 0x01	; 1
    4476:	98 a3       	std	Y+32, r25	; 0x20
    4478:	8f 8f       	std	Y+31, r24	; 0x1f
    447a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    447c:	98 a1       	ldd	r25, Y+32	; 0x20
    447e:	01 97       	sbiw	r24, 0x01	; 1
    4480:	f1 f7       	brne	.-4      	; 0x447e <LCD_writeChar+0x646>
    4482:	98 a3       	std	Y+32, r25	; 0x20
    4484:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4486:	89 a1       	ldd	r24, Y+33	; 0x21
    4488:	9a a1       	ldd	r25, Y+34	; 0x22
    448a:	01 97       	sbiw	r24, 0x01	; 1
    448c:	9a a3       	std	Y+34, r25	; 0x22
    448e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4490:	89 a1       	ldd	r24, Y+33	; 0x21
    4492:	9a a1       	ldd	r25, Y+34	; 0x22
    4494:	00 97       	sbiw	r24, 0x00	; 0
    4496:	69 f7       	brne	.-38     	; 0x4472 <LCD_writeChar+0x63a>
    4498:	14 c0       	rjmp	.+40     	; 0x44c2 <LCD_writeChar+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    449a:	6b a1       	ldd	r22, Y+35	; 0x23
    449c:	7c a1       	ldd	r23, Y+36	; 0x24
    449e:	8d a1       	ldd	r24, Y+37	; 0x25
    44a0:	9e a1       	ldd	r25, Y+38	; 0x26
    44a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44a6:	dc 01       	movw	r26, r24
    44a8:	cb 01       	movw	r24, r22
    44aa:	9a a3       	std	Y+34, r25	; 0x22
    44ac:	89 a3       	std	Y+33, r24	; 0x21
    44ae:	89 a1       	ldd	r24, Y+33	; 0x21
    44b0:	9a a1       	ldd	r25, Y+34	; 0x22
    44b2:	9e 8f       	std	Y+30, r25	; 0x1e
    44b4:	8d 8f       	std	Y+29, r24	; 0x1d
    44b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44ba:	01 97       	sbiw	r24, 0x01	; 1
    44bc:	f1 f7       	brne	.-4      	; 0x44ba <LCD_writeChar+0x682>
    44be:	9e 8f       	std	Y+30, r25	; 0x1e
    44c0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);

			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4 , GET_BIT(ch,0) );
    44c2:	fe 01       	movw	r30, r28
    44c4:	ed 59       	subi	r30, 0x9D	; 157
    44c6:	ff 4f       	sbci	r31, 0xFF	; 255
    44c8:	80 81       	ld	r24, Z
    44ca:	98 2f       	mov	r25, r24
    44cc:	91 70       	andi	r25, 0x01	; 1
    44ce:	82 e0       	ldi	r24, 0x02	; 2
    44d0:	64 e0       	ldi	r22, 0x04	; 4
    44d2:	49 2f       	mov	r20, r25
    44d4:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN5 , GET_BIT(ch,1) );
    44d8:	fe 01       	movw	r30, r28
    44da:	ed 59       	subi	r30, 0x9D	; 157
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	80 81       	ld	r24, Z
    44e0:	88 2f       	mov	r24, r24
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	82 70       	andi	r24, 0x02	; 2
    44e6:	90 70       	andi	r25, 0x00	; 0
    44e8:	95 95       	asr	r25
    44ea:	87 95       	ror	r24
    44ec:	98 2f       	mov	r25, r24
    44ee:	82 e0       	ldi	r24, 0x02	; 2
    44f0:	65 e0       	ldi	r22, 0x05	; 5
    44f2:	49 2f       	mov	r20, r25
    44f4:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN6 , GET_BIT(ch,2) );
    44f8:	fe 01       	movw	r30, r28
    44fa:	ed 59       	subi	r30, 0x9D	; 157
    44fc:	ff 4f       	sbci	r31, 0xFF	; 255
    44fe:	80 81       	ld	r24, Z
    4500:	88 2f       	mov	r24, r24
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	84 70       	andi	r24, 0x04	; 4
    4506:	90 70       	andi	r25, 0x00	; 0
    4508:	95 95       	asr	r25
    450a:	87 95       	ror	r24
    450c:	95 95       	asr	r25
    450e:	87 95       	ror	r24
    4510:	98 2f       	mov	r25, r24
    4512:	82 e0       	ldi	r24, 0x02	; 2
    4514:	66 e0       	ldi	r22, 0x06	; 6
    4516:	49 2f       	mov	r20, r25
    4518:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
			GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN7 , GET_BIT(ch,3) );
    451c:	fe 01       	movw	r30, r28
    451e:	ed 59       	subi	r30, 0x9D	; 157
    4520:	ff 4f       	sbci	r31, 0xFF	; 255
    4522:	80 81       	ld	r24, Z
    4524:	88 2f       	mov	r24, r24
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	88 70       	andi	r24, 0x08	; 8
    452a:	90 70       	andi	r25, 0x00	; 0
    452c:	95 95       	asr	r25
    452e:	87 95       	ror	r24
    4530:	95 95       	asr	r25
    4532:	87 95       	ror	r24
    4534:	95 95       	asr	r25
    4536:	87 95       	ror	r24
    4538:	98 2f       	mov	r25, r24
    453a:	82 e0       	ldi	r24, 0x02	; 2
    453c:	67 e0       	ldi	r22, 0x07	; 7
    453e:	49 2f       	mov	r20, r25
    4540:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	a0 e8       	ldi	r26, 0x80	; 128
    454a:	bf e3       	ldi	r27, 0x3F	; 63
    454c:	89 8f       	std	Y+25, r24	; 0x19
    454e:	9a 8f       	std	Y+26, r25	; 0x1a
    4550:	ab 8f       	std	Y+27, r26	; 0x1b
    4552:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4554:	69 8d       	ldd	r22, Y+25	; 0x19
    4556:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4558:	8b 8d       	ldd	r24, Y+27	; 0x1b
    455a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	4a e7       	ldi	r20, 0x7A	; 122
    4562:	55 e4       	ldi	r21, 0x45	; 69
    4564:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4568:	dc 01       	movw	r26, r24
    456a:	cb 01       	movw	r24, r22
    456c:	8d 8b       	std	Y+21, r24	; 0x15
    456e:	9e 8b       	std	Y+22, r25	; 0x16
    4570:	af 8b       	std	Y+23, r26	; 0x17
    4572:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4574:	6d 89       	ldd	r22, Y+21	; 0x15
    4576:	7e 89       	ldd	r23, Y+22	; 0x16
    4578:	8f 89       	ldd	r24, Y+23	; 0x17
    457a:	98 8d       	ldd	r25, Y+24	; 0x18
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	40 e8       	ldi	r20, 0x80	; 128
    4582:	5f e3       	ldi	r21, 0x3F	; 63
    4584:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4588:	88 23       	and	r24, r24
    458a:	2c f4       	brge	.+10     	; 0x4596 <LCD_writeChar+0x75e>
		__ticks = 1;
    458c:	81 e0       	ldi	r24, 0x01	; 1
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	9c 8b       	std	Y+20, r25	; 0x14
    4592:	8b 8b       	std	Y+19, r24	; 0x13
    4594:	3f c0       	rjmp	.+126    	; 0x4614 <LCD_writeChar+0x7dc>
	else if (__tmp > 65535)
    4596:	6d 89       	ldd	r22, Y+21	; 0x15
    4598:	7e 89       	ldd	r23, Y+22	; 0x16
    459a:	8f 89       	ldd	r24, Y+23	; 0x17
    459c:	98 8d       	ldd	r25, Y+24	; 0x18
    459e:	20 e0       	ldi	r18, 0x00	; 0
    45a0:	3f ef       	ldi	r19, 0xFF	; 255
    45a2:	4f e7       	ldi	r20, 0x7F	; 127
    45a4:	57 e4       	ldi	r21, 0x47	; 71
    45a6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    45aa:	18 16       	cp	r1, r24
    45ac:	4c f5       	brge	.+82     	; 0x4600 <LCD_writeChar+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ae:	69 8d       	ldd	r22, Y+25	; 0x19
    45b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45b6:	20 e0       	ldi	r18, 0x00	; 0
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	40 e2       	ldi	r20, 0x20	; 32
    45bc:	51 e4       	ldi	r21, 0x41	; 65
    45be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	bc 01       	movw	r22, r24
    45c8:	cd 01       	movw	r24, r26
    45ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    45ce:	dc 01       	movw	r26, r24
    45d0:	cb 01       	movw	r24, r22
    45d2:	9c 8b       	std	Y+20, r25	; 0x14
    45d4:	8b 8b       	std	Y+19, r24	; 0x13
    45d6:	0f c0       	rjmp	.+30     	; 0x45f6 <LCD_writeChar+0x7be>
    45d8:	80 e9       	ldi	r24, 0x90	; 144
    45da:	91 e0       	ldi	r25, 0x01	; 1
    45dc:	9a 8b       	std	Y+18, r25	; 0x12
    45de:	89 8b       	std	Y+17, r24	; 0x11
    45e0:	89 89       	ldd	r24, Y+17	; 0x11
    45e2:	9a 89       	ldd	r25, Y+18	; 0x12
    45e4:	01 97       	sbiw	r24, 0x01	; 1
    45e6:	f1 f7       	brne	.-4      	; 0x45e4 <LCD_writeChar+0x7ac>
    45e8:	9a 8b       	std	Y+18, r25	; 0x12
    45ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ec:	8b 89       	ldd	r24, Y+19	; 0x13
    45ee:	9c 89       	ldd	r25, Y+20	; 0x14
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	9c 8b       	std	Y+20, r25	; 0x14
    45f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45f6:	8b 89       	ldd	r24, Y+19	; 0x13
    45f8:	9c 89       	ldd	r25, Y+20	; 0x14
    45fa:	00 97       	sbiw	r24, 0x00	; 0
    45fc:	69 f7       	brne	.-38     	; 0x45d8 <LCD_writeChar+0x7a0>
    45fe:	14 c0       	rjmp	.+40     	; 0x4628 <LCD_writeChar+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4600:	6d 89       	ldd	r22, Y+21	; 0x15
    4602:	7e 89       	ldd	r23, Y+22	; 0x16
    4604:	8f 89       	ldd	r24, Y+23	; 0x17
    4606:	98 8d       	ldd	r25, Y+24	; 0x18
    4608:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    460c:	dc 01       	movw	r26, r24
    460e:	cb 01       	movw	r24, r22
    4610:	9c 8b       	std	Y+20, r25	; 0x14
    4612:	8b 8b       	std	Y+19, r24	; 0x13
    4614:	8b 89       	ldd	r24, Y+19	; 0x13
    4616:	9c 89       	ldd	r25, Y+20	; 0x14
    4618:	98 8b       	std	Y+16, r25	; 0x10
    461a:	8f 87       	std	Y+15, r24	; 0x0f
    461c:	8f 85       	ldd	r24, Y+15	; 0x0f
    461e:	98 89       	ldd	r25, Y+16	; 0x10
    4620:	01 97       	sbiw	r24, 0x01	; 1
    4622:	f1 f7       	brne	.-4      	; 0x4620 <LCD_writeChar+0x7e8>
    4624:	98 8b       	std	Y+16, r25	; 0x10
    4626:	8f 87       	std	Y+15, r24	; 0x0f



		#endif

			GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    4628:	82 e0       	ldi	r24, 0x02	; 2
    462a:	63 e0       	ldi	r22, 0x03	; 3
    462c:	40 e0       	ldi	r20, 0x00	; 0
    462e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <GPIO_writePin>
    4632:	80 e0       	ldi	r24, 0x00	; 0
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	a0 e8       	ldi	r26, 0x80	; 128
    4638:	bf e3       	ldi	r27, 0x3F	; 63
    463a:	8b 87       	std	Y+11, r24	; 0x0b
    463c:	9c 87       	std	Y+12, r25	; 0x0c
    463e:	ad 87       	std	Y+13, r26	; 0x0d
    4640:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4642:	6b 85       	ldd	r22, Y+11	; 0x0b
    4644:	7c 85       	ldd	r23, Y+12	; 0x0c
    4646:	8d 85       	ldd	r24, Y+13	; 0x0d
    4648:	9e 85       	ldd	r25, Y+14	; 0x0e
    464a:	20 e0       	ldi	r18, 0x00	; 0
    464c:	30 e0       	ldi	r19, 0x00	; 0
    464e:	4a e7       	ldi	r20, 0x7A	; 122
    4650:	55 e4       	ldi	r21, 0x45	; 69
    4652:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4656:	dc 01       	movw	r26, r24
    4658:	cb 01       	movw	r24, r22
    465a:	8f 83       	std	Y+7, r24	; 0x07
    465c:	98 87       	std	Y+8, r25	; 0x08
    465e:	a9 87       	std	Y+9, r26	; 0x09
    4660:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4662:	6f 81       	ldd	r22, Y+7	; 0x07
    4664:	78 85       	ldd	r23, Y+8	; 0x08
    4666:	89 85       	ldd	r24, Y+9	; 0x09
    4668:	9a 85       	ldd	r25, Y+10	; 0x0a
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	40 e8       	ldi	r20, 0x80	; 128
    4670:	5f e3       	ldi	r21, 0x3F	; 63
    4672:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4676:	88 23       	and	r24, r24
    4678:	2c f4       	brge	.+10     	; 0x4684 <LCD_writeChar+0x84c>
		__ticks = 1;
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	9e 83       	std	Y+6, r25	; 0x06
    4680:	8d 83       	std	Y+5, r24	; 0x05
    4682:	3f c0       	rjmp	.+126    	; 0x4702 <LCD_writeChar+0x8ca>
	else if (__tmp > 65535)
    4684:	6f 81       	ldd	r22, Y+7	; 0x07
    4686:	78 85       	ldd	r23, Y+8	; 0x08
    4688:	89 85       	ldd	r24, Y+9	; 0x09
    468a:	9a 85       	ldd	r25, Y+10	; 0x0a
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	3f ef       	ldi	r19, 0xFF	; 255
    4690:	4f e7       	ldi	r20, 0x7F	; 127
    4692:	57 e4       	ldi	r21, 0x47	; 71
    4694:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4698:	18 16       	cp	r1, r24
    469a:	4c f5       	brge	.+82     	; 0x46ee <LCD_writeChar+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    469c:	6b 85       	ldd	r22, Y+11	; 0x0b
    469e:	7c 85       	ldd	r23, Y+12	; 0x0c
    46a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    46a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    46a4:	20 e0       	ldi	r18, 0x00	; 0
    46a6:	30 e0       	ldi	r19, 0x00	; 0
    46a8:	40 e2       	ldi	r20, 0x20	; 32
    46aa:	51 e4       	ldi	r21, 0x41	; 65
    46ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    46b0:	dc 01       	movw	r26, r24
    46b2:	cb 01       	movw	r24, r22
    46b4:	bc 01       	movw	r22, r24
    46b6:	cd 01       	movw	r24, r26
    46b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    46bc:	dc 01       	movw	r26, r24
    46be:	cb 01       	movw	r24, r22
    46c0:	9e 83       	std	Y+6, r25	; 0x06
    46c2:	8d 83       	std	Y+5, r24	; 0x05
    46c4:	0f c0       	rjmp	.+30     	; 0x46e4 <LCD_writeChar+0x8ac>
    46c6:	80 e9       	ldi	r24, 0x90	; 144
    46c8:	91 e0       	ldi	r25, 0x01	; 1
    46ca:	9c 83       	std	Y+4, r25	; 0x04
    46cc:	8b 83       	std	Y+3, r24	; 0x03
    46ce:	8b 81       	ldd	r24, Y+3	; 0x03
    46d0:	9c 81       	ldd	r25, Y+4	; 0x04
    46d2:	01 97       	sbiw	r24, 0x01	; 1
    46d4:	f1 f7       	brne	.-4      	; 0x46d2 <LCD_writeChar+0x89a>
    46d6:	9c 83       	std	Y+4, r25	; 0x04
    46d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46da:	8d 81       	ldd	r24, Y+5	; 0x05
    46dc:	9e 81       	ldd	r25, Y+6	; 0x06
    46de:	01 97       	sbiw	r24, 0x01	; 1
    46e0:	9e 83       	std	Y+6, r25	; 0x06
    46e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46e4:	8d 81       	ldd	r24, Y+5	; 0x05
    46e6:	9e 81       	ldd	r25, Y+6	; 0x06
    46e8:	00 97       	sbiw	r24, 0x00	; 0
    46ea:	69 f7       	brne	.-38     	; 0x46c6 <LCD_writeChar+0x88e>
    46ec:	14 c0       	rjmp	.+40     	; 0x4716 <LCD_writeChar+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46ee:	6f 81       	ldd	r22, Y+7	; 0x07
    46f0:	78 85       	ldd	r23, Y+8	; 0x08
    46f2:	89 85       	ldd	r24, Y+9	; 0x09
    46f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    46fa:	dc 01       	movw	r26, r24
    46fc:	cb 01       	movw	r24, r22
    46fe:	9e 83       	std	Y+6, r25	; 0x06
    4700:	8d 83       	std	Y+5, r24	; 0x05
    4702:	8d 81       	ldd	r24, Y+5	; 0x05
    4704:	9e 81       	ldd	r25, Y+6	; 0x06
    4706:	9a 83       	std	Y+2, r25	; 0x02
    4708:	89 83       	std	Y+1, r24	; 0x01
    470a:	89 81       	ldd	r24, Y+1	; 0x01
    470c:	9a 81       	ldd	r25, Y+2	; 0x02
    470e:	01 97       	sbiw	r24, 0x01	; 1
    4710:	f1 f7       	brne	.-4      	; 0x470e <LCD_writeChar+0x8d6>
    4712:	9a 83       	std	Y+2, r25	; 0x02
    4714:	89 83       	std	Y+1, r24	; 0x01
			/*write  0 in enable pin beacase LCD read the at falling edge of enable, so we make it 1 then 0*/

			_delay_ms(1);
}
    4716:	cd 59       	subi	r28, 0x9D	; 157
    4718:	df 4f       	sbci	r29, 0xFF	; 255
    471a:	0f b6       	in	r0, 0x3f	; 63
    471c:	f8 94       	cli
    471e:	de bf       	out	0x3e, r29	; 62
    4720:	0f be       	out	0x3f, r0	; 63
    4722:	cd bf       	out	0x3d, r28	; 61
    4724:	cf 91       	pop	r28
    4726:	df 91       	pop	r29
    4728:	1f 91       	pop	r17
    472a:	0f 91       	pop	r16
    472c:	08 95       	ret

0000472e <LCD_writeString>:

void LCD_writeString(uint8 *str)
{
    472e:	df 93       	push	r29
    4730:	cf 93       	push	r28
    4732:	00 d0       	rcall	.+0      	; 0x4734 <LCD_writeString+0x6>
    4734:	00 d0       	rcall	.+0      	; 0x4736 <LCD_writeString+0x8>
    4736:	cd b7       	in	r28, 0x3d	; 61
    4738:	de b7       	in	r29, 0x3e	; 62
    473a:	9c 83       	std	Y+4, r25	; 0x04
    473c:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    473e:	1a 82       	std	Y+2, r1	; 0x02
    4740:	19 82       	std	Y+1, r1	; 0x01
    4742:	0f c0       	rjmp	.+30     	; 0x4762 <LCD_writeString+0x34>
	while(str[i]!='\0')
	{
		LCD_writeChar(str[i]);
    4744:	29 81       	ldd	r18, Y+1	; 0x01
    4746:	3a 81       	ldd	r19, Y+2	; 0x02
    4748:	8b 81       	ldd	r24, Y+3	; 0x03
    474a:	9c 81       	ldd	r25, Y+4	; 0x04
    474c:	fc 01       	movw	r30, r24
    474e:	e2 0f       	add	r30, r18
    4750:	f3 1f       	adc	r31, r19
    4752:	80 81       	ld	r24, Z
    4754:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <LCD_writeChar>
		i++;
    4758:	89 81       	ldd	r24, Y+1	; 0x01
    475a:	9a 81       	ldd	r25, Y+2	; 0x02
    475c:	01 96       	adiw	r24, 0x01	; 1
    475e:	9a 83       	std	Y+2, r25	; 0x02
    4760:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_writeString(uint8 *str)
{
	int i=0;
	while(str[i]!='\0')
    4762:	29 81       	ldd	r18, Y+1	; 0x01
    4764:	3a 81       	ldd	r19, Y+2	; 0x02
    4766:	8b 81       	ldd	r24, Y+3	; 0x03
    4768:	9c 81       	ldd	r25, Y+4	; 0x04
    476a:	fc 01       	movw	r30, r24
    476c:	e2 0f       	add	r30, r18
    476e:	f3 1f       	adc	r31, r19
    4770:	80 81       	ld	r24, Z
    4772:	88 23       	and	r24, r24
    4774:	39 f7       	brne	.-50     	; 0x4744 <LCD_writeString+0x16>
	{
		LCD_writeChar(str[i]);
		i++;
	}
}
    4776:	0f 90       	pop	r0
    4778:	0f 90       	pop	r0
    477a:	0f 90       	pop	r0
    477c:	0f 90       	pop	r0
    477e:	cf 91       	pop	r28
    4780:	df 91       	pop	r29
    4782:	08 95       	ret

00004784 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row , uint8 col)
{
    4784:	df 93       	push	r29
    4786:	cf 93       	push	r28
    4788:	00 d0       	rcall	.+0      	; 0x478a <LCD_moveCursor+0x6>
    478a:	00 d0       	rcall	.+0      	; 0x478c <LCD_moveCursor+0x8>
    478c:	0f 92       	push	r0
    478e:	cd b7       	in	r28, 0x3d	; 61
    4790:	de b7       	in	r29, 0x3e	; 62
    4792:	8a 83       	std	Y+2, r24	; 0x02
    4794:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address=0x00;
    4796:	19 82       	std	Y+1, r1	; 0x01
	switch(row)
    4798:	8a 81       	ldd	r24, Y+2	; 0x02
    479a:	28 2f       	mov	r18, r24
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	3d 83       	std	Y+5, r19	; 0x05
    47a0:	2c 83       	std	Y+4, r18	; 0x04
    47a2:	8c 81       	ldd	r24, Y+4	; 0x04
    47a4:	9d 81       	ldd	r25, Y+5	; 0x05
    47a6:	81 30       	cpi	r24, 0x01	; 1
    47a8:	91 05       	cpc	r25, r1
    47aa:	c1 f0       	breq	.+48     	; 0x47dc <LCD_moveCursor+0x58>
    47ac:	2c 81       	ldd	r18, Y+4	; 0x04
    47ae:	3d 81       	ldd	r19, Y+5	; 0x05
    47b0:	22 30       	cpi	r18, 0x02	; 2
    47b2:	31 05       	cpc	r19, r1
    47b4:	2c f4       	brge	.+10     	; 0x47c0 <LCD_moveCursor+0x3c>
    47b6:	8c 81       	ldd	r24, Y+4	; 0x04
    47b8:	9d 81       	ldd	r25, Y+5	; 0x05
    47ba:	00 97       	sbiw	r24, 0x00	; 0
    47bc:	61 f0       	breq	.+24     	; 0x47d6 <LCD_moveCursor+0x52>
    47be:	19 c0       	rjmp	.+50     	; 0x47f2 <LCD_moveCursor+0x6e>
    47c0:	2c 81       	ldd	r18, Y+4	; 0x04
    47c2:	3d 81       	ldd	r19, Y+5	; 0x05
    47c4:	22 30       	cpi	r18, 0x02	; 2
    47c6:	31 05       	cpc	r19, r1
    47c8:	69 f0       	breq	.+26     	; 0x47e4 <LCD_moveCursor+0x60>
    47ca:	8c 81       	ldd	r24, Y+4	; 0x04
    47cc:	9d 81       	ldd	r25, Y+5	; 0x05
    47ce:	83 30       	cpi	r24, 0x03	; 3
    47d0:	91 05       	cpc	r25, r1
    47d2:	61 f0       	breq	.+24     	; 0x47ec <LCD_moveCursor+0x68>
    47d4:	0e c0       	rjmp	.+28     	; 0x47f2 <LCD_moveCursor+0x6e>
	{
	case 0:
		lcd_memory_address=col+0x00;
    47d6:	8b 81       	ldd	r24, Y+3	; 0x03
    47d8:	89 83       	std	Y+1, r24	; 0x01
    47da:	0b c0       	rjmp	.+22     	; 0x47f2 <LCD_moveCursor+0x6e>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    47dc:	8b 81       	ldd	r24, Y+3	; 0x03
    47de:	80 5c       	subi	r24, 0xC0	; 192
    47e0:	89 83       	std	Y+1, r24	; 0x01
    47e2:	07 c0       	rjmp	.+14     	; 0x47f2 <LCD_moveCursor+0x6e>
		break;
	case 2: /*for 4 line LCD*/
		lcd_memory_address=col+0x10;
    47e4:	8b 81       	ldd	r24, Y+3	; 0x03
    47e6:	80 5f       	subi	r24, 0xF0	; 240
    47e8:	89 83       	std	Y+1, r24	; 0x01
    47ea:	03 c0       	rjmp	.+6      	; 0x47f2 <LCD_moveCursor+0x6e>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    47ec:	8b 81       	ldd	r24, Y+3	; 0x03
    47ee:	80 5b       	subi	r24, 0xB0	; 176
    47f0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	LCD_sendCommand(lcd_memory_address | 0x80);
    47f2:	89 81       	ldd	r24, Y+1	; 0x01
    47f4:	80 68       	ori	r24, 0x80	; 128
    47f6:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_sendCommand>
}
    47fa:	0f 90       	pop	r0
    47fc:	0f 90       	pop	r0
    47fe:	0f 90       	pop	r0
    4800:	0f 90       	pop	r0
    4802:	0f 90       	pop	r0
    4804:	cf 91       	pop	r28
    4806:	df 91       	pop	r29
    4808:	08 95       	ret

0000480a <LCD_integerToString>:


void LCD_integerToString(uint16 num)
{
    480a:	df 93       	push	r29
    480c:	cf 93       	push	r28
    480e:	cd b7       	in	r28, 0x3d	; 61
    4810:	de b7       	in	r29, 0x3e	; 62
    4812:	62 97       	sbiw	r28, 0x12	; 18
    4814:	0f b6       	in	r0, 0x3f	; 63
    4816:	f8 94       	cli
    4818:	de bf       	out	0x3e, r29	; 62
    481a:	0f be       	out	0x3f, r0	; 63
    481c:	cd bf       	out	0x3d, r28	; 61
    481e:	9a 8b       	std	Y+18, r25	; 0x12
    4820:	89 8b       	std	Y+17, r24	; 0x11
	char numInAsci[16];
	itoa(num,numInAsci,10);
    4822:	89 89       	ldd	r24, Y+17	; 0x11
    4824:	9a 89       	ldd	r25, Y+18	; 0x12
    4826:	9e 01       	movw	r18, r28
    4828:	2f 5f       	subi	r18, 0xFF	; 255
    482a:	3f 4f       	sbci	r19, 0xFF	; 255
    482c:	b9 01       	movw	r22, r18
    482e:	4a e0       	ldi	r20, 0x0A	; 10
    4830:	50 e0       	ldi	r21, 0x00	; 0
    4832:	0e 94 95 35 	call	0x6b2a	; 0x6b2a <itoa>
	LCD_writeString(numInAsci);
    4836:	ce 01       	movw	r24, r28
    4838:	01 96       	adiw	r24, 0x01	; 1
    483a:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
}
    483e:	62 96       	adiw	r28, 0x12	; 18
    4840:	0f b6       	in	r0, 0x3f	; 63
    4842:	f8 94       	cli
    4844:	de bf       	out	0x3e, r29	; 62
    4846:	0f be       	out	0x3f, r0	; 63
    4848:	cd bf       	out	0x3d, r28	; 61
    484a:	cf 91       	pop	r28
    484c:	df 91       	pop	r29
    484e:	08 95       	ret

00004850 <LCD_clearScreen>:

void LCD_clearScreen()
{
    4850:	df 93       	push	r29
    4852:	cf 93       	push	r28
    4854:	cd b7       	in	r28, 0x3d	; 61
    4856:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    4858:	81 e0       	ldi	r24, 0x01	; 1
    485a:	0e 94 7d 19 	call	0x32fa	; 0x32fa <LCD_sendCommand>
}
    485e:	cf 91       	pop	r28
    4860:	df 91       	pop	r29
    4862:	08 95       	ret

00004864 <main>:
#include "external_eeprom.h"
#include "twi.h"
#include "common_macros.h"

int main()
{
    4864:	0f 93       	push	r16
    4866:	1f 93       	push	r17
    4868:	df 93       	push	r29
    486a:	cf 93       	push	r28
    486c:	cd b7       	in	r28, 0x3d	; 61
    486e:	de b7       	in	r29, 0x3e	; 62
    4870:	c4 53       	subi	r28, 0x34	; 52
    4872:	d1 40       	sbci	r29, 0x01	; 1
    4874:	0f b6       	in	r0, 0x3f	; 63
    4876:	f8 94       	cli
    4878:	de bf       	out	0x3e, r29	; 62
    487a:	0f be       	out	0x3f, r0	; 63
    487c:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    487e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <LCD_init>
	TWI_ConfigType twi_conf = {0b00000010,400000};
    4882:	ce 01       	movw	r24, r28
    4884:	81 50       	subi	r24, 0x01	; 1
    4886:	9f 4f       	sbci	r25, 0xFF	; 255
    4888:	c0 5d       	subi	r28, 0xD0	; 208
    488a:	de 4f       	sbci	r29, 0xFE	; 254
    488c:	99 83       	std	Y+1, r25	; 0x01
    488e:	88 83       	st	Y, r24
    4890:	c0 53       	subi	r28, 0x30	; 48
    4892:	d1 40       	sbci	r29, 0x01	; 1
    4894:	4e ef       	ldi	r20, 0xFE	; 254
    4896:	51 e0       	ldi	r21, 0x01	; 1
    4898:	ce 5c       	subi	r28, 0xCE	; 206
    489a:	de 4f       	sbci	r29, 0xFE	; 254
    489c:	59 83       	std	Y+1, r21	; 0x01
    489e:	48 83       	st	Y, r20
    48a0:	c2 53       	subi	r28, 0x32	; 50
    48a2:	d1 40       	sbci	r29, 0x01	; 1
    48a4:	55 e0       	ldi	r21, 0x05	; 5
    48a6:	cc 5c       	subi	r28, 0xCC	; 204
    48a8:	de 4f       	sbci	r29, 0xFE	; 254
    48aa:	58 83       	st	Y, r21
    48ac:	c4 53       	subi	r28, 0x34	; 52
    48ae:	d1 40       	sbci	r29, 0x01	; 1
    48b0:	ce 5c       	subi	r28, 0xCE	; 206
    48b2:	de 4f       	sbci	r29, 0xFE	; 254
    48b4:	a8 81       	ld	r26, Y
    48b6:	b9 81       	ldd	r27, Y+1	; 0x01
    48b8:	c2 53       	subi	r28, 0x32	; 50
    48ba:	d1 40       	sbci	r29, 0x01	; 1
    48bc:	0c 90       	ld	r0, X
    48be:	ce 5c       	subi	r28, 0xCE	; 206
    48c0:	de 4f       	sbci	r29, 0xFE	; 254
    48c2:	e8 81       	ld	r30, Y
    48c4:	f9 81       	ldd	r31, Y+1	; 0x01
    48c6:	c2 53       	subi	r28, 0x32	; 50
    48c8:	d1 40       	sbci	r29, 0x01	; 1
    48ca:	31 96       	adiw	r30, 0x01	; 1
    48cc:	ce 5c       	subi	r28, 0xCE	; 206
    48ce:	de 4f       	sbci	r29, 0xFE	; 254
    48d0:	f9 83       	std	Y+1, r31	; 0x01
    48d2:	e8 83       	st	Y, r30
    48d4:	c2 53       	subi	r28, 0x32	; 50
    48d6:	d1 40       	sbci	r29, 0x01	; 1
    48d8:	c0 5d       	subi	r28, 0xD0	; 208
    48da:	de 4f       	sbci	r29, 0xFE	; 254
    48dc:	a8 81       	ld	r26, Y
    48de:	b9 81       	ldd	r27, Y+1	; 0x01
    48e0:	c0 53       	subi	r28, 0x30	; 48
    48e2:	d1 40       	sbci	r29, 0x01	; 1
    48e4:	0c 92       	st	X, r0
    48e6:	c0 5d       	subi	r28, 0xD0	; 208
    48e8:	de 4f       	sbci	r29, 0xFE	; 254
    48ea:	e8 81       	ld	r30, Y
    48ec:	f9 81       	ldd	r31, Y+1	; 0x01
    48ee:	c0 53       	subi	r28, 0x30	; 48
    48f0:	d1 40       	sbci	r29, 0x01	; 1
    48f2:	31 96       	adiw	r30, 0x01	; 1
    48f4:	c0 5d       	subi	r28, 0xD0	; 208
    48f6:	de 4f       	sbci	r29, 0xFE	; 254
    48f8:	f9 83       	std	Y+1, r31	; 0x01
    48fa:	e8 83       	st	Y, r30
    48fc:	c0 53       	subi	r28, 0x30	; 48
    48fe:	d1 40       	sbci	r29, 0x01	; 1
    4900:	cc 5c       	subi	r28, 0xCC	; 204
    4902:	de 4f       	sbci	r29, 0xFE	; 254
    4904:	f8 81       	ld	r31, Y
    4906:	c4 53       	subi	r28, 0x34	; 52
    4908:	d1 40       	sbci	r29, 0x01	; 1
    490a:	f1 50       	subi	r31, 0x01	; 1
    490c:	cc 5c       	subi	r28, 0xCC	; 204
    490e:	de 4f       	sbci	r29, 0xFE	; 254
    4910:	f8 83       	st	Y, r31
    4912:	c4 53       	subi	r28, 0x34	; 52
    4914:	d1 40       	sbci	r29, 0x01	; 1
    4916:	cc 5c       	subi	r28, 0xCC	; 204
    4918:	de 4f       	sbci	r29, 0xFE	; 254
    491a:	28 81       	ld	r18, Y
    491c:	c4 53       	subi	r28, 0x34	; 52
    491e:	d1 40       	sbci	r29, 0x01	; 1
    4920:	22 23       	and	r18, r18
    4922:	31 f6       	brne	.-116    	; 0x48b0 <main+0x4c>
	TWI_init(&twi_conf); /*init I2C to send password to eeprom*/
    4924:	ce 01       	movw	r24, r28
    4926:	81 50       	subi	r24, 0x01	; 1
    4928:	9f 4f       	sbci	r25, 0xFF	; 255
    492a:	0e 94 9d 34 	call	0x693a	; 0x693a <TWI_init>


	GPIO_writePort(PORTC_ID, 0XF0);
    492e:	82 e0       	ldi	r24, 0x02	; 2
    4930:	60 ef       	ldi	r22, 0xF0	; 240
    4932:	0e 94 6d 17 	call	0x2eda	; 0x2eda <GPIO_writePort>
	/*Intro of the device*/
	LCD_clearScreen();
    4936:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
	LCD_moveCursor(0,2);
    493a:	80 e0       	ldi	r24, 0x00	; 0
    493c:	62 e0       	ldi	r22, 0x02	; 2
    493e:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
	LCD_writeString("Wellcom to ");
    4942:	8d e7       	ldi	r24, 0x7D	; 125
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
	LCD_moveCursor(1,3);
    494a:	81 e0       	ldi	r24, 0x01	; 1
    494c:	63 e0       	ldi	r22, 0x03	; 3
    494e:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
	LCD_writeString("IC tester");
    4952:	89 e8       	ldi	r24, 0x89	; 137
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
	//	_delay_ms(1000);
	LCD_clearScreen();
    495a:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
//		EEPROM_writeByte(1, 0x02);


	while(1)
	{
		LCD_writeString("+ : Testing");  /*to test an IC*/
    495e:	83 e9       	ldi	r24, 0x93	; 147
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
		LCD_moveCursor(1,0);
    4966:	81 e0       	ldi	r24, 0x01	; 1
    4968:	60 e0       	ldi	r22, 0x00	; 0
    496a:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
		LCD_writeString("- : Add new test"); /*to add new IC*/
    496e:	8f e9       	ldi	r24, 0x9F	; 159
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>

		pressed_key = KEYPAD_getPressedKey();
    4976:	0e 94 f6 17 	call	0x2fec	; 0x2fec <KEYPAD_getPressedKey>
    497a:	fe 01       	movw	r30, r28
    497c:	e2 50       	subi	r30, 0x02	; 2
    497e:	ff 4f       	sbci	r31, 0xFF	; 255
    4980:	80 83       	st	Z, r24
    4982:	fe 01       	movw	r30, r28
    4984:	e1 53       	subi	r30, 0x31	; 49
    4986:	ff 4f       	sbci	r31, 0xFF	; 255
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	aa ef       	ldi	r26, 0xFA	; 250
    498e:	b3 e4       	ldi	r27, 0x43	; 67
    4990:	80 83       	st	Z, r24
    4992:	91 83       	std	Z+1, r25	; 0x01
    4994:	a2 83       	std	Z+2, r26	; 0x02
    4996:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4998:	8e 01       	movw	r16, r28
    499a:	05 53       	subi	r16, 0x35	; 53
    499c:	1f 4f       	sbci	r17, 0xFF	; 255
    499e:	fe 01       	movw	r30, r28
    49a0:	e1 53       	subi	r30, 0x31	; 49
    49a2:	ff 4f       	sbci	r31, 0xFF	; 255
    49a4:	60 81       	ld	r22, Z
    49a6:	71 81       	ldd	r23, Z+1	; 0x01
    49a8:	82 81       	ldd	r24, Z+2	; 0x02
    49aa:	93 81       	ldd	r25, Z+3	; 0x03
    49ac:	20 e0       	ldi	r18, 0x00	; 0
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	4a e7       	ldi	r20, 0x7A	; 122
    49b2:	55 e4       	ldi	r21, 0x45	; 69
    49b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    49b8:	dc 01       	movw	r26, r24
    49ba:	cb 01       	movw	r24, r22
    49bc:	f8 01       	movw	r30, r16
    49be:	80 83       	st	Z, r24
    49c0:	91 83       	std	Z+1, r25	; 0x01
    49c2:	a2 83       	std	Z+2, r26	; 0x02
    49c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49c6:	fe 01       	movw	r30, r28
    49c8:	e5 53       	subi	r30, 0x35	; 53
    49ca:	ff 4f       	sbci	r31, 0xFF	; 255
    49cc:	60 81       	ld	r22, Z
    49ce:	71 81       	ldd	r23, Z+1	; 0x01
    49d0:	82 81       	ldd	r24, Z+2	; 0x02
    49d2:	93 81       	ldd	r25, Z+3	; 0x03
    49d4:	20 e0       	ldi	r18, 0x00	; 0
    49d6:	30 e0       	ldi	r19, 0x00	; 0
    49d8:	40 e8       	ldi	r20, 0x80	; 128
    49da:	5f e3       	ldi	r21, 0x3F	; 63
    49dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    49e0:	88 23       	and	r24, r24
    49e2:	44 f4       	brge	.+16     	; 0x49f4 <main+0x190>
		__ticks = 1;
    49e4:	fe 01       	movw	r30, r28
    49e6:	e7 53       	subi	r30, 0x37	; 55
    49e8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ea:	81 e0       	ldi	r24, 0x01	; 1
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	91 83       	std	Z+1, r25	; 0x01
    49f0:	80 83       	st	Z, r24
    49f2:	64 c0       	rjmp	.+200    	; 0x4abc <main+0x258>
	else if (__tmp > 65535)
    49f4:	fe 01       	movw	r30, r28
    49f6:	e5 53       	subi	r30, 0x35	; 53
    49f8:	ff 4f       	sbci	r31, 0xFF	; 255
    49fa:	60 81       	ld	r22, Z
    49fc:	71 81       	ldd	r23, Z+1	; 0x01
    49fe:	82 81       	ldd	r24, Z+2	; 0x02
    4a00:	93 81       	ldd	r25, Z+3	; 0x03
    4a02:	20 e0       	ldi	r18, 0x00	; 0
    4a04:	3f ef       	ldi	r19, 0xFF	; 255
    4a06:	4f e7       	ldi	r20, 0x7F	; 127
    4a08:	57 e4       	ldi	r21, 0x47	; 71
    4a0a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4a0e:	18 16       	cp	r1, r24
    4a10:	0c f0       	brlt	.+2      	; 0x4a14 <main+0x1b0>
    4a12:	43 c0       	rjmp	.+134    	; 0x4a9a <main+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a14:	fe 01       	movw	r30, r28
    4a16:	e1 53       	subi	r30, 0x31	; 49
    4a18:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1a:	60 81       	ld	r22, Z
    4a1c:	71 81       	ldd	r23, Z+1	; 0x01
    4a1e:	82 81       	ldd	r24, Z+2	; 0x02
    4a20:	93 81       	ldd	r25, Z+3	; 0x03
    4a22:	20 e0       	ldi	r18, 0x00	; 0
    4a24:	30 e0       	ldi	r19, 0x00	; 0
    4a26:	40 e2       	ldi	r20, 0x20	; 32
    4a28:	51 e4       	ldi	r21, 0x41	; 65
    4a2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4a2e:	dc 01       	movw	r26, r24
    4a30:	cb 01       	movw	r24, r22
    4a32:	8e 01       	movw	r16, r28
    4a34:	07 53       	subi	r16, 0x37	; 55
    4a36:	1f 4f       	sbci	r17, 0xFF	; 255
    4a38:	bc 01       	movw	r22, r24
    4a3a:	cd 01       	movw	r24, r26
    4a3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4a40:	dc 01       	movw	r26, r24
    4a42:	cb 01       	movw	r24, r22
    4a44:	f8 01       	movw	r30, r16
    4a46:	91 83       	std	Z+1, r25	; 0x01
    4a48:	80 83       	st	Z, r24
    4a4a:	1f c0       	rjmp	.+62     	; 0x4a8a <main+0x226>
    4a4c:	fe 01       	movw	r30, r28
    4a4e:	e9 53       	subi	r30, 0x39	; 57
    4a50:	ff 4f       	sbci	r31, 0xFF	; 255
    4a52:	80 e9       	ldi	r24, 0x90	; 144
    4a54:	91 e0       	ldi	r25, 0x01	; 1
    4a56:	91 83       	std	Z+1, r25	; 0x01
    4a58:	80 83       	st	Z, r24
    4a5a:	fe 01       	movw	r30, r28
    4a5c:	e9 53       	subi	r30, 0x39	; 57
    4a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a60:	80 81       	ld	r24, Z
    4a62:	91 81       	ldd	r25, Z+1	; 0x01
    4a64:	01 97       	sbiw	r24, 0x01	; 1
    4a66:	f1 f7       	brne	.-4      	; 0x4a64 <main+0x200>
    4a68:	fe 01       	movw	r30, r28
    4a6a:	e9 53       	subi	r30, 0x39	; 57
    4a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6e:	91 83       	std	Z+1, r25	; 0x01
    4a70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a72:	de 01       	movw	r26, r28
    4a74:	a7 53       	subi	r26, 0x37	; 55
    4a76:	bf 4f       	sbci	r27, 0xFF	; 255
    4a78:	fe 01       	movw	r30, r28
    4a7a:	e7 53       	subi	r30, 0x37	; 55
    4a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7e:	80 81       	ld	r24, Z
    4a80:	91 81       	ldd	r25, Z+1	; 0x01
    4a82:	01 97       	sbiw	r24, 0x01	; 1
    4a84:	11 96       	adiw	r26, 0x01	; 1
    4a86:	9c 93       	st	X, r25
    4a88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a8a:	fe 01       	movw	r30, r28
    4a8c:	e7 53       	subi	r30, 0x37	; 55
    4a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a90:	80 81       	ld	r24, Z
    4a92:	91 81       	ldd	r25, Z+1	; 0x01
    4a94:	00 97       	sbiw	r24, 0x00	; 0
    4a96:	d1 f6       	brne	.-76     	; 0x4a4c <main+0x1e8>
    4a98:	28 c0       	rjmp	.+80     	; 0x4aea <main+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a9a:	8e 01       	movw	r16, r28
    4a9c:	07 53       	subi	r16, 0x37	; 55
    4a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    4aa0:	fe 01       	movw	r30, r28
    4aa2:	e5 53       	subi	r30, 0x35	; 53
    4aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa6:	60 81       	ld	r22, Z
    4aa8:	71 81       	ldd	r23, Z+1	; 0x01
    4aaa:	82 81       	ldd	r24, Z+2	; 0x02
    4aac:	93 81       	ldd	r25, Z+3	; 0x03
    4aae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4ab2:	dc 01       	movw	r26, r24
    4ab4:	cb 01       	movw	r24, r22
    4ab6:	f8 01       	movw	r30, r16
    4ab8:	91 83       	std	Z+1, r25	; 0x01
    4aba:	80 83       	st	Z, r24
    4abc:	de 01       	movw	r26, r28
    4abe:	ab 53       	subi	r26, 0x3B	; 59
    4ac0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ac2:	fe 01       	movw	r30, r28
    4ac4:	e7 53       	subi	r30, 0x37	; 55
    4ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac8:	80 81       	ld	r24, Z
    4aca:	91 81       	ldd	r25, Z+1	; 0x01
    4acc:	11 96       	adiw	r26, 0x01	; 1
    4ace:	9c 93       	st	X, r25
    4ad0:	8e 93       	st	-X, r24
    4ad2:	fe 01       	movw	r30, r28
    4ad4:	eb 53       	subi	r30, 0x3B	; 59
    4ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad8:	80 81       	ld	r24, Z
    4ada:	91 81       	ldd	r25, Z+1	; 0x01
    4adc:	01 97       	sbiw	r24, 0x01	; 1
    4ade:	f1 f7       	brne	.-4      	; 0x4adc <main+0x278>
    4ae0:	fe 01       	movw	r30, r28
    4ae2:	eb 53       	subi	r30, 0x3B	; 59
    4ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae6:	91 83       	std	Z+1, r25	; 0x01
    4ae8:	80 83       	st	Z, r24
		_delay_ms(DELAY_BETWEEN_CLICKS_IN_MS);



		/********************** Testing the IC *************************/
		if( '+' == pressed_key )
    4aea:	fe 01       	movw	r30, r28
    4aec:	e2 50       	subi	r30, 0x02	; 2
    4aee:	ff 4f       	sbci	r31, 0xFF	; 255
    4af0:	80 81       	ld	r24, Z
    4af2:	8b 32       	cpi	r24, 0x2B	; 43
    4af4:	09 f0       	breq	.+2      	; 0x4af8 <main+0x294>
    4af6:	f0 c3       	rjmp	.+2016   	; 0x52d8 <main+0xa74>
		{ /*testing an IC*/

			LCD_clearScreen();
    4af8:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
			LCD_writeString("+ : Enter number");
    4afc:	80 eb       	ldi	r24, 0xB0	; 176
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
			LCD_moveCursor(1,0);
    4b04:	81 e0       	ldi	r24, 0x01	; 1
    4b06:	60 e0       	ldi	r22, 0x00	; 0
    4b08:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
			LCD_writeString("- : Auto test");
    4b0c:	81 ec       	ldi	r24, 0xC1	; 193
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>


			pressed_key = KEYPAD_getPressedKey();
    4b14:	0e 94 f6 17 	call	0x2fec	; 0x2fec <KEYPAD_getPressedKey>
    4b18:	fe 01       	movw	r30, r28
    4b1a:	e2 50       	subi	r30, 0x02	; 2
    4b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1e:	80 83       	st	Z, r24

			/***************** The user will enter the IC number **********************/
			if( '+' == pressed_key )
    4b20:	fe 01       	movw	r30, r28
    4b22:	e2 50       	subi	r30, 0x02	; 2
    4b24:	ff 4f       	sbci	r31, 0xFF	; 255
    4b26:	80 81       	ld	r24, Z
    4b28:	8b 32       	cpi	r24, 0x2B	; 43
    4b2a:	11 f0       	breq	.+4      	; 0x4b30 <main+0x2cc>
    4b2c:	0c 94 99 34 	jmp	0x6932	; 0x6932 <main+0x20ce>
			{

				LCD_clearScreen();
    4b30:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
				LCD_writeString("Enter IC number");
    4b34:	8f ec       	ldi	r24, 0xCF	; 207
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>

				/*Take the number from user*/
				uint8  IC_number[MAX_IC_NAME_SIZE+1]; /*The maximum size of name*/
				uint8 size;

				size = take_input_from_keypad(IC_number); /*The entered IC number*/
    4b3c:	ce 01       	movw	r24, r28
    4b3e:	8c 5f       	subi	r24, 0xFC	; 252
    4b40:	9e 4f       	sbci	r25, 0xFE	; 254
    4b42:	0e 94 9b 05 	call	0xb36	; 0xb36 <take_input_from_keypad>
    4b46:	fe 01       	movw	r30, r28
    4b48:	e3 50       	subi	r30, 0x03	; 3
    4b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4c:	80 83       	st	Z, r24

				if( size > MAX_IC_NAME_SIZE || size == 0 )
    4b4e:	fe 01       	movw	r30, r28
    4b50:	e3 50       	subi	r30, 0x03	; 3
    4b52:	ff 4f       	sbci	r31, 0xFF	; 255
    4b54:	80 81       	ld	r24, Z
    4b56:	87 30       	cpi	r24, 0x07	; 7
    4b58:	30 f4       	brcc	.+12     	; 0x4b66 <main+0x302>
    4b5a:	fe 01       	movw	r30, r28
    4b5c:	e3 50       	subi	r30, 0x03	; 3
    4b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b60:	80 81       	ld	r24, Z
    4b62:	88 23       	and	r24, r24
    4b64:	21 f4       	brne	.+8      	; 0x4b6e <main+0x30a>
				{ /*if the size is greater than the max size, so I will display an error massage and continue*/
					max_size_error_display(MAX_IC_NAME_SIZE);
    4b66:	86 e0       	ldi	r24, 0x06	; 6
    4b68:	0e 94 70 06 	call	0xce0	; 0xce0 <max_size_error_display>
    4b6c:	f8 ce       	rjmp	.-528    	; 0x495e <main+0xfa>
					continue;
				}

				/*Shifting the number to be like 007408*/
				sint8 j=MAX_IC_NAME_SIZE-1;
    4b6e:	fe 01       	movw	r30, r28
    4b70:	e4 50       	subi	r30, 0x04	; 4
    4b72:	ff 4f       	sbci	r31, 0xFF	; 255
    4b74:	85 e0       	ldi	r24, 0x05	; 5
    4b76:	80 83       	st	Z, r24
				for(sint8 i=size-1 ;i>=0 ; i--,j--)
    4b78:	fe 01       	movw	r30, r28
    4b7a:	e3 50       	subi	r30, 0x03	; 3
    4b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7e:	80 81       	ld	r24, Z
    4b80:	81 50       	subi	r24, 0x01	; 1
    4b82:	fe 01       	movw	r30, r28
    4b84:	e4 51       	subi	r30, 0x14	; 20
    4b86:	ff 4f       	sbci	r31, 0xFF	; 255
    4b88:	80 83       	st	Z, r24
    4b8a:	30 c0       	rjmp	.+96     	; 0x4bec <main+0x388>
				{
					IC_number[j] = IC_number[i];
    4b8c:	fe 01       	movw	r30, r28
    4b8e:	e4 50       	subi	r30, 0x04	; 4
    4b90:	ff 4f       	sbci	r31, 0xFF	; 255
    4b92:	80 81       	ld	r24, Z
    4b94:	48 2f       	mov	r20, r24
    4b96:	55 27       	eor	r21, r21
    4b98:	47 fd       	sbrc	r20, 7
    4b9a:	50 95       	com	r21
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	e4 51       	subi	r30, 0x14	; 20
    4ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba2:	80 81       	ld	r24, Z
    4ba4:	28 2f       	mov	r18, r24
    4ba6:	33 27       	eor	r19, r19
    4ba8:	27 fd       	sbrc	r18, 7
    4baa:	30 95       	com	r19
    4bac:	ce 01       	movw	r24, r28
    4bae:	8c 5f       	subi	r24, 0xFC	; 252
    4bb0:	9e 4f       	sbci	r25, 0xFE	; 254
    4bb2:	fc 01       	movw	r30, r24
    4bb4:	e2 0f       	add	r30, r18
    4bb6:	f3 1f       	adc	r31, r19
    4bb8:	20 81       	ld	r18, Z
    4bba:	ce 01       	movw	r24, r28
    4bbc:	8c 5f       	subi	r24, 0xFC	; 252
    4bbe:	9e 4f       	sbci	r25, 0xFE	; 254
    4bc0:	fc 01       	movw	r30, r24
    4bc2:	e4 0f       	add	r30, r20
    4bc4:	f5 1f       	adc	r31, r21
    4bc6:	20 83       	st	Z, r18
					continue;
				}

				/*Shifting the number to be like 007408*/
				sint8 j=MAX_IC_NAME_SIZE-1;
				for(sint8 i=size-1 ;i>=0 ; i--,j--)
    4bc8:	de 01       	movw	r26, r28
    4bca:	a4 51       	subi	r26, 0x14	; 20
    4bcc:	bf 4f       	sbci	r27, 0xFF	; 255
    4bce:	fe 01       	movw	r30, r28
    4bd0:	e4 51       	subi	r30, 0x14	; 20
    4bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd4:	80 81       	ld	r24, Z
    4bd6:	81 50       	subi	r24, 0x01	; 1
    4bd8:	8c 93       	st	X, r24
    4bda:	de 01       	movw	r26, r28
    4bdc:	a4 50       	subi	r26, 0x04	; 4
    4bde:	bf 4f       	sbci	r27, 0xFF	; 255
    4be0:	fe 01       	movw	r30, r28
    4be2:	e4 50       	subi	r30, 0x04	; 4
    4be4:	ff 4f       	sbci	r31, 0xFF	; 255
    4be6:	80 81       	ld	r24, Z
    4be8:	81 50       	subi	r24, 0x01	; 1
    4bea:	8c 93       	st	X, r24
    4bec:	fe 01       	movw	r30, r28
    4bee:	e4 51       	subi	r30, 0x14	; 20
    4bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf2:	80 81       	ld	r24, Z
    4bf4:	88 23       	and	r24, r24
    4bf6:	54 f6       	brge	.-108    	; 0x4b8c <main+0x328>
				{
					IC_number[j] = IC_number[i];

				}
				/*put zeros in the empty places*/
				for(int i=0;i<MAX_IC_NAME_SIZE-size;i++)
    4bf8:	fe 01       	movw	r30, r28
    4bfa:	e6 51       	subi	r30, 0x16	; 22
    4bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfe:	11 82       	std	Z+1, r1	; 0x01
    4c00:	10 82       	st	Z, r1
    4c02:	18 c0       	rjmp	.+48     	; 0x4c34 <main+0x3d0>
					IC_number[i] = 0;
    4c04:	fe 01       	movw	r30, r28
    4c06:	e6 51       	subi	r30, 0x16	; 22
    4c08:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0a:	20 81       	ld	r18, Z
    4c0c:	31 81       	ldd	r19, Z+1	; 0x01
    4c0e:	ce 01       	movw	r24, r28
    4c10:	8c 5f       	subi	r24, 0xFC	; 252
    4c12:	9e 4f       	sbci	r25, 0xFE	; 254
    4c14:	fc 01       	movw	r30, r24
    4c16:	e2 0f       	add	r30, r18
    4c18:	f3 1f       	adc	r31, r19
    4c1a:	10 82       	st	Z, r1
				{
					IC_number[j] = IC_number[i];

				}
				/*put zeros in the empty places*/
				for(int i=0;i<MAX_IC_NAME_SIZE-size;i++)
    4c1c:	de 01       	movw	r26, r28
    4c1e:	a6 51       	subi	r26, 0x16	; 22
    4c20:	bf 4f       	sbci	r27, 0xFF	; 255
    4c22:	fe 01       	movw	r30, r28
    4c24:	e6 51       	subi	r30, 0x16	; 22
    4c26:	ff 4f       	sbci	r31, 0xFF	; 255
    4c28:	80 81       	ld	r24, Z
    4c2a:	91 81       	ldd	r25, Z+1	; 0x01
    4c2c:	01 96       	adiw	r24, 0x01	; 1
    4c2e:	11 96       	adiw	r26, 0x01	; 1
    4c30:	9c 93       	st	X, r25
    4c32:	8e 93       	st	-X, r24
    4c34:	fe 01       	movw	r30, r28
    4c36:	e3 50       	subi	r30, 0x03	; 3
    4c38:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3a:	80 81       	ld	r24, Z
    4c3c:	28 2f       	mov	r18, r24
    4c3e:	30 e0       	ldi	r19, 0x00	; 0
    4c40:	86 e0       	ldi	r24, 0x06	; 6
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	ac 01       	movw	r20, r24
    4c46:	42 1b       	sub	r20, r18
    4c48:	53 0b       	sbc	r21, r19
    4c4a:	9a 01       	movw	r18, r20
    4c4c:	fe 01       	movw	r30, r28
    4c4e:	e6 51       	subi	r30, 0x16	; 22
    4c50:	ff 4f       	sbci	r31, 0xFF	; 255
    4c52:	80 81       	ld	r24, Z
    4c54:	91 81       	ldd	r25, Z+1	; 0x01
    4c56:	82 17       	cp	r24, r18
    4c58:	93 07       	cpc	r25, r19
    4c5a:	a4 f2       	brlt	.-88     	; 0x4c04 <main+0x3a0>
				/*************************************************
				 *  search this IC number in EEPROM and
				 *  fill those variables pins_number,test_casess_number
				 *  io_map and test_case
				 * ************************************************/
				uint8  pins_number        =  16;
    4c5c:	fe 01       	movw	r30, r28
    4c5e:	e5 50       	subi	r30, 0x05	; 5
    4c60:	ff 4f       	sbci	r31, 0xFF	; 255
    4c62:	80 e1       	ldi	r24, 0x10	; 16
    4c64:	80 83       	st	Z, r24
				uint8  test_casess_number =  1;      //0b00010010100100
    4c66:	fe 01       	movw	r30, r28
    4c68:	e5 5f       	subi	r30, 0xF5	; 245
    4c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c6c:	81 e0       	ldi	r24, 0x01	; 1
    4c6e:	80 83       	st	Z, r24
				uint32 io_map             =  0;
    4c70:	fe 01       	movw	r30, r28
    4c72:	e4 5f       	subi	r30, 0xF4	; 244
    4c74:	fe 4f       	sbci	r31, 0xFE	; 254
    4c76:	10 82       	st	Z, r1
    4c78:	11 82       	std	Z+1, r1	; 0x01
    4c7a:	12 82       	std	Z+2, r1	; 0x02
    4c7c:	13 82       	std	Z+3, r1	; 0x03
				uint32 test_case =0 ;
    4c7e:	fe 01       	movw	r30, r28
    4c80:	e0 5f       	subi	r30, 0xF0	; 240
    4c82:	fe 4f       	sbci	r31, 0xFE	; 254
    4c84:	10 82       	st	Z, r1
    4c86:	11 82       	std	Z+1, r1	; 0x01
    4c88:	12 82       	std	Z+2, r1	; 0x02
    4c8a:	13 82       	std	Z+3, r1	; 0x03
				uint16 first_IC_address ;


			   uint32 IC_number_in_BCD = change_array_to_BCD(IC_number,MAX_IC_NAME_SIZE); /*contains the IC number in BCD form*/
    4c8c:	ce 01       	movw	r24, r28
    4c8e:	8c 5f       	subi	r24, 0xFC	; 252
    4c90:	9e 4f       	sbci	r25, 0xFE	; 254
    4c92:	66 e0       	ldi	r22, 0x06	; 6
    4c94:	0e 94 c8 12 	call	0x2590	; 0x2590 <change_array_to_BCD>
    4c98:	dc 01       	movw	r26, r24
    4c9a:	cb 01       	movw	r24, r22
    4c9c:	fe 01       	movw	r30, r28
    4c9e:	eb 50       	subi	r30, 0x0B	; 11
    4ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca2:	80 83       	st	Z, r24
    4ca4:	91 83       	std	Z+1, r25	; 0x01
    4ca6:	a2 83       	std	Z+2, r26	; 0x02
    4ca8:	b3 83       	std	Z+3, r27	; 0x03

				first_IC_address   = search_IC_name(IC_number_in_BCD , &test_casess_number , &io_map);
    4caa:	8e 01       	movw	r16, r28
    4cac:	04 5f       	subi	r16, 0xF4	; 244
    4cae:	1e 4f       	sbci	r17, 0xFE	; 254
    4cb0:	fe 01       	movw	r30, r28
    4cb2:	eb 50       	subi	r30, 0x0B	; 11
    4cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb6:	80 81       	ld	r24, Z
    4cb8:	91 81       	ldd	r25, Z+1	; 0x01
    4cba:	a2 81       	ldd	r26, Z+2	; 0x02
    4cbc:	b3 81       	ldd	r27, Z+3	; 0x03
    4cbe:	9e 01       	movw	r18, r28
    4cc0:	25 5f       	subi	r18, 0xF5	; 245
    4cc2:	3e 4f       	sbci	r19, 0xFE	; 254
    4cc4:	bc 01       	movw	r22, r24
    4cc6:	cd 01       	movw	r24, r26
    4cc8:	a9 01       	movw	r20, r18
    4cca:	98 01       	movw	r18, r16
    4ccc:	0e 94 19 08 	call	0x1032	; 0x1032 <search_IC_name>
    4cd0:	dc 01       	movw	r26, r24
    4cd2:	cb 01       	movw	r24, r22
    4cd4:	fe 01       	movw	r30, r28
    4cd6:	e7 50       	subi	r30, 0x07	; 7
    4cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cda:	91 83       	std	Z+1, r25	; 0x01
    4cdc:	80 83       	st	Z, r24
//				io_map             =  0b1001000000100100;  //0b00010010100100
				uint16 test_case_address = first_IC_address + 7 ; /*Add 7 to points on first test case*/
    4cde:	de 01       	movw	r26, r28
    4ce0:	ad 50       	subi	r26, 0x0D	; 13
    4ce2:	bf 4f       	sbci	r27, 0xFF	; 255
    4ce4:	fe 01       	movw	r30, r28
    4ce6:	e7 50       	subi	r30, 0x07	; 7
    4ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cea:	80 81       	ld	r24, Z
    4cec:	91 81       	ldd	r25, Z+1	; 0x01
    4cee:	07 96       	adiw	r24, 0x07	; 7
    4cf0:	11 96       	adiw	r26, 0x01	; 1
    4cf2:	9c 93       	st	X, r25
    4cf4:	8e 93       	st	-X, r24

				if( first_IC_address == -1)/*The IC is not found*/
    4cf6:	fe 01       	movw	r30, r28
    4cf8:	e7 50       	subi	r30, 0x07	; 7
    4cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfc:	80 81       	ld	r24, Z
    4cfe:	91 81       	ldd	r25, Z+1	; 0x01
    4d00:	5f ef       	ldi	r21, 0xFF	; 255
    4d02:	8f 3f       	cpi	r24, 0xFF	; 255
    4d04:	95 07       	cpc	r25, r21
    4d06:	09 f0       	breq	.+2      	; 0x4d0a <main+0x4a6>
    4d08:	bc c0       	rjmp	.+376    	; 0x4e82 <main+0x61e>
				{
					LCD_clearScreen();
    4d0a:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
					LCD_writeString("Not found the IC");
    4d0e:	8f ed       	ldi	r24, 0xDF	; 223
    4d10:	90 e0       	ldi	r25, 0x00	; 0
    4d12:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
    4d16:	fe 01       	movw	r30, r28
    4d18:	ef 53       	subi	r30, 0x3F	; 63
    4d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1c:	80 e0       	ldi	r24, 0x00	; 0
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	aa e7       	ldi	r26, 0x7A	; 122
    4d22:	b4 e4       	ldi	r27, 0x44	; 68
    4d24:	80 83       	st	Z, r24
    4d26:	91 83       	std	Z+1, r25	; 0x01
    4d28:	a2 83       	std	Z+2, r26	; 0x02
    4d2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d2c:	8e 01       	movw	r16, r28
    4d2e:	03 54       	subi	r16, 0x43	; 67
    4d30:	1f 4f       	sbci	r17, 0xFF	; 255
    4d32:	fe 01       	movw	r30, r28
    4d34:	ef 53       	subi	r30, 0x3F	; 63
    4d36:	ff 4f       	sbci	r31, 0xFF	; 255
    4d38:	60 81       	ld	r22, Z
    4d3a:	71 81       	ldd	r23, Z+1	; 0x01
    4d3c:	82 81       	ldd	r24, Z+2	; 0x02
    4d3e:	93 81       	ldd	r25, Z+3	; 0x03
    4d40:	20 e0       	ldi	r18, 0x00	; 0
    4d42:	30 e0       	ldi	r19, 0x00	; 0
    4d44:	4a e7       	ldi	r20, 0x7A	; 122
    4d46:	55 e4       	ldi	r21, 0x45	; 69
    4d48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4d4c:	dc 01       	movw	r26, r24
    4d4e:	cb 01       	movw	r24, r22
    4d50:	f8 01       	movw	r30, r16
    4d52:	80 83       	st	Z, r24
    4d54:	91 83       	std	Z+1, r25	; 0x01
    4d56:	a2 83       	std	Z+2, r26	; 0x02
    4d58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d5a:	fe 01       	movw	r30, r28
    4d5c:	e3 54       	subi	r30, 0x43	; 67
    4d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d60:	60 81       	ld	r22, Z
    4d62:	71 81       	ldd	r23, Z+1	; 0x01
    4d64:	82 81       	ldd	r24, Z+2	; 0x02
    4d66:	93 81       	ldd	r25, Z+3	; 0x03
    4d68:	20 e0       	ldi	r18, 0x00	; 0
    4d6a:	30 e0       	ldi	r19, 0x00	; 0
    4d6c:	40 e8       	ldi	r20, 0x80	; 128
    4d6e:	5f e3       	ldi	r21, 0x3F	; 63
    4d70:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4d74:	88 23       	and	r24, r24
    4d76:	44 f4       	brge	.+16     	; 0x4d88 <main+0x524>
		__ticks = 1;
    4d78:	fe 01       	movw	r30, r28
    4d7a:	e5 54       	subi	r30, 0x45	; 69
    4d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d7e:	81 e0       	ldi	r24, 0x01	; 1
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	91 83       	std	Z+1, r25	; 0x01
    4d84:	80 83       	st	Z, r24
    4d86:	64 c0       	rjmp	.+200    	; 0x4e50 <main+0x5ec>
	else if (__tmp > 65535)
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e3 54       	subi	r30, 0x43	; 67
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	60 81       	ld	r22, Z
    4d90:	71 81       	ldd	r23, Z+1	; 0x01
    4d92:	82 81       	ldd	r24, Z+2	; 0x02
    4d94:	93 81       	ldd	r25, Z+3	; 0x03
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	3f ef       	ldi	r19, 0xFF	; 255
    4d9a:	4f e7       	ldi	r20, 0x7F	; 127
    4d9c:	57 e4       	ldi	r21, 0x47	; 71
    4d9e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4da2:	18 16       	cp	r1, r24
    4da4:	0c f0       	brlt	.+2      	; 0x4da8 <main+0x544>
    4da6:	43 c0       	rjmp	.+134    	; 0x4e2e <main+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4da8:	fe 01       	movw	r30, r28
    4daa:	ef 53       	subi	r30, 0x3F	; 63
    4dac:	ff 4f       	sbci	r31, 0xFF	; 255
    4dae:	60 81       	ld	r22, Z
    4db0:	71 81       	ldd	r23, Z+1	; 0x01
    4db2:	82 81       	ldd	r24, Z+2	; 0x02
    4db4:	93 81       	ldd	r25, Z+3	; 0x03
    4db6:	20 e0       	ldi	r18, 0x00	; 0
    4db8:	30 e0       	ldi	r19, 0x00	; 0
    4dba:	40 e2       	ldi	r20, 0x20	; 32
    4dbc:	51 e4       	ldi	r21, 0x41	; 65
    4dbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4dc2:	dc 01       	movw	r26, r24
    4dc4:	cb 01       	movw	r24, r22
    4dc6:	8e 01       	movw	r16, r28
    4dc8:	05 54       	subi	r16, 0x45	; 69
    4dca:	1f 4f       	sbci	r17, 0xFF	; 255
    4dcc:	bc 01       	movw	r22, r24
    4dce:	cd 01       	movw	r24, r26
    4dd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4dd4:	dc 01       	movw	r26, r24
    4dd6:	cb 01       	movw	r24, r22
    4dd8:	f8 01       	movw	r30, r16
    4dda:	91 83       	std	Z+1, r25	; 0x01
    4ddc:	80 83       	st	Z, r24
    4dde:	1f c0       	rjmp	.+62     	; 0x4e1e <main+0x5ba>
    4de0:	fe 01       	movw	r30, r28
    4de2:	e7 54       	subi	r30, 0x47	; 71
    4de4:	ff 4f       	sbci	r31, 0xFF	; 255
    4de6:	80 e9       	ldi	r24, 0x90	; 144
    4de8:	91 e0       	ldi	r25, 0x01	; 1
    4dea:	91 83       	std	Z+1, r25	; 0x01
    4dec:	80 83       	st	Z, r24
    4dee:	fe 01       	movw	r30, r28
    4df0:	e7 54       	subi	r30, 0x47	; 71
    4df2:	ff 4f       	sbci	r31, 0xFF	; 255
    4df4:	80 81       	ld	r24, Z
    4df6:	91 81       	ldd	r25, Z+1	; 0x01
    4df8:	01 97       	sbiw	r24, 0x01	; 1
    4dfa:	f1 f7       	brne	.-4      	; 0x4df8 <main+0x594>
    4dfc:	fe 01       	movw	r30, r28
    4dfe:	e7 54       	subi	r30, 0x47	; 71
    4e00:	ff 4f       	sbci	r31, 0xFF	; 255
    4e02:	91 83       	std	Z+1, r25	; 0x01
    4e04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e06:	de 01       	movw	r26, r28
    4e08:	a5 54       	subi	r26, 0x45	; 69
    4e0a:	bf 4f       	sbci	r27, 0xFF	; 255
    4e0c:	fe 01       	movw	r30, r28
    4e0e:	e5 54       	subi	r30, 0x45	; 69
    4e10:	ff 4f       	sbci	r31, 0xFF	; 255
    4e12:	80 81       	ld	r24, Z
    4e14:	91 81       	ldd	r25, Z+1	; 0x01
    4e16:	01 97       	sbiw	r24, 0x01	; 1
    4e18:	11 96       	adiw	r26, 0x01	; 1
    4e1a:	9c 93       	st	X, r25
    4e1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e1e:	fe 01       	movw	r30, r28
    4e20:	e5 54       	subi	r30, 0x45	; 69
    4e22:	ff 4f       	sbci	r31, 0xFF	; 255
    4e24:	80 81       	ld	r24, Z
    4e26:	91 81       	ldd	r25, Z+1	; 0x01
    4e28:	00 97       	sbiw	r24, 0x00	; 0
    4e2a:	d1 f6       	brne	.-76     	; 0x4de0 <main+0x57c>
    4e2c:	27 c0       	rjmp	.+78     	; 0x4e7c <main+0x618>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e2e:	8e 01       	movw	r16, r28
    4e30:	05 54       	subi	r16, 0x45	; 69
    4e32:	1f 4f       	sbci	r17, 0xFF	; 255
    4e34:	fe 01       	movw	r30, r28
    4e36:	e3 54       	subi	r30, 0x43	; 67
    4e38:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3a:	60 81       	ld	r22, Z
    4e3c:	71 81       	ldd	r23, Z+1	; 0x01
    4e3e:	82 81       	ldd	r24, Z+2	; 0x02
    4e40:	93 81       	ldd	r25, Z+3	; 0x03
    4e42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4e46:	dc 01       	movw	r26, r24
    4e48:	cb 01       	movw	r24, r22
    4e4a:	f8 01       	movw	r30, r16
    4e4c:	91 83       	std	Z+1, r25	; 0x01
    4e4e:	80 83       	st	Z, r24
    4e50:	de 01       	movw	r26, r28
    4e52:	a9 54       	subi	r26, 0x49	; 73
    4e54:	bf 4f       	sbci	r27, 0xFF	; 255
    4e56:	fe 01       	movw	r30, r28
    4e58:	e5 54       	subi	r30, 0x45	; 69
    4e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5c:	80 81       	ld	r24, Z
    4e5e:	91 81       	ldd	r25, Z+1	; 0x01
    4e60:	8d 93       	st	X+, r24
    4e62:	9c 93       	st	X, r25
    4e64:	fe 01       	movw	r30, r28
    4e66:	e9 54       	subi	r30, 0x49	; 73
    4e68:	ff 4f       	sbci	r31, 0xFF	; 255
    4e6a:	80 81       	ld	r24, Z
    4e6c:	91 81       	ldd	r25, Z+1	; 0x01
    4e6e:	01 97       	sbiw	r24, 0x01	; 1
    4e70:	f1 f7       	brne	.-4      	; 0x4e6e <main+0x60a>
    4e72:	fe 01       	movw	r30, r28
    4e74:	e9 54       	subi	r30, 0x49	; 73
    4e76:	ff 4f       	sbci	r31, 0xFF	; 255
    4e78:	91 83       	std	Z+1, r25	; 0x01
    4e7a:	80 83       	st	Z, r24
					_delay_ms(1000);
					LCD_clearScreen();
    4e7c:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
    4e80:	6e cd       	rjmp	.-1316   	; 0x495e <main+0xfa>

				/*If I found the IC, so let's test all cases */
				uint8 is_true;  /* 0 for false, 1 for true */
				uint8 i; /*number of test*/
				uint32 temp;
				for(i=0;i<test_casess_number;i++)
    4e82:	fe 01       	movw	r30, r28
    4e84:	ef 50       	subi	r30, 0x0F	; 15
    4e86:	ff 4f       	sbci	r31, 0xFF	; 255
    4e88:	10 82       	st	Z, r1
    4e8a:	e7 c1       	rjmp	.+974    	; 0x525a <main+0x9f6>
				{
					/*First get the test case*/
					temp = 0;
    4e8c:	fe 01       	movw	r30, r28
    4e8e:	e3 51       	subi	r30, 0x13	; 19
    4e90:	ff 4f       	sbci	r31, 0xFF	; 255
    4e92:	10 82       	st	Z, r1
    4e94:	11 82       	std	Z+1, r1	; 0x01
    4e96:	12 82       	std	Z+2, r1	; 0x02
    4e98:	13 82       	std	Z+3, r1	; 0x03
					test_case = 0;
    4e9a:	fe 01       	movw	r30, r28
    4e9c:	e0 5f       	subi	r30, 0xF0	; 240
    4e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4ea0:	10 82       	st	Z, r1
    4ea2:	11 82       	std	Z+1, r1	; 0x01
    4ea4:	12 82       	std	Z+2, r1	; 0x02
    4ea6:	13 82       	std	Z+3, r1	; 0x03
					EEPROM_readByte(++test_case_address , &test_case );
    4ea8:	de 01       	movw	r26, r28
    4eaa:	ad 50       	subi	r26, 0x0D	; 13
    4eac:	bf 4f       	sbci	r27, 0xFF	; 255
    4eae:	fe 01       	movw	r30, r28
    4eb0:	ed 50       	subi	r30, 0x0D	; 13
    4eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb4:	80 81       	ld	r24, Z
    4eb6:	91 81       	ldd	r25, Z+1	; 0x01
    4eb8:	01 96       	adiw	r24, 0x01	; 1
    4eba:	8d 93       	st	X+, r24
    4ebc:	9c 93       	st	X, r25
    4ebe:	fe 01       	movw	r30, r28
    4ec0:	ed 50       	subi	r30, 0x0D	; 13
    4ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec4:	80 81       	ld	r24, Z
    4ec6:	91 81       	ldd	r25, Z+1	; 0x01
    4ec8:	cc 01       	movw	r24, r24
    4eca:	a0 e0       	ldi	r26, 0x00	; 0
    4ecc:	b0 e0       	ldi	r27, 0x00	; 0
    4ece:	9e 01       	movw	r18, r28
    4ed0:	20 5f       	subi	r18, 0xF0	; 240
    4ed2:	3e 4f       	sbci	r19, 0xFE	; 254
    4ed4:	bc 01       	movw	r22, r24
    4ed6:	cd 01       	movw	r24, r26
    4ed8:	a9 01       	movw	r20, r18
    4eda:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
    4ede:	fe 01       	movw	r30, r28
    4ee0:	ed 54       	subi	r30, 0x4D	; 77
    4ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee4:	80 e0       	ldi	r24, 0x00	; 0
    4ee6:	90 e0       	ldi	r25, 0x00	; 0
    4ee8:	a0 e2       	ldi	r26, 0x20	; 32
    4eea:	b1 e4       	ldi	r27, 0x41	; 65
    4eec:	80 83       	st	Z, r24
    4eee:	91 83       	std	Z+1, r25	; 0x01
    4ef0:	a2 83       	std	Z+2, r26	; 0x02
    4ef2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ef4:	8e 01       	movw	r16, r28
    4ef6:	01 55       	subi	r16, 0x51	; 81
    4ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    4efa:	fe 01       	movw	r30, r28
    4efc:	ed 54       	subi	r30, 0x4D	; 77
    4efe:	ff 4f       	sbci	r31, 0xFF	; 255
    4f00:	60 81       	ld	r22, Z
    4f02:	71 81       	ldd	r23, Z+1	; 0x01
    4f04:	82 81       	ldd	r24, Z+2	; 0x02
    4f06:	93 81       	ldd	r25, Z+3	; 0x03
    4f08:	20 e0       	ldi	r18, 0x00	; 0
    4f0a:	30 e0       	ldi	r19, 0x00	; 0
    4f0c:	4a e7       	ldi	r20, 0x7A	; 122
    4f0e:	55 e4       	ldi	r21, 0x45	; 69
    4f10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4f14:	dc 01       	movw	r26, r24
    4f16:	cb 01       	movw	r24, r22
    4f18:	f8 01       	movw	r30, r16
    4f1a:	80 83       	st	Z, r24
    4f1c:	91 83       	std	Z+1, r25	; 0x01
    4f1e:	a2 83       	std	Z+2, r26	; 0x02
    4f20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f22:	fe 01       	movw	r30, r28
    4f24:	e1 55       	subi	r30, 0x51	; 81
    4f26:	ff 4f       	sbci	r31, 0xFF	; 255
    4f28:	60 81       	ld	r22, Z
    4f2a:	71 81       	ldd	r23, Z+1	; 0x01
    4f2c:	82 81       	ldd	r24, Z+2	; 0x02
    4f2e:	93 81       	ldd	r25, Z+3	; 0x03
    4f30:	20 e0       	ldi	r18, 0x00	; 0
    4f32:	30 e0       	ldi	r19, 0x00	; 0
    4f34:	40 e8       	ldi	r20, 0x80	; 128
    4f36:	5f e3       	ldi	r21, 0x3F	; 63
    4f38:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4f3c:	88 23       	and	r24, r24
    4f3e:	44 f4       	brge	.+16     	; 0x4f50 <main+0x6ec>
		__ticks = 1;
    4f40:	fe 01       	movw	r30, r28
    4f42:	e3 55       	subi	r30, 0x53	; 83
    4f44:	ff 4f       	sbci	r31, 0xFF	; 255
    4f46:	81 e0       	ldi	r24, 0x01	; 1
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	91 83       	std	Z+1, r25	; 0x01
    4f4c:	80 83       	st	Z, r24
    4f4e:	64 c0       	rjmp	.+200    	; 0x5018 <main+0x7b4>
	else if (__tmp > 65535)
    4f50:	fe 01       	movw	r30, r28
    4f52:	e1 55       	subi	r30, 0x51	; 81
    4f54:	ff 4f       	sbci	r31, 0xFF	; 255
    4f56:	60 81       	ld	r22, Z
    4f58:	71 81       	ldd	r23, Z+1	; 0x01
    4f5a:	82 81       	ldd	r24, Z+2	; 0x02
    4f5c:	93 81       	ldd	r25, Z+3	; 0x03
    4f5e:	20 e0       	ldi	r18, 0x00	; 0
    4f60:	3f ef       	ldi	r19, 0xFF	; 255
    4f62:	4f e7       	ldi	r20, 0x7F	; 127
    4f64:	57 e4       	ldi	r21, 0x47	; 71
    4f66:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4f6a:	18 16       	cp	r1, r24
    4f6c:	0c f0       	brlt	.+2      	; 0x4f70 <main+0x70c>
    4f6e:	43 c0       	rjmp	.+134    	; 0x4ff6 <main+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f70:	fe 01       	movw	r30, r28
    4f72:	ed 54       	subi	r30, 0x4D	; 77
    4f74:	ff 4f       	sbci	r31, 0xFF	; 255
    4f76:	60 81       	ld	r22, Z
    4f78:	71 81       	ldd	r23, Z+1	; 0x01
    4f7a:	82 81       	ldd	r24, Z+2	; 0x02
    4f7c:	93 81       	ldd	r25, Z+3	; 0x03
    4f7e:	20 e0       	ldi	r18, 0x00	; 0
    4f80:	30 e0       	ldi	r19, 0x00	; 0
    4f82:	40 e2       	ldi	r20, 0x20	; 32
    4f84:	51 e4       	ldi	r21, 0x41	; 65
    4f86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4f8a:	dc 01       	movw	r26, r24
    4f8c:	cb 01       	movw	r24, r22
    4f8e:	8e 01       	movw	r16, r28
    4f90:	03 55       	subi	r16, 0x53	; 83
    4f92:	1f 4f       	sbci	r17, 0xFF	; 255
    4f94:	bc 01       	movw	r22, r24
    4f96:	cd 01       	movw	r24, r26
    4f98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4f9c:	dc 01       	movw	r26, r24
    4f9e:	cb 01       	movw	r24, r22
    4fa0:	f8 01       	movw	r30, r16
    4fa2:	91 83       	std	Z+1, r25	; 0x01
    4fa4:	80 83       	st	Z, r24
    4fa6:	1f c0       	rjmp	.+62     	; 0x4fe6 <main+0x782>
    4fa8:	fe 01       	movw	r30, r28
    4faa:	e5 55       	subi	r30, 0x55	; 85
    4fac:	ff 4f       	sbci	r31, 0xFF	; 255
    4fae:	80 e9       	ldi	r24, 0x90	; 144
    4fb0:	91 e0       	ldi	r25, 0x01	; 1
    4fb2:	91 83       	std	Z+1, r25	; 0x01
    4fb4:	80 83       	st	Z, r24
    4fb6:	fe 01       	movw	r30, r28
    4fb8:	e5 55       	subi	r30, 0x55	; 85
    4fba:	ff 4f       	sbci	r31, 0xFF	; 255
    4fbc:	80 81       	ld	r24, Z
    4fbe:	91 81       	ldd	r25, Z+1	; 0x01
    4fc0:	01 97       	sbiw	r24, 0x01	; 1
    4fc2:	f1 f7       	brne	.-4      	; 0x4fc0 <main+0x75c>
    4fc4:	fe 01       	movw	r30, r28
    4fc6:	e5 55       	subi	r30, 0x55	; 85
    4fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fca:	91 83       	std	Z+1, r25	; 0x01
    4fcc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fce:	de 01       	movw	r26, r28
    4fd0:	a3 55       	subi	r26, 0x53	; 83
    4fd2:	bf 4f       	sbci	r27, 0xFF	; 255
    4fd4:	fe 01       	movw	r30, r28
    4fd6:	e3 55       	subi	r30, 0x53	; 83
    4fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fda:	80 81       	ld	r24, Z
    4fdc:	91 81       	ldd	r25, Z+1	; 0x01
    4fde:	01 97       	sbiw	r24, 0x01	; 1
    4fe0:	11 96       	adiw	r26, 0x01	; 1
    4fe2:	9c 93       	st	X, r25
    4fe4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fe6:	fe 01       	movw	r30, r28
    4fe8:	e3 55       	subi	r30, 0x53	; 83
    4fea:	ff 4f       	sbci	r31, 0xFF	; 255
    4fec:	80 81       	ld	r24, Z
    4fee:	91 81       	ldd	r25, Z+1	; 0x01
    4ff0:	00 97       	sbiw	r24, 0x00	; 0
    4ff2:	d1 f6       	brne	.-76     	; 0x4fa8 <main+0x744>
    4ff4:	27 c0       	rjmp	.+78     	; 0x5044 <main+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ff6:	8e 01       	movw	r16, r28
    4ff8:	03 55       	subi	r16, 0x53	; 83
    4ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    4ffc:	fe 01       	movw	r30, r28
    4ffe:	e1 55       	subi	r30, 0x51	; 81
    5000:	ff 4f       	sbci	r31, 0xFF	; 255
    5002:	60 81       	ld	r22, Z
    5004:	71 81       	ldd	r23, Z+1	; 0x01
    5006:	82 81       	ldd	r24, Z+2	; 0x02
    5008:	93 81       	ldd	r25, Z+3	; 0x03
    500a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    500e:	dc 01       	movw	r26, r24
    5010:	cb 01       	movw	r24, r22
    5012:	f8 01       	movw	r30, r16
    5014:	91 83       	std	Z+1, r25	; 0x01
    5016:	80 83       	st	Z, r24
    5018:	de 01       	movw	r26, r28
    501a:	a7 55       	subi	r26, 0x57	; 87
    501c:	bf 4f       	sbci	r27, 0xFF	; 255
    501e:	fe 01       	movw	r30, r28
    5020:	e3 55       	subi	r30, 0x53	; 83
    5022:	ff 4f       	sbci	r31, 0xFF	; 255
    5024:	80 81       	ld	r24, Z
    5026:	91 81       	ldd	r25, Z+1	; 0x01
    5028:	8d 93       	st	X+, r24
    502a:	9c 93       	st	X, r25
    502c:	fe 01       	movw	r30, r28
    502e:	e7 55       	subi	r30, 0x57	; 87
    5030:	ff 4f       	sbci	r31, 0xFF	; 255
    5032:	80 81       	ld	r24, Z
    5034:	91 81       	ldd	r25, Z+1	; 0x01
    5036:	01 97       	sbiw	r24, 0x01	; 1
    5038:	f1 f7       	brne	.-4      	; 0x5036 <main+0x7d2>
    503a:	fe 01       	movw	r30, r28
    503c:	e7 55       	subi	r30, 0x57	; 87
    503e:	ff 4f       	sbci	r31, 0xFF	; 255
    5040:	91 83       	std	Z+1, r25	; 0x01
    5042:	80 83       	st	Z, r24
					_delay_ms(DELAY_BETWEEN_TWO_EEPROM_RW);
					test_case = test_case << 8 ;
    5044:	fe 01       	movw	r30, r28
    5046:	e0 5f       	subi	r30, 0xF0	; 240
    5048:	fe 4f       	sbci	r31, 0xFE	; 254
    504a:	80 81       	ld	r24, Z
    504c:	91 81       	ldd	r25, Z+1	; 0x01
    504e:	a2 81       	ldd	r26, Z+2	; 0x02
    5050:	b3 81       	ldd	r27, Z+3	; 0x03
    5052:	ba 2f       	mov	r27, r26
    5054:	a9 2f       	mov	r26, r25
    5056:	98 2f       	mov	r25, r24
    5058:	88 27       	eor	r24, r24
    505a:	fe 01       	movw	r30, r28
    505c:	e0 5f       	subi	r30, 0xF0	; 240
    505e:	fe 4f       	sbci	r31, 0xFE	; 254
    5060:	80 83       	st	Z, r24
    5062:	91 83       	std	Z+1, r25	; 0x01
    5064:	a2 83       	std	Z+2, r26	; 0x02
    5066:	b3 83       	std	Z+3, r27	; 0x03
					EEPROM_readByte(test_case_address-1, &test_case);
    5068:	fe 01       	movw	r30, r28
    506a:	ed 50       	subi	r30, 0x0D	; 13
    506c:	ff 4f       	sbci	r31, 0xFF	; 255
    506e:	80 81       	ld	r24, Z
    5070:	91 81       	ldd	r25, Z+1	; 0x01
    5072:	01 97       	sbiw	r24, 0x01	; 1
    5074:	cc 01       	movw	r24, r24
    5076:	a0 e0       	ldi	r26, 0x00	; 0
    5078:	b0 e0       	ldi	r27, 0x00	; 0
    507a:	9e 01       	movw	r18, r28
    507c:	20 5f       	subi	r18, 0xF0	; 240
    507e:	3e 4f       	sbci	r19, 0xFE	; 254
    5080:	bc 01       	movw	r22, r24
    5082:	cd 01       	movw	r24, r26
    5084:	a9 01       	movw	r20, r18
    5086:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
					//					test_case = (test_case & (0x00FF) ) | (temp<<(pins_number/2) );
					test_case_address++;
    508a:	de 01       	movw	r26, r28
    508c:	ad 50       	subi	r26, 0x0D	; 13
    508e:	bf 4f       	sbci	r27, 0xFF	; 255
    5090:	fe 01       	movw	r30, r28
    5092:	ed 50       	subi	r30, 0x0D	; 13
    5094:	ff 4f       	sbci	r31, 0xFF	; 255
    5096:	80 81       	ld	r24, Z
    5098:	91 81       	ldd	r25, Z+1	; 0x01
    509a:	01 96       	adiw	r24, 0x01	; 1
    509c:	8d 93       	st	X+, r24
    509e:	9c 93       	st	X, r25


					/*Then test this case*/
					is_true = test_the_ic(io_map,test_case,pins_number);
    50a0:	fe 01       	movw	r30, r28
    50a2:	e4 5f       	subi	r30, 0xF4	; 244
    50a4:	fe 4f       	sbci	r31, 0xFE	; 254
    50a6:	80 81       	ld	r24, Z
    50a8:	91 81       	ldd	r25, Z+1	; 0x01
    50aa:	a2 81       	ldd	r26, Z+2	; 0x02
    50ac:	b3 81       	ldd	r27, Z+3	; 0x03
    50ae:	fe 01       	movw	r30, r28
    50b0:	e0 5f       	subi	r30, 0xF0	; 240
    50b2:	fe 4f       	sbci	r31, 0xFE	; 254
    50b4:	20 81       	ld	r18, Z
    50b6:	31 81       	ldd	r19, Z+1	; 0x01
    50b8:	42 81       	ldd	r20, Z+2	; 0x02
    50ba:	53 81       	ldd	r21, Z+3	; 0x03
    50bc:	fe 01       	movw	r30, r28
    50be:	e5 50       	subi	r30, 0x05	; 5
    50c0:	ff 4f       	sbci	r31, 0xFF	; 255
    50c2:	bc 01       	movw	r22, r24
    50c4:	cd 01       	movw	r24, r26
    50c6:	00 81       	ld	r16, Z
    50c8:	0e 94 2e 07 	call	0xe5c	; 0xe5c <test_the_ic>
    50cc:	fe 01       	movw	r30, r28
    50ce:	ee 50       	subi	r30, 0x0E	; 14
    50d0:	ff 4f       	sbci	r31, 0xFF	; 255
    50d2:	80 83       	st	Z, r24

					/*check if this test case is true or not*/
					if(is_true == 0)
    50d4:	fe 01       	movw	r30, r28
    50d6:	ee 50       	subi	r30, 0x0E	; 14
    50d8:	ff 4f       	sbci	r31, 0xFF	; 255
    50da:	80 81       	ld	r24, Z
    50dc:	88 23       	and	r24, r24
    50de:	09 f4       	brne	.+2      	; 0x50e2 <main+0x87e>
    50e0:	c7 c0       	rjmp	.+398    	; 0x5270 <main+0xa0c>
					{ /*so it's false*/
						break;
    50e2:	fe 01       	movw	r30, r28
    50e4:	eb 55       	subi	r30, 0x5B	; 91
    50e6:	ff 4f       	sbci	r31, 0xFF	; 255
    50e8:	80 e0       	ldi	r24, 0x00	; 0
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	a8 e4       	ldi	r26, 0x48	; 72
    50ee:	b2 e4       	ldi	r27, 0x42	; 66
    50f0:	80 83       	st	Z, r24
    50f2:	91 83       	std	Z+1, r25	; 0x01
    50f4:	a2 83       	std	Z+2, r26	; 0x02
    50f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50f8:	8e 01       	movw	r16, r28
    50fa:	0f 55       	subi	r16, 0x5F	; 95
    50fc:	1f 4f       	sbci	r17, 0xFF	; 255
    50fe:	fe 01       	movw	r30, r28
    5100:	eb 55       	subi	r30, 0x5B	; 91
    5102:	ff 4f       	sbci	r31, 0xFF	; 255
    5104:	60 81       	ld	r22, Z
    5106:	71 81       	ldd	r23, Z+1	; 0x01
    5108:	82 81       	ldd	r24, Z+2	; 0x02
    510a:	93 81       	ldd	r25, Z+3	; 0x03
    510c:	20 e0       	ldi	r18, 0x00	; 0
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	4a e7       	ldi	r20, 0x7A	; 122
    5112:	55 e4       	ldi	r21, 0x45	; 69
    5114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5118:	dc 01       	movw	r26, r24
    511a:	cb 01       	movw	r24, r22
    511c:	f8 01       	movw	r30, r16
    511e:	80 83       	st	Z, r24
    5120:	91 83       	std	Z+1, r25	; 0x01
    5122:	a2 83       	std	Z+2, r26	; 0x02
    5124:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5126:	fe 01       	movw	r30, r28
    5128:	ef 55       	subi	r30, 0x5F	; 95
    512a:	ff 4f       	sbci	r31, 0xFF	; 255
    512c:	60 81       	ld	r22, Z
    512e:	71 81       	ldd	r23, Z+1	; 0x01
    5130:	82 81       	ldd	r24, Z+2	; 0x02
    5132:	93 81       	ldd	r25, Z+3	; 0x03
    5134:	20 e0       	ldi	r18, 0x00	; 0
    5136:	30 e0       	ldi	r19, 0x00	; 0
    5138:	40 e8       	ldi	r20, 0x80	; 128
    513a:	5f e3       	ldi	r21, 0x3F	; 63
    513c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    5140:	88 23       	and	r24, r24
    5142:	44 f4       	brge	.+16     	; 0x5154 <main+0x8f0>
		__ticks = 1;
    5144:	fe 01       	movw	r30, r28
    5146:	e1 56       	subi	r30, 0x61	; 97
    5148:	ff 4f       	sbci	r31, 0xFF	; 255
    514a:	81 e0       	ldi	r24, 0x01	; 1
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	91 83       	std	Z+1, r25	; 0x01
    5150:	80 83       	st	Z, r24
    5152:	64 c0       	rjmp	.+200    	; 0x521c <main+0x9b8>
	else if (__tmp > 65535)
    5154:	fe 01       	movw	r30, r28
    5156:	ef 55       	subi	r30, 0x5F	; 95
    5158:	ff 4f       	sbci	r31, 0xFF	; 255
    515a:	60 81       	ld	r22, Z
    515c:	71 81       	ldd	r23, Z+1	; 0x01
    515e:	82 81       	ldd	r24, Z+2	; 0x02
    5160:	93 81       	ldd	r25, Z+3	; 0x03
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	3f ef       	ldi	r19, 0xFF	; 255
    5166:	4f e7       	ldi	r20, 0x7F	; 127
    5168:	57 e4       	ldi	r21, 0x47	; 71
    516a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    516e:	18 16       	cp	r1, r24
    5170:	0c f0       	brlt	.+2      	; 0x5174 <main+0x910>
    5172:	43 c0       	rjmp	.+134    	; 0x51fa <main+0x996>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5174:	fe 01       	movw	r30, r28
    5176:	eb 55       	subi	r30, 0x5B	; 91
    5178:	ff 4f       	sbci	r31, 0xFF	; 255
    517a:	60 81       	ld	r22, Z
    517c:	71 81       	ldd	r23, Z+1	; 0x01
    517e:	82 81       	ldd	r24, Z+2	; 0x02
    5180:	93 81       	ldd	r25, Z+3	; 0x03
    5182:	20 e0       	ldi	r18, 0x00	; 0
    5184:	30 e0       	ldi	r19, 0x00	; 0
    5186:	40 e2       	ldi	r20, 0x20	; 32
    5188:	51 e4       	ldi	r21, 0x41	; 65
    518a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    518e:	dc 01       	movw	r26, r24
    5190:	cb 01       	movw	r24, r22
    5192:	8e 01       	movw	r16, r28
    5194:	01 56       	subi	r16, 0x61	; 97
    5196:	1f 4f       	sbci	r17, 0xFF	; 255
    5198:	bc 01       	movw	r22, r24
    519a:	cd 01       	movw	r24, r26
    519c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    51a0:	dc 01       	movw	r26, r24
    51a2:	cb 01       	movw	r24, r22
    51a4:	f8 01       	movw	r30, r16
    51a6:	91 83       	std	Z+1, r25	; 0x01
    51a8:	80 83       	st	Z, r24
    51aa:	1f c0       	rjmp	.+62     	; 0x51ea <main+0x986>
    51ac:	fe 01       	movw	r30, r28
    51ae:	e3 56       	subi	r30, 0x63	; 99
    51b0:	ff 4f       	sbci	r31, 0xFF	; 255
    51b2:	80 e9       	ldi	r24, 0x90	; 144
    51b4:	91 e0       	ldi	r25, 0x01	; 1
    51b6:	91 83       	std	Z+1, r25	; 0x01
    51b8:	80 83       	st	Z, r24
    51ba:	fe 01       	movw	r30, r28
    51bc:	e3 56       	subi	r30, 0x63	; 99
    51be:	ff 4f       	sbci	r31, 0xFF	; 255
    51c0:	80 81       	ld	r24, Z
    51c2:	91 81       	ldd	r25, Z+1	; 0x01
    51c4:	01 97       	sbiw	r24, 0x01	; 1
    51c6:	f1 f7       	brne	.-4      	; 0x51c4 <main+0x960>
    51c8:	fe 01       	movw	r30, r28
    51ca:	e3 56       	subi	r30, 0x63	; 99
    51cc:	ff 4f       	sbci	r31, 0xFF	; 255
    51ce:	91 83       	std	Z+1, r25	; 0x01
    51d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51d2:	de 01       	movw	r26, r28
    51d4:	a1 56       	subi	r26, 0x61	; 97
    51d6:	bf 4f       	sbci	r27, 0xFF	; 255
    51d8:	fe 01       	movw	r30, r28
    51da:	e1 56       	subi	r30, 0x61	; 97
    51dc:	ff 4f       	sbci	r31, 0xFF	; 255
    51de:	80 81       	ld	r24, Z
    51e0:	91 81       	ldd	r25, Z+1	; 0x01
    51e2:	01 97       	sbiw	r24, 0x01	; 1
    51e4:	11 96       	adiw	r26, 0x01	; 1
    51e6:	9c 93       	st	X, r25
    51e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ea:	fe 01       	movw	r30, r28
    51ec:	e1 56       	subi	r30, 0x61	; 97
    51ee:	ff 4f       	sbci	r31, 0xFF	; 255
    51f0:	80 81       	ld	r24, Z
    51f2:	91 81       	ldd	r25, Z+1	; 0x01
    51f4:	00 97       	sbiw	r24, 0x00	; 0
    51f6:	d1 f6       	brne	.-76     	; 0x51ac <main+0x948>
    51f8:	27 c0       	rjmp	.+78     	; 0x5248 <main+0x9e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51fa:	8e 01       	movw	r16, r28
    51fc:	01 56       	subi	r16, 0x61	; 97
    51fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5200:	fe 01       	movw	r30, r28
    5202:	ef 55       	subi	r30, 0x5F	; 95
    5204:	ff 4f       	sbci	r31, 0xFF	; 255
    5206:	60 81       	ld	r22, Z
    5208:	71 81       	ldd	r23, Z+1	; 0x01
    520a:	82 81       	ldd	r24, Z+2	; 0x02
    520c:	93 81       	ldd	r25, Z+3	; 0x03
    520e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5212:	dc 01       	movw	r26, r24
    5214:	cb 01       	movw	r24, r22
    5216:	f8 01       	movw	r30, r16
    5218:	91 83       	std	Z+1, r25	; 0x01
    521a:	80 83       	st	Z, r24
    521c:	de 01       	movw	r26, r28
    521e:	a5 56       	subi	r26, 0x65	; 101
    5220:	bf 4f       	sbci	r27, 0xFF	; 255
    5222:	fe 01       	movw	r30, r28
    5224:	e1 56       	subi	r30, 0x61	; 97
    5226:	ff 4f       	sbci	r31, 0xFF	; 255
    5228:	80 81       	ld	r24, Z
    522a:	91 81       	ldd	r25, Z+1	; 0x01
    522c:	8d 93       	st	X+, r24
    522e:	9c 93       	st	X, r25
    5230:	fe 01       	movw	r30, r28
    5232:	e5 56       	subi	r30, 0x65	; 101
    5234:	ff 4f       	sbci	r31, 0xFF	; 255
    5236:	80 81       	ld	r24, Z
    5238:	91 81       	ldd	r25, Z+1	; 0x01
    523a:	01 97       	sbiw	r24, 0x01	; 1
    523c:	f1 f7       	brne	.-4      	; 0x523a <main+0x9d6>
    523e:	fe 01       	movw	r30, r28
    5240:	e5 56       	subi	r30, 0x65	; 101
    5242:	ff 4f       	sbci	r31, 0xFF	; 255
    5244:	91 83       	std	Z+1, r25	; 0x01
    5246:	80 83       	st	Z, r24

				/*If I found the IC, so let's test all cases */
				uint8 is_true;  /* 0 for false, 1 for true */
				uint8 i; /*number of test*/
				uint32 temp;
				for(i=0;i<test_casess_number;i++)
    5248:	de 01       	movw	r26, r28
    524a:	af 50       	subi	r26, 0x0F	; 15
    524c:	bf 4f       	sbci	r27, 0xFF	; 255
    524e:	fe 01       	movw	r30, r28
    5250:	ef 50       	subi	r30, 0x0F	; 15
    5252:	ff 4f       	sbci	r31, 0xFF	; 255
    5254:	80 81       	ld	r24, Z
    5256:	8f 5f       	subi	r24, 0xFF	; 255
    5258:	8c 93       	st	X, r24
    525a:	fe 01       	movw	r30, r28
    525c:	e5 5f       	subi	r30, 0xF5	; 245
    525e:	fe 4f       	sbci	r31, 0xFE	; 254
    5260:	90 81       	ld	r25, Z
    5262:	fe 01       	movw	r30, r28
    5264:	ef 50       	subi	r30, 0x0F	; 15
    5266:	ff 4f       	sbci	r31, 0xFF	; 255
    5268:	80 81       	ld	r24, Z
    526a:	89 17       	cp	r24, r25
    526c:	08 f4       	brcc	.+2      	; 0x5270 <main+0xa0c>
    526e:	0e ce       	rjmp	.-996    	; 0x4e8c <main+0x628>
				}

				/*if the IC not found display a massage*/


				if(is_true==0)
    5270:	fe 01       	movw	r30, r28
    5272:	ee 50       	subi	r30, 0x0E	; 14
    5274:	ff 4f       	sbci	r31, 0xFF	; 255
    5276:	80 81       	ld	r24, Z
    5278:	88 23       	and	r24, r24
    527a:	d1 f4       	brne	.+52     	; 0x52b0 <main+0xa4c>
				{
					LCD_clearScreen();
    527c:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
					LCD_writeString("Failed at case ");
    5280:	80 ef       	ldi	r24, 0xF0	; 240
    5282:	90 e0       	ldi	r25, 0x00	; 0
    5284:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
					LCD_moveCursor(1,0);
    5288:	81 e0       	ldi	r24, 0x01	; 1
    528a:	60 e0       	ldi	r22, 0x00	; 0
    528c:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
					LCD_integerToString(i+1); /*number of failed test*/
    5290:	fe 01       	movw	r30, r28
    5292:	ef 50       	subi	r30, 0x0F	; 15
    5294:	ff 4f       	sbci	r31, 0xFF	; 255
    5296:	80 81       	ld	r24, Z
    5298:	88 2f       	mov	r24, r24
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	01 96       	adiw	r24, 0x01	; 1
    529e:	0e 94 05 24 	call	0x480a	; 0x480a <LCD_integerToString>
					LCD_writeString("  :(");
    52a2:	80 e0       	ldi	r24, 0x00	; 0
    52a4:	91 e0       	ldi	r25, 0x01	; 1
    52a6:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
					KEYPAD_getPressedKey(); /*To wait till the user press any button*/
    52aa:	0e 94 f6 17 	call	0x2fec	; 0x2fec <KEYPAD_getPressedKey>
    52ae:	10 c0       	rjmp	.+32     	; 0x52d0 <main+0xa6c>
				}else
				{
					LCD_clearScreen();
    52b0:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
					LCD_writeString("The test passes");
    52b4:	85 e0       	ldi	r24, 0x05	; 5
    52b6:	91 e0       	ldi	r25, 0x01	; 1
    52b8:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
					LCD_moveCursor(1,0);
    52bc:	81 e0       	ldi	r24, 0x01	; 1
    52be:	60 e0       	ldi	r22, 0x00	; 0
    52c0:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
					LCD_writeString(" :) ");
    52c4:	85 e1       	ldi	r24, 0x15	; 21
    52c6:	91 e0       	ldi	r25, 0x01	; 1
    52c8:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
					KEYPAD_getPressedKey(); /*To wait till the user press any button*/
    52cc:	0e 94 f6 17 	call	0x2fec	; 0x2fec <KEYPAD_getPressedKey>
				//			test_the_ic(0b00010010100100,0b10000000000000,14); /*forth test test*/




				LCD_clearScreen(); /*clear at the end*/
    52d0:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
    52d4:	0c 94 99 34 	jmp	0x6932	; 0x6932 <main+0x20ce>

			}

		}
		/**************** Adding new IC test *********************/
		else if('-' == pressed_key)
    52d8:	fe 01       	movw	r30, r28
    52da:	e2 50       	subi	r30, 0x02	; 2
    52dc:	ff 4f       	sbci	r31, 0xFF	; 255
    52de:	80 81       	ld	r24, Z
    52e0:	8d 32       	cpi	r24, 0x2D	; 45
    52e2:	11 f0       	breq	.+4      	; 0x52e8 <main+0xa84>
    52e4:	0c 94 99 34 	jmp	0x6932	; 0x6932 <main+0x20ce>
		{ /*Adding new IC*/
			LCD_clearScreen();
    52e8:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
			LCD_writeString("+ : manual");
    52ec:	8a e1       	ldi	r24, 0x1A	; 26
    52ee:	91 e0       	ldi	r25, 0x01	; 1
    52f0:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
			LCD_moveCursor(1,0);
    52f4:	81 e0       	ldi	r24, 0x01	; 1
    52f6:	60 e0       	ldi	r22, 0x00	; 0
    52f8:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
			LCD_writeString("- : By our program"); /*advanced step, which will add by a program on PC*/
    52fc:	85 e2       	ldi	r24, 0x25	; 37
    52fe:	91 e0       	ldi	r25, 0x01	; 1
    5300:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>

			pressed_key = KEYPAD_getPressedKey();
    5304:	0e 94 f6 17 	call	0x2fec	; 0x2fec <KEYPAD_getPressedKey>
    5308:	fe 01       	movw	r30, r28
    530a:	e2 50       	subi	r30, 0x02	; 2
    530c:	ff 4f       	sbci	r31, 0xFF	; 255
    530e:	80 83       	st	Z, r24
    5310:	fe 01       	movw	r30, r28
    5312:	e9 56       	subi	r30, 0x69	; 105
    5314:	ff 4f       	sbci	r31, 0xFF	; 255
    5316:	80 e0       	ldi	r24, 0x00	; 0
    5318:	90 e0       	ldi	r25, 0x00	; 0
    531a:	aa ef       	ldi	r26, 0xFA	; 250
    531c:	b3 e4       	ldi	r27, 0x43	; 67
    531e:	80 83       	st	Z, r24
    5320:	91 83       	std	Z+1, r25	; 0x01
    5322:	a2 83       	std	Z+2, r26	; 0x02
    5324:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5326:	8e 01       	movw	r16, r28
    5328:	0d 56       	subi	r16, 0x6D	; 109
    532a:	1f 4f       	sbci	r17, 0xFF	; 255
    532c:	fe 01       	movw	r30, r28
    532e:	e9 56       	subi	r30, 0x69	; 105
    5330:	ff 4f       	sbci	r31, 0xFF	; 255
    5332:	60 81       	ld	r22, Z
    5334:	71 81       	ldd	r23, Z+1	; 0x01
    5336:	82 81       	ldd	r24, Z+2	; 0x02
    5338:	93 81       	ldd	r25, Z+3	; 0x03
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	4a e7       	ldi	r20, 0x7A	; 122
    5340:	55 e4       	ldi	r21, 0x45	; 69
    5342:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5346:	dc 01       	movw	r26, r24
    5348:	cb 01       	movw	r24, r22
    534a:	f8 01       	movw	r30, r16
    534c:	80 83       	st	Z, r24
    534e:	91 83       	std	Z+1, r25	; 0x01
    5350:	a2 83       	std	Z+2, r26	; 0x02
    5352:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5354:	fe 01       	movw	r30, r28
    5356:	ed 56       	subi	r30, 0x6D	; 109
    5358:	ff 4f       	sbci	r31, 0xFF	; 255
    535a:	60 81       	ld	r22, Z
    535c:	71 81       	ldd	r23, Z+1	; 0x01
    535e:	82 81       	ldd	r24, Z+2	; 0x02
    5360:	93 81       	ldd	r25, Z+3	; 0x03
    5362:	20 e0       	ldi	r18, 0x00	; 0
    5364:	30 e0       	ldi	r19, 0x00	; 0
    5366:	40 e8       	ldi	r20, 0x80	; 128
    5368:	5f e3       	ldi	r21, 0x3F	; 63
    536a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    536e:	88 23       	and	r24, r24
    5370:	44 f4       	brge	.+16     	; 0x5382 <main+0xb1e>
		__ticks = 1;
    5372:	fe 01       	movw	r30, r28
    5374:	ef 56       	subi	r30, 0x6F	; 111
    5376:	ff 4f       	sbci	r31, 0xFF	; 255
    5378:	81 e0       	ldi	r24, 0x01	; 1
    537a:	90 e0       	ldi	r25, 0x00	; 0
    537c:	91 83       	std	Z+1, r25	; 0x01
    537e:	80 83       	st	Z, r24
    5380:	64 c0       	rjmp	.+200    	; 0x544a <main+0xbe6>
	else if (__tmp > 65535)
    5382:	fe 01       	movw	r30, r28
    5384:	ed 56       	subi	r30, 0x6D	; 109
    5386:	ff 4f       	sbci	r31, 0xFF	; 255
    5388:	60 81       	ld	r22, Z
    538a:	71 81       	ldd	r23, Z+1	; 0x01
    538c:	82 81       	ldd	r24, Z+2	; 0x02
    538e:	93 81       	ldd	r25, Z+3	; 0x03
    5390:	20 e0       	ldi	r18, 0x00	; 0
    5392:	3f ef       	ldi	r19, 0xFF	; 255
    5394:	4f e7       	ldi	r20, 0x7F	; 127
    5396:	57 e4       	ldi	r21, 0x47	; 71
    5398:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    539c:	18 16       	cp	r1, r24
    539e:	0c f0       	brlt	.+2      	; 0x53a2 <main+0xb3e>
    53a0:	43 c0       	rjmp	.+134    	; 0x5428 <main+0xbc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53a2:	fe 01       	movw	r30, r28
    53a4:	e9 56       	subi	r30, 0x69	; 105
    53a6:	ff 4f       	sbci	r31, 0xFF	; 255
    53a8:	60 81       	ld	r22, Z
    53aa:	71 81       	ldd	r23, Z+1	; 0x01
    53ac:	82 81       	ldd	r24, Z+2	; 0x02
    53ae:	93 81       	ldd	r25, Z+3	; 0x03
    53b0:	20 e0       	ldi	r18, 0x00	; 0
    53b2:	30 e0       	ldi	r19, 0x00	; 0
    53b4:	40 e2       	ldi	r20, 0x20	; 32
    53b6:	51 e4       	ldi	r21, 0x41	; 65
    53b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    53bc:	dc 01       	movw	r26, r24
    53be:	cb 01       	movw	r24, r22
    53c0:	8e 01       	movw	r16, r28
    53c2:	0f 56       	subi	r16, 0x6F	; 111
    53c4:	1f 4f       	sbci	r17, 0xFF	; 255
    53c6:	bc 01       	movw	r22, r24
    53c8:	cd 01       	movw	r24, r26
    53ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    53ce:	dc 01       	movw	r26, r24
    53d0:	cb 01       	movw	r24, r22
    53d2:	f8 01       	movw	r30, r16
    53d4:	91 83       	std	Z+1, r25	; 0x01
    53d6:	80 83       	st	Z, r24
    53d8:	1f c0       	rjmp	.+62     	; 0x5418 <main+0xbb4>
    53da:	fe 01       	movw	r30, r28
    53dc:	e1 57       	subi	r30, 0x71	; 113
    53de:	ff 4f       	sbci	r31, 0xFF	; 255
    53e0:	80 e9       	ldi	r24, 0x90	; 144
    53e2:	91 e0       	ldi	r25, 0x01	; 1
    53e4:	91 83       	std	Z+1, r25	; 0x01
    53e6:	80 83       	st	Z, r24
    53e8:	fe 01       	movw	r30, r28
    53ea:	e1 57       	subi	r30, 0x71	; 113
    53ec:	ff 4f       	sbci	r31, 0xFF	; 255
    53ee:	80 81       	ld	r24, Z
    53f0:	91 81       	ldd	r25, Z+1	; 0x01
    53f2:	01 97       	sbiw	r24, 0x01	; 1
    53f4:	f1 f7       	brne	.-4      	; 0x53f2 <main+0xb8e>
    53f6:	fe 01       	movw	r30, r28
    53f8:	e1 57       	subi	r30, 0x71	; 113
    53fa:	ff 4f       	sbci	r31, 0xFF	; 255
    53fc:	91 83       	std	Z+1, r25	; 0x01
    53fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5400:	de 01       	movw	r26, r28
    5402:	af 56       	subi	r26, 0x6F	; 111
    5404:	bf 4f       	sbci	r27, 0xFF	; 255
    5406:	fe 01       	movw	r30, r28
    5408:	ef 56       	subi	r30, 0x6F	; 111
    540a:	ff 4f       	sbci	r31, 0xFF	; 255
    540c:	80 81       	ld	r24, Z
    540e:	91 81       	ldd	r25, Z+1	; 0x01
    5410:	01 97       	sbiw	r24, 0x01	; 1
    5412:	11 96       	adiw	r26, 0x01	; 1
    5414:	9c 93       	st	X, r25
    5416:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5418:	fe 01       	movw	r30, r28
    541a:	ef 56       	subi	r30, 0x6F	; 111
    541c:	ff 4f       	sbci	r31, 0xFF	; 255
    541e:	80 81       	ld	r24, Z
    5420:	91 81       	ldd	r25, Z+1	; 0x01
    5422:	00 97       	sbiw	r24, 0x00	; 0
    5424:	d1 f6       	brne	.-76     	; 0x53da <main+0xb76>
    5426:	28 c0       	rjmp	.+80     	; 0x5478 <main+0xc14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5428:	8e 01       	movw	r16, r28
    542a:	0f 56       	subi	r16, 0x6F	; 111
    542c:	1f 4f       	sbci	r17, 0xFF	; 255
    542e:	fe 01       	movw	r30, r28
    5430:	ed 56       	subi	r30, 0x6D	; 109
    5432:	ff 4f       	sbci	r31, 0xFF	; 255
    5434:	60 81       	ld	r22, Z
    5436:	71 81       	ldd	r23, Z+1	; 0x01
    5438:	82 81       	ldd	r24, Z+2	; 0x02
    543a:	93 81       	ldd	r25, Z+3	; 0x03
    543c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5440:	dc 01       	movw	r26, r24
    5442:	cb 01       	movw	r24, r22
    5444:	f8 01       	movw	r30, r16
    5446:	91 83       	std	Z+1, r25	; 0x01
    5448:	80 83       	st	Z, r24
    544a:	de 01       	movw	r26, r28
    544c:	a3 57       	subi	r26, 0x73	; 115
    544e:	bf 4f       	sbci	r27, 0xFF	; 255
    5450:	fe 01       	movw	r30, r28
    5452:	ef 56       	subi	r30, 0x6F	; 111
    5454:	ff 4f       	sbci	r31, 0xFF	; 255
    5456:	80 81       	ld	r24, Z
    5458:	91 81       	ldd	r25, Z+1	; 0x01
    545a:	11 96       	adiw	r26, 0x01	; 1
    545c:	9c 93       	st	X, r25
    545e:	8e 93       	st	-X, r24
    5460:	fe 01       	movw	r30, r28
    5462:	e3 57       	subi	r30, 0x73	; 115
    5464:	ff 4f       	sbci	r31, 0xFF	; 255
    5466:	80 81       	ld	r24, Z
    5468:	91 81       	ldd	r25, Z+1	; 0x01
    546a:	01 97       	sbiw	r24, 0x01	; 1
    546c:	f1 f7       	brne	.-4      	; 0x546a <main+0xc06>
    546e:	fe 01       	movw	r30, r28
    5470:	e3 57       	subi	r30, 0x73	; 115
    5472:	ff 4f       	sbci	r31, 0xFF	; 255
    5474:	91 83       	std	Z+1, r25	; 0x01
    5476:	80 83       	st	Z, r24
			_delay_ms(DELAY_BETWEEN_CLICKS_IN_MS);


			/************The user will enter the IC number*************/
			if('+' == pressed_key)
    5478:	fe 01       	movw	r30, r28
    547a:	e2 50       	subi	r30, 0x02	; 2
    547c:	ff 4f       	sbci	r31, 0xFF	; 255
    547e:	80 81       	ld	r24, Z
    5480:	8b 32       	cpi	r24, 0x2B	; 43
    5482:	11 f0       	breq	.+4      	; 0x5488 <main+0xc24>
    5484:	0c 94 03 34 	jmp	0x6806	; 0x6806 <main+0x1fa2>
			{ /*Adding IC manual by KEYPAD*/
				LCD_clearScreen();
    5488:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
				LCD_writeString("Pins number:");
    548c:	88 e3       	ldi	r24, 0x38	; 56
    548e:	91 e0       	ldi	r25, 0x01	; 1
    5490:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
				/*Take the number from user*/
				uint8 pins_number_arr[3]; /*The maximum size of name*/
				uint8 pins_arr_size; /*The number of digits of the array*/
				uint8 pins_number; /*The real number of pins*/

				pins_arr_size = take_input_from_keypad(pins_number_arr);
    5494:	ce 01       	movw	r24, r28
    5496:	8c 5e       	subi	r24, 0xEC	; 236
    5498:	9e 4f       	sbci	r25, 0xFE	; 254
    549a:	0e 94 9b 05 	call	0xb36	; 0xb36 <take_input_from_keypad>
    549e:	fe 01       	movw	r30, r28
    54a0:	e7 51       	subi	r30, 0x17	; 23
    54a2:	ff 4f       	sbci	r31, 0xFF	; 255
    54a4:	80 83       	st	Z, r24


				/*check if the user enters a number of 0 or greater than 2 digits */
				if(pins_arr_size > 2 || pins_arr_size == 0  )
    54a6:	fe 01       	movw	r30, r28
    54a8:	e7 51       	subi	r30, 0x17	; 23
    54aa:	ff 4f       	sbci	r31, 0xFF	; 255
    54ac:	80 81       	ld	r24, Z
    54ae:	83 30       	cpi	r24, 0x03	; 3
    54b0:	30 f4       	brcc	.+12     	; 0x54be <main+0xc5a>
    54b2:	fe 01       	movw	r30, r28
    54b4:	e7 51       	subi	r30, 0x17	; 23
    54b6:	ff 4f       	sbci	r31, 0xFF	; 255
    54b8:	80 81       	ld	r24, Z
    54ba:	88 23       	and	r24, r24
    54bc:	21 f4       	brne	.+8      	; 0x54c6 <main+0xc62>
				{
					max_size_error_display(MAX_PINS_FOR_IC);
    54be:	80 e1       	ldi	r24, 0x10	; 16
    54c0:	0e 94 70 06 	call	0xce0	; 0xce0 <max_size_error_display>
    54c4:	4c ca       	rjmp	.-2920   	; 0x495e <main+0xfa>
					continue;
				}

				if(pins_arr_size == 1) /*So the pins number is one digits only like, 8 pins */
    54c6:	fe 01       	movw	r30, r28
    54c8:	e7 51       	subi	r30, 0x17	; 23
    54ca:	ff 4f       	sbci	r31, 0xFF	; 255
    54cc:	80 81       	ld	r24, Z
    54ce:	81 30       	cpi	r24, 0x01	; 1
    54d0:	49 f4       	brne	.+18     	; 0x54e4 <main+0xc80>
				{
					pins_number = pins_number_arr[0];
    54d2:	fe 01       	movw	r30, r28
    54d4:	e8 51       	subi	r30, 0x18	; 24
    54d6:	ff 4f       	sbci	r31, 0xFF	; 255
    54d8:	de 01       	movw	r26, r28
    54da:	ac 5e       	subi	r26, 0xEC	; 236
    54dc:	be 4f       	sbci	r27, 0xFE	; 254
    54de:	8c 91       	ld	r24, X
    54e0:	80 83       	st	Z, r24
    54e2:	22 c0       	rjmp	.+68     	; 0x5528 <main+0xcc4>
				}else /*So, the pins number is two digits */
				{
					pins_number = pins_number_arr[1]; /*take the first digit*/
    54e4:	de 01       	movw	r26, r28
    54e6:	a8 51       	subi	r26, 0x18	; 24
    54e8:	bf 4f       	sbci	r27, 0xFF	; 255
    54ea:	fe 01       	movw	r30, r28
    54ec:	ec 5e       	subi	r30, 0xEC	; 236
    54ee:	fe 4f       	sbci	r31, 0xFE	; 254
    54f0:	81 81       	ldd	r24, Z+1	; 0x01
    54f2:	8c 93       	st	X, r24
					pins_number = pins_number + pins_number_arr[0]*10; /*Add second digit by multiplying it with 10 */
    54f4:	fe 01       	movw	r30, r28
    54f6:	ec 5e       	subi	r30, 0xEC	; 236
    54f8:	fe 4f       	sbci	r31, 0xFE	; 254
    54fa:	80 81       	ld	r24, Z
    54fc:	88 2f       	mov	r24, r24
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	9c 01       	movw	r18, r24
    5502:	22 0f       	add	r18, r18
    5504:	33 1f       	adc	r19, r19
    5506:	c9 01       	movw	r24, r18
    5508:	88 0f       	add	r24, r24
    550a:	99 1f       	adc	r25, r25
    550c:	88 0f       	add	r24, r24
    550e:	99 1f       	adc	r25, r25
    5510:	82 0f       	add	r24, r18
    5512:	93 1f       	adc	r25, r19
    5514:	98 2f       	mov	r25, r24
    5516:	de 01       	movw	r26, r28
    5518:	a8 51       	subi	r26, 0x18	; 24
    551a:	bf 4f       	sbci	r27, 0xFF	; 255
    551c:	fe 01       	movw	r30, r28
    551e:	e8 51       	subi	r30, 0x18	; 24
    5520:	ff 4f       	sbci	r31, 0xFF	; 255
    5522:	80 81       	ld	r24, Z
    5524:	89 0f       	add	r24, r25
    5526:	8c 93       	st	X, r24
				}


				LCD_clearScreen();
    5528:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>

				/*check the pins number*/
				if(pins_number > MAX_PINS_FOR_IC)
    552c:	fe 01       	movw	r30, r28
    552e:	e8 51       	subi	r30, 0x18	; 24
    5530:	ff 4f       	sbci	r31, 0xFF	; 255
    5532:	80 81       	ld	r24, Z
    5534:	81 31       	cpi	r24, 0x11	; 17
    5536:	20 f0       	brcs	.+8      	; 0x5540 <main+0xcdc>
				{
					max_size_error_display(MAX_PINS_FOR_IC);
    5538:	80 e1       	ldi	r24, 0x10	; 16
    553a:	0e 94 70 06 	call	0xce0	; 0xce0 <max_size_error_display>
    553e:	0f ca       	rjmp	.-3042   	; 0x495e <main+0xfa>
					continue;
				}


				/*I took pins number from user, then I will take the IC number*/
				LCD_clearScreen();
    5540:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
				LCD_writeString("Test number :");
    5544:	85 e4       	ldi	r24, 0x45	; 69
    5546:	91 e0       	ldi	r25, 0x01	; 1
    5548:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>

				uint8 IC_number[MAX_IC_NAME_SIZE];
				uint8 IC_number_size;

				IC_number_size = take_input_from_keypad(IC_number);
    554c:	ce 01       	movw	r24, r28
    554e:	89 5e       	subi	r24, 0xE9	; 233
    5550:	9e 4f       	sbci	r25, 0xFE	; 254
    5552:	0e 94 9b 05 	call	0xb36	; 0xb36 <take_input_from_keypad>
    5556:	fe 01       	movw	r30, r28
    5558:	e9 51       	subi	r30, 0x19	; 25
    555a:	ff 4f       	sbci	r31, 0xFF	; 255
    555c:	80 83       	st	Z, r24

				/*If any error in entering the IC name*/
				if(IC_number_size > MAX_IC_NAME_SIZE || IC_number_size ==0)
    555e:	fe 01       	movw	r30, r28
    5560:	e9 51       	subi	r30, 0x19	; 25
    5562:	ff 4f       	sbci	r31, 0xFF	; 255
    5564:	80 81       	ld	r24, Z
    5566:	87 30       	cpi	r24, 0x07	; 7
    5568:	30 f4       	brcc	.+12     	; 0x5576 <main+0xd12>
    556a:	fe 01       	movw	r30, r28
    556c:	e9 51       	subi	r30, 0x19	; 25
    556e:	ff 4f       	sbci	r31, 0xFF	; 255
    5570:	80 81       	ld	r24, Z
    5572:	88 23       	and	r24, r24
    5574:	21 f4       	brne	.+8      	; 0x557e <main+0xd1a>
				{
					max_size_error_display(MAX_IC_NAME_SIZE);
    5576:	86 e0       	ldi	r24, 0x06	; 6
    5578:	0e 94 70 06 	call	0xce0	; 0xce0 <max_size_error_display>
    557c:	f0 c9       	rjmp	.-3104   	; 0x495e <main+0xfa>
					continue;
				}

				/*Shifting the number to be like 007408*/
				sint8 j=MAX_IC_NAME_SIZE-1;
    557e:	fe 01       	movw	r30, r28
    5580:	ea 51       	subi	r30, 0x1A	; 26
    5582:	ff 4f       	sbci	r31, 0xFF	; 255
    5584:	85 e0       	ldi	r24, 0x05	; 5
    5586:	80 83       	st	Z, r24
				for(sint8 i=IC_number_size-1 ;i>=0 ; i--,j--)
    5588:	fe 01       	movw	r30, r28
    558a:	e9 51       	subi	r30, 0x19	; 25
    558c:	ff 4f       	sbci	r31, 0xFF	; 255
    558e:	80 81       	ld	r24, Z
    5590:	81 50       	subi	r24, 0x01	; 1
    5592:	fe 01       	movw	r30, r28
    5594:	e5 52       	subi	r30, 0x25	; 37
    5596:	ff 4f       	sbci	r31, 0xFF	; 255
    5598:	80 83       	st	Z, r24
    559a:	30 c0       	rjmp	.+96     	; 0x55fc <main+0xd98>
				{
					IC_number[j] = IC_number[i];
    559c:	fe 01       	movw	r30, r28
    559e:	ea 51       	subi	r30, 0x1A	; 26
    55a0:	ff 4f       	sbci	r31, 0xFF	; 255
    55a2:	80 81       	ld	r24, Z
    55a4:	48 2f       	mov	r20, r24
    55a6:	55 27       	eor	r21, r21
    55a8:	47 fd       	sbrc	r20, 7
    55aa:	50 95       	com	r21
    55ac:	fe 01       	movw	r30, r28
    55ae:	e5 52       	subi	r30, 0x25	; 37
    55b0:	ff 4f       	sbci	r31, 0xFF	; 255
    55b2:	80 81       	ld	r24, Z
    55b4:	28 2f       	mov	r18, r24
    55b6:	33 27       	eor	r19, r19
    55b8:	27 fd       	sbrc	r18, 7
    55ba:	30 95       	com	r19
    55bc:	ce 01       	movw	r24, r28
    55be:	89 5e       	subi	r24, 0xE9	; 233
    55c0:	9e 4f       	sbci	r25, 0xFE	; 254
    55c2:	fc 01       	movw	r30, r24
    55c4:	e2 0f       	add	r30, r18
    55c6:	f3 1f       	adc	r31, r19
    55c8:	20 81       	ld	r18, Z
    55ca:	ce 01       	movw	r24, r28
    55cc:	89 5e       	subi	r24, 0xE9	; 233
    55ce:	9e 4f       	sbci	r25, 0xFE	; 254
    55d0:	fc 01       	movw	r30, r24
    55d2:	e4 0f       	add	r30, r20
    55d4:	f5 1f       	adc	r31, r21
    55d6:	20 83       	st	Z, r18
					continue;
				}

				/*Shifting the number to be like 007408*/
				sint8 j=MAX_IC_NAME_SIZE-1;
				for(sint8 i=IC_number_size-1 ;i>=0 ; i--,j--)
    55d8:	de 01       	movw	r26, r28
    55da:	a5 52       	subi	r26, 0x25	; 37
    55dc:	bf 4f       	sbci	r27, 0xFF	; 255
    55de:	fe 01       	movw	r30, r28
    55e0:	e5 52       	subi	r30, 0x25	; 37
    55e2:	ff 4f       	sbci	r31, 0xFF	; 255
    55e4:	80 81       	ld	r24, Z
    55e6:	81 50       	subi	r24, 0x01	; 1
    55e8:	8c 93       	st	X, r24
    55ea:	de 01       	movw	r26, r28
    55ec:	aa 51       	subi	r26, 0x1A	; 26
    55ee:	bf 4f       	sbci	r27, 0xFF	; 255
    55f0:	fe 01       	movw	r30, r28
    55f2:	ea 51       	subi	r30, 0x1A	; 26
    55f4:	ff 4f       	sbci	r31, 0xFF	; 255
    55f6:	80 81       	ld	r24, Z
    55f8:	81 50       	subi	r24, 0x01	; 1
    55fa:	8c 93       	st	X, r24
    55fc:	fe 01       	movw	r30, r28
    55fe:	e5 52       	subi	r30, 0x25	; 37
    5600:	ff 4f       	sbci	r31, 0xFF	; 255
    5602:	80 81       	ld	r24, Z
    5604:	88 23       	and	r24, r24
    5606:	54 f6       	brge	.-108    	; 0x559c <main+0xd38>
				{
					IC_number[j] = IC_number[i];

				}
				/*put zeros in the empty places*/
				for(int i=0;i<MAX_IC_NAME_SIZE-IC_number_size;i++)
    5608:	fe 01       	movw	r30, r28
    560a:	e7 52       	subi	r30, 0x27	; 39
    560c:	ff 4f       	sbci	r31, 0xFF	; 255
    560e:	11 82       	std	Z+1, r1	; 0x01
    5610:	10 82       	st	Z, r1
    5612:	18 c0       	rjmp	.+48     	; 0x5644 <main+0xde0>
					IC_number[i] = 0;
    5614:	fe 01       	movw	r30, r28
    5616:	e7 52       	subi	r30, 0x27	; 39
    5618:	ff 4f       	sbci	r31, 0xFF	; 255
    561a:	20 81       	ld	r18, Z
    561c:	31 81       	ldd	r19, Z+1	; 0x01
    561e:	ce 01       	movw	r24, r28
    5620:	89 5e       	subi	r24, 0xE9	; 233
    5622:	9e 4f       	sbci	r25, 0xFE	; 254
    5624:	fc 01       	movw	r30, r24
    5626:	e2 0f       	add	r30, r18
    5628:	f3 1f       	adc	r31, r19
    562a:	10 82       	st	Z, r1
				{
					IC_number[j] = IC_number[i];

				}
				/*put zeros in the empty places*/
				for(int i=0;i<MAX_IC_NAME_SIZE-IC_number_size;i++)
    562c:	de 01       	movw	r26, r28
    562e:	a7 52       	subi	r26, 0x27	; 39
    5630:	bf 4f       	sbci	r27, 0xFF	; 255
    5632:	fe 01       	movw	r30, r28
    5634:	e7 52       	subi	r30, 0x27	; 39
    5636:	ff 4f       	sbci	r31, 0xFF	; 255
    5638:	80 81       	ld	r24, Z
    563a:	91 81       	ldd	r25, Z+1	; 0x01
    563c:	01 96       	adiw	r24, 0x01	; 1
    563e:	11 96       	adiw	r26, 0x01	; 1
    5640:	9c 93       	st	X, r25
    5642:	8e 93       	st	-X, r24
    5644:	fe 01       	movw	r30, r28
    5646:	e9 51       	subi	r30, 0x19	; 25
    5648:	ff 4f       	sbci	r31, 0xFF	; 255
    564a:	80 81       	ld	r24, Z
    564c:	28 2f       	mov	r18, r24
    564e:	30 e0       	ldi	r19, 0x00	; 0
    5650:	86 e0       	ldi	r24, 0x06	; 6
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	ac 01       	movw	r20, r24
    5656:	42 1b       	sub	r20, r18
    5658:	53 0b       	sbc	r21, r19
    565a:	9a 01       	movw	r18, r20
    565c:	fe 01       	movw	r30, r28
    565e:	e7 52       	subi	r30, 0x27	; 39
    5660:	ff 4f       	sbci	r31, 0xFF	; 255
    5662:	80 81       	ld	r24, Z
    5664:	91 81       	ldd	r25, Z+1	; 0x01
    5666:	82 17       	cp	r24, r18
    5668:	93 07       	cpc	r25, r19
    566a:	a4 f2       	brlt	.-88     	; 0x5614 <main+0xdb0>
				//	_delay_ms(10);


				/*** Get the available place from EEPROM ***/
				uint16 avi_place; /*The last available place in memeory to add the new IC in it*/
				EEPROM_readByte(AVIRABLE_ADDRESS_MSBs, &avi_place); /*Save the MSBs of the last available place*/
    566c:	9e 01       	movw	r18, r28
    566e:	23 5e       	subi	r18, 0xE3	; 227
    5670:	3e 4f       	sbci	r19, 0xFE	; 254
    5672:	60 e0       	ldi	r22, 0x00	; 0
    5674:	70 e0       	ldi	r23, 0x00	; 0
    5676:	80 e0       	ldi	r24, 0x00	; 0
    5678:	90 e0       	ldi	r25, 0x00	; 0
    567a:	a9 01       	movw	r20, r18
    567c:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
				avi_place = avi_place << 8;  /*Shift left to save the LSBs of the available palce */
    5680:	fe 01       	movw	r30, r28
    5682:	e3 5e       	subi	r30, 0xE3	; 227
    5684:	fe 4f       	sbci	r31, 0xFE	; 254
    5686:	80 81       	ld	r24, Z
    5688:	91 81       	ldd	r25, Z+1	; 0x01
    568a:	98 2f       	mov	r25, r24
    568c:	88 27       	eor	r24, r24
    568e:	fe 01       	movw	r30, r28
    5690:	e3 5e       	subi	r30, 0xE3	; 227
    5692:	fe 4f       	sbci	r31, 0xFE	; 254
    5694:	91 83       	std	Z+1, r25	; 0x01
    5696:	80 83       	st	Z, r24
    5698:	fe 01       	movw	r30, r28
    569a:	e7 57       	subi	r30, 0x77	; 119
    569c:	ff 4f       	sbci	r31, 0xFF	; 255
    569e:	80 e0       	ldi	r24, 0x00	; 0
    56a0:	90 e0       	ldi	r25, 0x00	; 0
    56a2:	a0 e2       	ldi	r26, 0x20	; 32
    56a4:	b1 e4       	ldi	r27, 0x41	; 65
    56a6:	80 83       	st	Z, r24
    56a8:	91 83       	std	Z+1, r25	; 0x01
    56aa:	a2 83       	std	Z+2, r26	; 0x02
    56ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56ae:	8e 01       	movw	r16, r28
    56b0:	0b 57       	subi	r16, 0x7B	; 123
    56b2:	1f 4f       	sbci	r17, 0xFF	; 255
    56b4:	fe 01       	movw	r30, r28
    56b6:	e7 57       	subi	r30, 0x77	; 119
    56b8:	ff 4f       	sbci	r31, 0xFF	; 255
    56ba:	60 81       	ld	r22, Z
    56bc:	71 81       	ldd	r23, Z+1	; 0x01
    56be:	82 81       	ldd	r24, Z+2	; 0x02
    56c0:	93 81       	ldd	r25, Z+3	; 0x03
    56c2:	20 e0       	ldi	r18, 0x00	; 0
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	4a e7       	ldi	r20, 0x7A	; 122
    56c8:	55 e4       	ldi	r21, 0x45	; 69
    56ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    56ce:	dc 01       	movw	r26, r24
    56d0:	cb 01       	movw	r24, r22
    56d2:	f8 01       	movw	r30, r16
    56d4:	80 83       	st	Z, r24
    56d6:	91 83       	std	Z+1, r25	; 0x01
    56d8:	a2 83       	std	Z+2, r26	; 0x02
    56da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    56dc:	fe 01       	movw	r30, r28
    56de:	eb 57       	subi	r30, 0x7B	; 123
    56e0:	ff 4f       	sbci	r31, 0xFF	; 255
    56e2:	60 81       	ld	r22, Z
    56e4:	71 81       	ldd	r23, Z+1	; 0x01
    56e6:	82 81       	ldd	r24, Z+2	; 0x02
    56e8:	93 81       	ldd	r25, Z+3	; 0x03
    56ea:	20 e0       	ldi	r18, 0x00	; 0
    56ec:	30 e0       	ldi	r19, 0x00	; 0
    56ee:	40 e8       	ldi	r20, 0x80	; 128
    56f0:	5f e3       	ldi	r21, 0x3F	; 63
    56f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    56f6:	88 23       	and	r24, r24
    56f8:	44 f4       	brge	.+16     	; 0x570a <main+0xea6>
		__ticks = 1;
    56fa:	fe 01       	movw	r30, r28
    56fc:	ed 57       	subi	r30, 0x7D	; 125
    56fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5700:	81 e0       	ldi	r24, 0x01	; 1
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	91 83       	std	Z+1, r25	; 0x01
    5706:	80 83       	st	Z, r24
    5708:	64 c0       	rjmp	.+200    	; 0x57d2 <main+0xf6e>
	else if (__tmp > 65535)
    570a:	fe 01       	movw	r30, r28
    570c:	eb 57       	subi	r30, 0x7B	; 123
    570e:	ff 4f       	sbci	r31, 0xFF	; 255
    5710:	60 81       	ld	r22, Z
    5712:	71 81       	ldd	r23, Z+1	; 0x01
    5714:	82 81       	ldd	r24, Z+2	; 0x02
    5716:	93 81       	ldd	r25, Z+3	; 0x03
    5718:	20 e0       	ldi	r18, 0x00	; 0
    571a:	3f ef       	ldi	r19, 0xFF	; 255
    571c:	4f e7       	ldi	r20, 0x7F	; 127
    571e:	57 e4       	ldi	r21, 0x47	; 71
    5720:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    5724:	18 16       	cp	r1, r24
    5726:	0c f0       	brlt	.+2      	; 0x572a <main+0xec6>
    5728:	43 c0       	rjmp	.+134    	; 0x57b0 <main+0xf4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    572a:	fe 01       	movw	r30, r28
    572c:	e7 57       	subi	r30, 0x77	; 119
    572e:	ff 4f       	sbci	r31, 0xFF	; 255
    5730:	60 81       	ld	r22, Z
    5732:	71 81       	ldd	r23, Z+1	; 0x01
    5734:	82 81       	ldd	r24, Z+2	; 0x02
    5736:	93 81       	ldd	r25, Z+3	; 0x03
    5738:	20 e0       	ldi	r18, 0x00	; 0
    573a:	30 e0       	ldi	r19, 0x00	; 0
    573c:	40 e2       	ldi	r20, 0x20	; 32
    573e:	51 e4       	ldi	r21, 0x41	; 65
    5740:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5744:	dc 01       	movw	r26, r24
    5746:	cb 01       	movw	r24, r22
    5748:	8e 01       	movw	r16, r28
    574a:	0d 57       	subi	r16, 0x7D	; 125
    574c:	1f 4f       	sbci	r17, 0xFF	; 255
    574e:	bc 01       	movw	r22, r24
    5750:	cd 01       	movw	r24, r26
    5752:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5756:	dc 01       	movw	r26, r24
    5758:	cb 01       	movw	r24, r22
    575a:	f8 01       	movw	r30, r16
    575c:	91 83       	std	Z+1, r25	; 0x01
    575e:	80 83       	st	Z, r24
    5760:	1f c0       	rjmp	.+62     	; 0x57a0 <main+0xf3c>
    5762:	fe 01       	movw	r30, r28
    5764:	ef 57       	subi	r30, 0x7F	; 127
    5766:	ff 4f       	sbci	r31, 0xFF	; 255
    5768:	80 e9       	ldi	r24, 0x90	; 144
    576a:	91 e0       	ldi	r25, 0x01	; 1
    576c:	91 83       	std	Z+1, r25	; 0x01
    576e:	80 83       	st	Z, r24
    5770:	fe 01       	movw	r30, r28
    5772:	ef 57       	subi	r30, 0x7F	; 127
    5774:	ff 4f       	sbci	r31, 0xFF	; 255
    5776:	80 81       	ld	r24, Z
    5778:	91 81       	ldd	r25, Z+1	; 0x01
    577a:	01 97       	sbiw	r24, 0x01	; 1
    577c:	f1 f7       	brne	.-4      	; 0x577a <main+0xf16>
    577e:	fe 01       	movw	r30, r28
    5780:	ef 57       	subi	r30, 0x7F	; 127
    5782:	ff 4f       	sbci	r31, 0xFF	; 255
    5784:	91 83       	std	Z+1, r25	; 0x01
    5786:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5788:	de 01       	movw	r26, r28
    578a:	ad 57       	subi	r26, 0x7D	; 125
    578c:	bf 4f       	sbci	r27, 0xFF	; 255
    578e:	fe 01       	movw	r30, r28
    5790:	ed 57       	subi	r30, 0x7D	; 125
    5792:	ff 4f       	sbci	r31, 0xFF	; 255
    5794:	80 81       	ld	r24, Z
    5796:	91 81       	ldd	r25, Z+1	; 0x01
    5798:	01 97       	sbiw	r24, 0x01	; 1
    579a:	11 96       	adiw	r26, 0x01	; 1
    579c:	9c 93       	st	X, r25
    579e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57a0:	fe 01       	movw	r30, r28
    57a2:	ed 57       	subi	r30, 0x7D	; 125
    57a4:	ff 4f       	sbci	r31, 0xFF	; 255
    57a6:	80 81       	ld	r24, Z
    57a8:	91 81       	ldd	r25, Z+1	; 0x01
    57aa:	00 97       	sbiw	r24, 0x00	; 0
    57ac:	d1 f6       	brne	.-76     	; 0x5762 <main+0xefe>
    57ae:	27 c0       	rjmp	.+78     	; 0x57fe <main+0xf9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57b0:	8e 01       	movw	r16, r28
    57b2:	0d 57       	subi	r16, 0x7D	; 125
    57b4:	1f 4f       	sbci	r17, 0xFF	; 255
    57b6:	fe 01       	movw	r30, r28
    57b8:	eb 57       	subi	r30, 0x7B	; 123
    57ba:	ff 4f       	sbci	r31, 0xFF	; 255
    57bc:	60 81       	ld	r22, Z
    57be:	71 81       	ldd	r23, Z+1	; 0x01
    57c0:	82 81       	ldd	r24, Z+2	; 0x02
    57c2:	93 81       	ldd	r25, Z+3	; 0x03
    57c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    57c8:	dc 01       	movw	r26, r24
    57ca:	cb 01       	movw	r24, r22
    57cc:	f8 01       	movw	r30, r16
    57ce:	91 83       	std	Z+1, r25	; 0x01
    57d0:	80 83       	st	Z, r24
    57d2:	de 01       	movw	r26, r28
    57d4:	a1 58       	subi	r26, 0x81	; 129
    57d6:	bf 4f       	sbci	r27, 0xFF	; 255
    57d8:	fe 01       	movw	r30, r28
    57da:	ed 57       	subi	r30, 0x7D	; 125
    57dc:	ff 4f       	sbci	r31, 0xFF	; 255
    57de:	80 81       	ld	r24, Z
    57e0:	91 81       	ldd	r25, Z+1	; 0x01
    57e2:	8d 93       	st	X+, r24
    57e4:	9c 93       	st	X, r25
    57e6:	fe 01       	movw	r30, r28
    57e8:	e1 58       	subi	r30, 0x81	; 129
    57ea:	ff 4f       	sbci	r31, 0xFF	; 255
    57ec:	80 81       	ld	r24, Z
    57ee:	91 81       	ldd	r25, Z+1	; 0x01
    57f0:	01 97       	sbiw	r24, 0x01	; 1
    57f2:	f1 f7       	brne	.-4      	; 0x57f0 <main+0xf8c>
    57f4:	fe 01       	movw	r30, r28
    57f6:	e1 58       	subi	r30, 0x81	; 129
    57f8:	ff 4f       	sbci	r31, 0xFF	; 255
    57fa:	91 83       	std	Z+1, r25	; 0x01
    57fc:	80 83       	st	Z, r24
				_delay_ms(DELAY_BETWEEN_TWO_EEPROM_RW);
				EEPROM_readByte(AVIRABLE_ADDRESS_LSBs , &avi_place); /*Save the LSBs of the last available place*/
    57fe:	9e 01       	movw	r18, r28
    5800:	23 5e       	subi	r18, 0xE3	; 227
    5802:	3e 4f       	sbci	r19, 0xFE	; 254
    5804:	61 e0       	ldi	r22, 0x01	; 1
    5806:	70 e0       	ldi	r23, 0x00	; 0
    5808:	80 e0       	ldi	r24, 0x00	; 0
    580a:	90 e0       	ldi	r25, 0x00	; 0
    580c:	a9 01       	movw	r20, r18
    580e:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>

				/*Add IC number in EEPROM*/
				for(uint8 i=0,j=0 ; i<MAX_IC_NAME_SIZE ; i+=2,j++)
    5812:	fe 01       	movw	r30, r28
    5814:	e8 52       	subi	r30, 0x28	; 40
    5816:	ff 4f       	sbci	r31, 0xFF	; 255
    5818:	10 82       	st	Z, r1
    581a:	fe 01       	movw	r30, r28
    581c:	e9 52       	subi	r30, 0x29	; 41
    581e:	ff 4f       	sbci	r31, 0xFF	; 255
    5820:	10 82       	st	Z, r1
    5822:	02 c1       	rjmp	.+516    	; 0x5a28 <main+0x11c4>
				{
					/*Each number will be saved in BCD form so each two numbers will take 1 byte*/
					EEPROM_writeByte(avi_place+j , (IC_number[i+1]) | (IC_number[i]<<4) );
    5824:	fe 01       	movw	r30, r28
    5826:	e9 52       	subi	r30, 0x29	; 41
    5828:	ff 4f       	sbci	r31, 0xFF	; 255
    582a:	80 81       	ld	r24, Z
    582c:	28 2f       	mov	r18, r24
    582e:	30 e0       	ldi	r19, 0x00	; 0
    5830:	fe 01       	movw	r30, r28
    5832:	e3 5e       	subi	r30, 0xE3	; 227
    5834:	fe 4f       	sbci	r31, 0xFE	; 254
    5836:	80 81       	ld	r24, Z
    5838:	91 81       	ldd	r25, Z+1	; 0x01
    583a:	82 0f       	add	r24, r18
    583c:	93 1f       	adc	r25, r19
    583e:	ac 01       	movw	r20, r24
    5840:	60 e0       	ldi	r22, 0x00	; 0
    5842:	70 e0       	ldi	r23, 0x00	; 0
    5844:	fe 01       	movw	r30, r28
    5846:	e8 52       	subi	r30, 0x28	; 40
    5848:	ff 4f       	sbci	r31, 0xFF	; 255
    584a:	80 81       	ld	r24, Z
    584c:	88 2f       	mov	r24, r24
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	9c 01       	movw	r18, r24
    5852:	2f 5f       	subi	r18, 0xFF	; 255
    5854:	3f 4f       	sbci	r19, 0xFF	; 255
    5856:	ce 01       	movw	r24, r28
    5858:	89 5e       	subi	r24, 0xE9	; 233
    585a:	9e 4f       	sbci	r25, 0xFE	; 254
    585c:	fc 01       	movw	r30, r24
    585e:	e2 0f       	add	r30, r18
    5860:	f3 1f       	adc	r31, r19
    5862:	80 81       	ld	r24, Z
    5864:	a8 2f       	mov	r26, r24
    5866:	fe 01       	movw	r30, r28
    5868:	e8 52       	subi	r30, 0x28	; 40
    586a:	ff 4f       	sbci	r31, 0xFF	; 255
    586c:	80 81       	ld	r24, Z
    586e:	28 2f       	mov	r18, r24
    5870:	30 e0       	ldi	r19, 0x00	; 0
    5872:	ce 01       	movw	r24, r28
    5874:	89 5e       	subi	r24, 0xE9	; 233
    5876:	9e 4f       	sbci	r25, 0xFE	; 254
    5878:	fc 01       	movw	r30, r24
    587a:	e2 0f       	add	r30, r18
    587c:	f3 1f       	adc	r31, r19
    587e:	80 81       	ld	r24, Z
    5880:	88 2f       	mov	r24, r24
    5882:	90 e0       	ldi	r25, 0x00	; 0
    5884:	82 95       	swap	r24
    5886:	92 95       	swap	r25
    5888:	90 7f       	andi	r25, 0xF0	; 240
    588a:	98 27       	eor	r25, r24
    588c:	80 7f       	andi	r24, 0xF0	; 240
    588e:	98 27       	eor	r25, r24
    5890:	8a 2b       	or	r24, r26
    5892:	28 2f       	mov	r18, r24
    5894:	cb 01       	movw	r24, r22
    5896:	ba 01       	movw	r22, r20
    5898:	42 2f       	mov	r20, r18
    589a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <EEPROM_writeByte>
    589e:	fe 01       	movw	r30, r28
    58a0:	e5 58       	subi	r30, 0x85	; 133
    58a2:	ff 4f       	sbci	r31, 0xFF	; 255
    58a4:	80 e0       	ldi	r24, 0x00	; 0
    58a6:	90 e0       	ldi	r25, 0x00	; 0
    58a8:	a0 e2       	ldi	r26, 0x20	; 32
    58aa:	b1 e4       	ldi	r27, 0x41	; 65
    58ac:	80 83       	st	Z, r24
    58ae:	91 83       	std	Z+1, r25	; 0x01
    58b0:	a2 83       	std	Z+2, r26	; 0x02
    58b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58b4:	8e 01       	movw	r16, r28
    58b6:	09 58       	subi	r16, 0x89	; 137
    58b8:	1f 4f       	sbci	r17, 0xFF	; 255
    58ba:	fe 01       	movw	r30, r28
    58bc:	e5 58       	subi	r30, 0x85	; 133
    58be:	ff 4f       	sbci	r31, 0xFF	; 255
    58c0:	60 81       	ld	r22, Z
    58c2:	71 81       	ldd	r23, Z+1	; 0x01
    58c4:	82 81       	ldd	r24, Z+2	; 0x02
    58c6:	93 81       	ldd	r25, Z+3	; 0x03
    58c8:	20 e0       	ldi	r18, 0x00	; 0
    58ca:	30 e0       	ldi	r19, 0x00	; 0
    58cc:	4a e7       	ldi	r20, 0x7A	; 122
    58ce:	55 e4       	ldi	r21, 0x45	; 69
    58d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    58d4:	dc 01       	movw	r26, r24
    58d6:	cb 01       	movw	r24, r22
    58d8:	f8 01       	movw	r30, r16
    58da:	80 83       	st	Z, r24
    58dc:	91 83       	std	Z+1, r25	; 0x01
    58de:	a2 83       	std	Z+2, r26	; 0x02
    58e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    58e2:	fe 01       	movw	r30, r28
    58e4:	e9 58       	subi	r30, 0x89	; 137
    58e6:	ff 4f       	sbci	r31, 0xFF	; 255
    58e8:	60 81       	ld	r22, Z
    58ea:	71 81       	ldd	r23, Z+1	; 0x01
    58ec:	82 81       	ldd	r24, Z+2	; 0x02
    58ee:	93 81       	ldd	r25, Z+3	; 0x03
    58f0:	20 e0       	ldi	r18, 0x00	; 0
    58f2:	30 e0       	ldi	r19, 0x00	; 0
    58f4:	40 e8       	ldi	r20, 0x80	; 128
    58f6:	5f e3       	ldi	r21, 0x3F	; 63
    58f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    58fc:	88 23       	and	r24, r24
    58fe:	44 f4       	brge	.+16     	; 0x5910 <main+0x10ac>
		__ticks = 1;
    5900:	fe 01       	movw	r30, r28
    5902:	eb 58       	subi	r30, 0x8B	; 139
    5904:	ff 4f       	sbci	r31, 0xFF	; 255
    5906:	81 e0       	ldi	r24, 0x01	; 1
    5908:	90 e0       	ldi	r25, 0x00	; 0
    590a:	91 83       	std	Z+1, r25	; 0x01
    590c:	80 83       	st	Z, r24
    590e:	64 c0       	rjmp	.+200    	; 0x59d8 <main+0x1174>
	else if (__tmp > 65535)
    5910:	fe 01       	movw	r30, r28
    5912:	e9 58       	subi	r30, 0x89	; 137
    5914:	ff 4f       	sbci	r31, 0xFF	; 255
    5916:	60 81       	ld	r22, Z
    5918:	71 81       	ldd	r23, Z+1	; 0x01
    591a:	82 81       	ldd	r24, Z+2	; 0x02
    591c:	93 81       	ldd	r25, Z+3	; 0x03
    591e:	20 e0       	ldi	r18, 0x00	; 0
    5920:	3f ef       	ldi	r19, 0xFF	; 255
    5922:	4f e7       	ldi	r20, 0x7F	; 127
    5924:	57 e4       	ldi	r21, 0x47	; 71
    5926:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    592a:	18 16       	cp	r1, r24
    592c:	0c f0       	brlt	.+2      	; 0x5930 <main+0x10cc>
    592e:	43 c0       	rjmp	.+134    	; 0x59b6 <main+0x1152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5930:	fe 01       	movw	r30, r28
    5932:	e5 58       	subi	r30, 0x85	; 133
    5934:	ff 4f       	sbci	r31, 0xFF	; 255
    5936:	60 81       	ld	r22, Z
    5938:	71 81       	ldd	r23, Z+1	; 0x01
    593a:	82 81       	ldd	r24, Z+2	; 0x02
    593c:	93 81       	ldd	r25, Z+3	; 0x03
    593e:	20 e0       	ldi	r18, 0x00	; 0
    5940:	30 e0       	ldi	r19, 0x00	; 0
    5942:	40 e2       	ldi	r20, 0x20	; 32
    5944:	51 e4       	ldi	r21, 0x41	; 65
    5946:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    594a:	dc 01       	movw	r26, r24
    594c:	cb 01       	movw	r24, r22
    594e:	8e 01       	movw	r16, r28
    5950:	0b 58       	subi	r16, 0x8B	; 139
    5952:	1f 4f       	sbci	r17, 0xFF	; 255
    5954:	bc 01       	movw	r22, r24
    5956:	cd 01       	movw	r24, r26
    5958:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    595c:	dc 01       	movw	r26, r24
    595e:	cb 01       	movw	r24, r22
    5960:	f8 01       	movw	r30, r16
    5962:	91 83       	std	Z+1, r25	; 0x01
    5964:	80 83       	st	Z, r24
    5966:	1f c0       	rjmp	.+62     	; 0x59a6 <main+0x1142>
    5968:	fe 01       	movw	r30, r28
    596a:	ed 58       	subi	r30, 0x8D	; 141
    596c:	ff 4f       	sbci	r31, 0xFF	; 255
    596e:	80 e9       	ldi	r24, 0x90	; 144
    5970:	91 e0       	ldi	r25, 0x01	; 1
    5972:	91 83       	std	Z+1, r25	; 0x01
    5974:	80 83       	st	Z, r24
    5976:	fe 01       	movw	r30, r28
    5978:	ed 58       	subi	r30, 0x8D	; 141
    597a:	ff 4f       	sbci	r31, 0xFF	; 255
    597c:	80 81       	ld	r24, Z
    597e:	91 81       	ldd	r25, Z+1	; 0x01
    5980:	01 97       	sbiw	r24, 0x01	; 1
    5982:	f1 f7       	brne	.-4      	; 0x5980 <main+0x111c>
    5984:	fe 01       	movw	r30, r28
    5986:	ed 58       	subi	r30, 0x8D	; 141
    5988:	ff 4f       	sbci	r31, 0xFF	; 255
    598a:	91 83       	std	Z+1, r25	; 0x01
    598c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    598e:	de 01       	movw	r26, r28
    5990:	ab 58       	subi	r26, 0x8B	; 139
    5992:	bf 4f       	sbci	r27, 0xFF	; 255
    5994:	fe 01       	movw	r30, r28
    5996:	eb 58       	subi	r30, 0x8B	; 139
    5998:	ff 4f       	sbci	r31, 0xFF	; 255
    599a:	80 81       	ld	r24, Z
    599c:	91 81       	ldd	r25, Z+1	; 0x01
    599e:	01 97       	sbiw	r24, 0x01	; 1
    59a0:	11 96       	adiw	r26, 0x01	; 1
    59a2:	9c 93       	st	X, r25
    59a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59a6:	fe 01       	movw	r30, r28
    59a8:	eb 58       	subi	r30, 0x8B	; 139
    59aa:	ff 4f       	sbci	r31, 0xFF	; 255
    59ac:	80 81       	ld	r24, Z
    59ae:	91 81       	ldd	r25, Z+1	; 0x01
    59b0:	00 97       	sbiw	r24, 0x00	; 0
    59b2:	d1 f6       	brne	.-76     	; 0x5968 <main+0x1104>
    59b4:	27 c0       	rjmp	.+78     	; 0x5a04 <main+0x11a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59b6:	8e 01       	movw	r16, r28
    59b8:	0b 58       	subi	r16, 0x8B	; 139
    59ba:	1f 4f       	sbci	r17, 0xFF	; 255
    59bc:	fe 01       	movw	r30, r28
    59be:	e9 58       	subi	r30, 0x89	; 137
    59c0:	ff 4f       	sbci	r31, 0xFF	; 255
    59c2:	60 81       	ld	r22, Z
    59c4:	71 81       	ldd	r23, Z+1	; 0x01
    59c6:	82 81       	ldd	r24, Z+2	; 0x02
    59c8:	93 81       	ldd	r25, Z+3	; 0x03
    59ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    59ce:	dc 01       	movw	r26, r24
    59d0:	cb 01       	movw	r24, r22
    59d2:	f8 01       	movw	r30, r16
    59d4:	91 83       	std	Z+1, r25	; 0x01
    59d6:	80 83       	st	Z, r24
    59d8:	de 01       	movw	r26, r28
    59da:	af 58       	subi	r26, 0x8F	; 143
    59dc:	bf 4f       	sbci	r27, 0xFF	; 255
    59de:	fe 01       	movw	r30, r28
    59e0:	eb 58       	subi	r30, 0x8B	; 139
    59e2:	ff 4f       	sbci	r31, 0xFF	; 255
    59e4:	80 81       	ld	r24, Z
    59e6:	91 81       	ldd	r25, Z+1	; 0x01
    59e8:	8d 93       	st	X+, r24
    59ea:	9c 93       	st	X, r25
    59ec:	fe 01       	movw	r30, r28
    59ee:	ef 58       	subi	r30, 0x8F	; 143
    59f0:	ff 4f       	sbci	r31, 0xFF	; 255
    59f2:	80 81       	ld	r24, Z
    59f4:	91 81       	ldd	r25, Z+1	; 0x01
    59f6:	01 97       	sbiw	r24, 0x01	; 1
    59f8:	f1 f7       	brne	.-4      	; 0x59f6 <main+0x1192>
    59fa:	fe 01       	movw	r30, r28
    59fc:	ef 58       	subi	r30, 0x8F	; 143
    59fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5a00:	91 83       	std	Z+1, r25	; 0x01
    5a02:	80 83       	st	Z, r24
				avi_place = avi_place << 8;  /*Shift left to save the LSBs of the available palce */
				_delay_ms(DELAY_BETWEEN_TWO_EEPROM_RW);
				EEPROM_readByte(AVIRABLE_ADDRESS_LSBs , &avi_place); /*Save the LSBs of the last available place*/

				/*Add IC number in EEPROM*/
				for(uint8 i=0,j=0 ; i<MAX_IC_NAME_SIZE ; i+=2,j++)
    5a04:	de 01       	movw	r26, r28
    5a06:	a8 52       	subi	r26, 0x28	; 40
    5a08:	bf 4f       	sbci	r27, 0xFF	; 255
    5a0a:	fe 01       	movw	r30, r28
    5a0c:	e8 52       	subi	r30, 0x28	; 40
    5a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a10:	80 81       	ld	r24, Z
    5a12:	8e 5f       	subi	r24, 0xFE	; 254
    5a14:	8c 93       	st	X, r24
    5a16:	de 01       	movw	r26, r28
    5a18:	a9 52       	subi	r26, 0x29	; 41
    5a1a:	bf 4f       	sbci	r27, 0xFF	; 255
    5a1c:	fe 01       	movw	r30, r28
    5a1e:	e9 52       	subi	r30, 0x29	; 41
    5a20:	ff 4f       	sbci	r31, 0xFF	; 255
    5a22:	80 81       	ld	r24, Z
    5a24:	8f 5f       	subi	r24, 0xFF	; 255
    5a26:	8c 93       	st	X, r24
    5a28:	fe 01       	movw	r30, r28
    5a2a:	e8 52       	subi	r30, 0x28	; 40
    5a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2e:	80 81       	ld	r24, Z
    5a30:	86 30       	cpi	r24, 0x06	; 6
    5a32:	08 f4       	brcc	.+2      	; 0x5a36 <main+0x11d2>
    5a34:	f7 ce       	rjmp	.-530    	; 0x5824 <main+0xfc0>
					/*Each number will be saved in BCD form so each two numbers will take 1 byte*/
					EEPROM_writeByte(avi_place+j , (IC_number[i+1]) | (IC_number[i]<<4) );
					_delay_ms(DELAY_BETWEEN_TWO_EEPROM_RW);
				}

				avi_place = avi_place + 3; /*increment 3 for the IC name*/
    5a36:	fe 01       	movw	r30, r28
    5a38:	e3 5e       	subi	r30, 0xE3	; 227
    5a3a:	fe 4f       	sbci	r31, 0xFE	; 254
    5a3c:	80 81       	ld	r24, Z
    5a3e:	91 81       	ldd	r25, Z+1	; 0x01
    5a40:	03 96       	adiw	r24, 0x03	; 3
    5a42:	fe 01       	movw	r30, r28
    5a44:	e3 5e       	subi	r30, 0xE3	; 227
    5a46:	fe 4f       	sbci	r31, 0xFE	; 254
    5a48:	91 83       	std	Z+1, r25	; 0x01
    5a4a:	80 83       	st	Z, r24

				uint16 temp_avi_palce = avi_place; /*To save this position to put the jump address in it*/
    5a4c:	de 01       	movw	r26, r28
    5a4e:	ac 51       	subi	r26, 0x1C	; 28
    5a50:	bf 4f       	sbci	r27, 0xFF	; 255
    5a52:	fe 01       	movw	r30, r28
    5a54:	e3 5e       	subi	r30, 0xE3	; 227
    5a56:	fe 4f       	sbci	r31, 0xFE	; 254
    5a58:	80 81       	ld	r24, Z
    5a5a:	91 81       	ldd	r25, Z+1	; 0x01
    5a5c:	8d 93       	st	X+, r24
    5a5e:	9c 93       	st	X, r25

				avi_place = avi_place + 2; /*This place before increment is reserved for the jump address*/
    5a60:	fe 01       	movw	r30, r28
    5a62:	e3 5e       	subi	r30, 0xE3	; 227
    5a64:	fe 4f       	sbci	r31, 0xFE	; 254
    5a66:	80 81       	ld	r24, Z
    5a68:	91 81       	ldd	r25, Z+1	; 0x01
    5a6a:	02 96       	adiw	r24, 0x02	; 2
    5a6c:	fe 01       	movw	r30, r28
    5a6e:	e3 5e       	subi	r30, 0xE3	; 227
    5a70:	fe 4f       	sbci	r31, 0xFE	; 254
    5a72:	91 83       	std	Z+1, r25	; 0x01
    5a74:	80 83       	st	Z, r24




				/*** Now I have the IC name and number of IC pins, lets take the test cases ***/
				LCD_clearScreen();
    5a76:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
				LCD_writeString("Now be careful!!");
    5a7a:	83 e5       	ldi	r24, 0x53	; 83
    5a7c:	91 e0       	ldi	r25, 0x01	; 1
    5a7e:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
				LCD_moveCursor(1,0);
    5a82:	81 e0       	ldi	r24, 0x01	; 1
    5a84:	60 e0       	ldi	r22, 0x00	; 0
    5a86:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
				LCD_writeString("in test cases");
    5a8a:	84 e6       	ldi	r24, 0x64	; 100
    5a8c:	91 e0       	ldi	r25, 0x01	; 1
    5a8e:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
				KEYPAD_getPressedKey(); /*wait till the user press any key*/
    5a92:	0e 94 f6 17 	call	0x2fec	; 0x2fec <KEYPAD_getPressedKey>

				uint8  test_cases_counter=0;
    5a96:	fe 01       	movw	r30, r28
    5a98:	ed 51       	subi	r30, 0x1D	; 29
    5a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a9c:	10 82       	st	Z, r1
				uint8  test_case_bit_number=0;
    5a9e:	fe 01       	movw	r30, r28
    5aa0:	ee 51       	subi	r30, 0x1E	; 30
    5aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa4:	10 82       	st	Z, r1
				uint8  test_case[MAX_PINS_FOR_IC]={0};
    5aa6:	ce 01       	movw	r24, r28
    5aa8:	81 5e       	subi	r24, 0xE1	; 225
    5aaa:	9e 4f       	sbci	r25, 0xFE	; 254
    5aac:	20 e1       	ldi	r18, 0x10	; 16
    5aae:	fc 01       	movw	r30, r24
    5ab0:	df 01       	movw	r26, r30
    5ab2:	42 2f       	mov	r20, r18
    5ab4:	1d 92       	st	X+, r1
    5ab6:	4a 95       	dec	r20
    5ab8:	e9 f7       	brne	.-6      	; 0x5ab4 <main+0x1250>
				uint8  row=0 , col =0;
    5aba:	fe 01       	movw	r30, r28
    5abc:	ef 51       	subi	r30, 0x1F	; 31
    5abe:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac0:	10 82       	st	Z, r1
    5ac2:	fe 01       	movw	r30, r28
    5ac4:	e0 52       	subi	r30, 0x20	; 32
    5ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac8:	10 82       	st	Z, r1
				uint8  ch1 = 'i' , ch2 = 'o'; /*ch1 and ch2 are the character which will be displayed on LCD*/
    5aca:	fe 01       	movw	r30, r28
    5acc:	e1 52       	subi	r30, 0x21	; 33
    5ace:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad0:	89 e6       	ldi	r24, 0x69	; 105
    5ad2:	80 83       	st	Z, r24
    5ad4:	fe 01       	movw	r30, r28
    5ad6:	e2 52       	subi	r30, 0x22	; 34
    5ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    5ada:	8f e6       	ldi	r24, 0x6F	; 111
    5adc:	80 83       	st	Z, r24

				/*The first time will be for taking input output mapping*/
				LCD_clearScreen();
    5ade:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
				LCD_writeString("Enter I/O map");
    5ae2:	82 e7       	ldi	r24, 0x72	; 114
    5ae4:	91 e0       	ldi	r25, 0x01	; 1
    5ae6:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
				LCD_moveCursor(1,0);
    5aea:	81 e0       	ldi	r24, 0x01	; 1
    5aec:	60 e0       	ldi	r22, 0x00	; 0
    5aee:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
				LCD_writeString("0 : IN   1 : OUT");
    5af2:	80 e8       	ldi	r24, 0x80	; 128
    5af4:	91 e0       	ldi	r25, 0x01	; 1
    5af6:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
				KEYPAD_getPressedKey(); /*wait till the user press any key*/
    5afa:	0e 94 f6 17 	call	0x2fec	; 0x2fec <KEYPAD_getPressedKey>
				LCD_clearScreen();
    5afe:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>

				while(1){

					if(test_cases_counter != 0) /*So, it's not the I/O time */
    5b02:	fe 01       	movw	r30, r28
    5b04:	ed 51       	subi	r30, 0x1D	; 29
    5b06:	ff 4f       	sbci	r31, 0xFF	; 255
    5b08:	80 81       	ld	r24, Z
    5b0a:	88 23       	and	r24, r24
    5b0c:	09 f4       	brne	.+2      	; 0x5b10 <main+0x12ac>
    5b0e:	bb c0       	rjmp	.+374    	; 0x5c86 <main+0x1422>
					{
						LCD_clearScreen();
    5b10:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
						LCD_writeString("Enter test case");
    5b14:	81 e9       	ldi	r24, 0x91	; 145
    5b16:	91 e0       	ldi	r25, 0x01	; 1
    5b18:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
    5b1c:	fe 01       	movw	r30, r28
    5b1e:	e3 59       	subi	r30, 0x93	; 147
    5b20:	ff 4f       	sbci	r31, 0xFF	; 255
    5b22:	80 e0       	ldi	r24, 0x00	; 0
    5b24:	90 e0       	ldi	r25, 0x00	; 0
    5b26:	aa e7       	ldi	r26, 0x7A	; 122
    5b28:	b4 e4       	ldi	r27, 0x44	; 68
    5b2a:	80 83       	st	Z, r24
    5b2c:	91 83       	std	Z+1, r25	; 0x01
    5b2e:	a2 83       	std	Z+2, r26	; 0x02
    5b30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b32:	8e 01       	movw	r16, r28
    5b34:	07 59       	subi	r16, 0x97	; 151
    5b36:	1f 4f       	sbci	r17, 0xFF	; 255
    5b38:	fe 01       	movw	r30, r28
    5b3a:	e3 59       	subi	r30, 0x93	; 147
    5b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5b3e:	60 81       	ld	r22, Z
    5b40:	71 81       	ldd	r23, Z+1	; 0x01
    5b42:	82 81       	ldd	r24, Z+2	; 0x02
    5b44:	93 81       	ldd	r25, Z+3	; 0x03
    5b46:	20 e0       	ldi	r18, 0x00	; 0
    5b48:	30 e0       	ldi	r19, 0x00	; 0
    5b4a:	4a e7       	ldi	r20, 0x7A	; 122
    5b4c:	55 e4       	ldi	r21, 0x45	; 69
    5b4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5b52:	dc 01       	movw	r26, r24
    5b54:	cb 01       	movw	r24, r22
    5b56:	f8 01       	movw	r30, r16
    5b58:	80 83       	st	Z, r24
    5b5a:	91 83       	std	Z+1, r25	; 0x01
    5b5c:	a2 83       	std	Z+2, r26	; 0x02
    5b5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5b60:	fe 01       	movw	r30, r28
    5b62:	e7 59       	subi	r30, 0x97	; 151
    5b64:	ff 4f       	sbci	r31, 0xFF	; 255
    5b66:	60 81       	ld	r22, Z
    5b68:	71 81       	ldd	r23, Z+1	; 0x01
    5b6a:	82 81       	ldd	r24, Z+2	; 0x02
    5b6c:	93 81       	ldd	r25, Z+3	; 0x03
    5b6e:	20 e0       	ldi	r18, 0x00	; 0
    5b70:	30 e0       	ldi	r19, 0x00	; 0
    5b72:	40 e8       	ldi	r20, 0x80	; 128
    5b74:	5f e3       	ldi	r21, 0x3F	; 63
    5b76:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    5b7a:	88 23       	and	r24, r24
    5b7c:	44 f4       	brge	.+16     	; 0x5b8e <main+0x132a>
		__ticks = 1;
    5b7e:	fe 01       	movw	r30, r28
    5b80:	e9 59       	subi	r30, 0x99	; 153
    5b82:	ff 4f       	sbci	r31, 0xFF	; 255
    5b84:	81 e0       	ldi	r24, 0x01	; 1
    5b86:	90 e0       	ldi	r25, 0x00	; 0
    5b88:	91 83       	std	Z+1, r25	; 0x01
    5b8a:	80 83       	st	Z, r24
    5b8c:	64 c0       	rjmp	.+200    	; 0x5c56 <main+0x13f2>
	else if (__tmp > 65535)
    5b8e:	fe 01       	movw	r30, r28
    5b90:	e7 59       	subi	r30, 0x97	; 151
    5b92:	ff 4f       	sbci	r31, 0xFF	; 255
    5b94:	60 81       	ld	r22, Z
    5b96:	71 81       	ldd	r23, Z+1	; 0x01
    5b98:	82 81       	ldd	r24, Z+2	; 0x02
    5b9a:	93 81       	ldd	r25, Z+3	; 0x03
    5b9c:	20 e0       	ldi	r18, 0x00	; 0
    5b9e:	3f ef       	ldi	r19, 0xFF	; 255
    5ba0:	4f e7       	ldi	r20, 0x7F	; 127
    5ba2:	57 e4       	ldi	r21, 0x47	; 71
    5ba4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    5ba8:	18 16       	cp	r1, r24
    5baa:	0c f0       	brlt	.+2      	; 0x5bae <main+0x134a>
    5bac:	43 c0       	rjmp	.+134    	; 0x5c34 <main+0x13d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bae:	fe 01       	movw	r30, r28
    5bb0:	e3 59       	subi	r30, 0x93	; 147
    5bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb4:	60 81       	ld	r22, Z
    5bb6:	71 81       	ldd	r23, Z+1	; 0x01
    5bb8:	82 81       	ldd	r24, Z+2	; 0x02
    5bba:	93 81       	ldd	r25, Z+3	; 0x03
    5bbc:	20 e0       	ldi	r18, 0x00	; 0
    5bbe:	30 e0       	ldi	r19, 0x00	; 0
    5bc0:	40 e2       	ldi	r20, 0x20	; 32
    5bc2:	51 e4       	ldi	r21, 0x41	; 65
    5bc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5bc8:	dc 01       	movw	r26, r24
    5bca:	cb 01       	movw	r24, r22
    5bcc:	8e 01       	movw	r16, r28
    5bce:	09 59       	subi	r16, 0x99	; 153
    5bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    5bd2:	bc 01       	movw	r22, r24
    5bd4:	cd 01       	movw	r24, r26
    5bd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5bda:	dc 01       	movw	r26, r24
    5bdc:	cb 01       	movw	r24, r22
    5bde:	f8 01       	movw	r30, r16
    5be0:	91 83       	std	Z+1, r25	; 0x01
    5be2:	80 83       	st	Z, r24
    5be4:	1f c0       	rjmp	.+62     	; 0x5c24 <main+0x13c0>
    5be6:	fe 01       	movw	r30, r28
    5be8:	eb 59       	subi	r30, 0x9B	; 155
    5bea:	ff 4f       	sbci	r31, 0xFF	; 255
    5bec:	80 e9       	ldi	r24, 0x90	; 144
    5bee:	91 e0       	ldi	r25, 0x01	; 1
    5bf0:	91 83       	std	Z+1, r25	; 0x01
    5bf2:	80 83       	st	Z, r24
    5bf4:	fe 01       	movw	r30, r28
    5bf6:	eb 59       	subi	r30, 0x9B	; 155
    5bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bfa:	80 81       	ld	r24, Z
    5bfc:	91 81       	ldd	r25, Z+1	; 0x01
    5bfe:	01 97       	sbiw	r24, 0x01	; 1
    5c00:	f1 f7       	brne	.-4      	; 0x5bfe <main+0x139a>
    5c02:	fe 01       	movw	r30, r28
    5c04:	eb 59       	subi	r30, 0x9B	; 155
    5c06:	ff 4f       	sbci	r31, 0xFF	; 255
    5c08:	91 83       	std	Z+1, r25	; 0x01
    5c0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c0c:	de 01       	movw	r26, r28
    5c0e:	a9 59       	subi	r26, 0x99	; 153
    5c10:	bf 4f       	sbci	r27, 0xFF	; 255
    5c12:	fe 01       	movw	r30, r28
    5c14:	e9 59       	subi	r30, 0x99	; 153
    5c16:	ff 4f       	sbci	r31, 0xFF	; 255
    5c18:	80 81       	ld	r24, Z
    5c1a:	91 81       	ldd	r25, Z+1	; 0x01
    5c1c:	01 97       	sbiw	r24, 0x01	; 1
    5c1e:	11 96       	adiw	r26, 0x01	; 1
    5c20:	9c 93       	st	X, r25
    5c22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c24:	fe 01       	movw	r30, r28
    5c26:	e9 59       	subi	r30, 0x99	; 153
    5c28:	ff 4f       	sbci	r31, 0xFF	; 255
    5c2a:	80 81       	ld	r24, Z
    5c2c:	91 81       	ldd	r25, Z+1	; 0x01
    5c2e:	00 97       	sbiw	r24, 0x00	; 0
    5c30:	d1 f6       	brne	.-76     	; 0x5be6 <main+0x1382>
    5c32:	27 c0       	rjmp	.+78     	; 0x5c82 <main+0x141e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c34:	8e 01       	movw	r16, r28
    5c36:	09 59       	subi	r16, 0x99	; 153
    5c38:	1f 4f       	sbci	r17, 0xFF	; 255
    5c3a:	fe 01       	movw	r30, r28
    5c3c:	e7 59       	subi	r30, 0x97	; 151
    5c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c40:	60 81       	ld	r22, Z
    5c42:	71 81       	ldd	r23, Z+1	; 0x01
    5c44:	82 81       	ldd	r24, Z+2	; 0x02
    5c46:	93 81       	ldd	r25, Z+3	; 0x03
    5c48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5c4c:	dc 01       	movw	r26, r24
    5c4e:	cb 01       	movw	r24, r22
    5c50:	f8 01       	movw	r30, r16
    5c52:	91 83       	std	Z+1, r25	; 0x01
    5c54:	80 83       	st	Z, r24
    5c56:	de 01       	movw	r26, r28
    5c58:	ad 59       	subi	r26, 0x9D	; 157
    5c5a:	bf 4f       	sbci	r27, 0xFF	; 255
    5c5c:	fe 01       	movw	r30, r28
    5c5e:	e9 59       	subi	r30, 0x99	; 153
    5c60:	ff 4f       	sbci	r31, 0xFF	; 255
    5c62:	80 81       	ld	r24, Z
    5c64:	91 81       	ldd	r25, Z+1	; 0x01
    5c66:	8d 93       	st	X+, r24
    5c68:	9c 93       	st	X, r25
    5c6a:	fe 01       	movw	r30, r28
    5c6c:	ed 59       	subi	r30, 0x9D	; 157
    5c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c70:	80 81       	ld	r24, Z
    5c72:	91 81       	ldd	r25, Z+1	; 0x01
    5c74:	01 97       	sbiw	r24, 0x01	; 1
    5c76:	f1 f7       	brne	.-4      	; 0x5c74 <main+0x1410>
    5c78:	fe 01       	movw	r30, r28
    5c7a:	ed 59       	subi	r30, 0x9D	; 157
    5c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c7e:	91 83       	std	Z+1, r25	; 0x01
    5c80:	80 83       	st	Z, r24
						_delay_ms(1000);
						LCD_clearScreen();
    5c82:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
					}

					while(1) /*Loop till break*/
					{
						pressed_key = KEYPAD_getPressedKey();
    5c86:	0e 94 f6 17 	call	0x2fec	; 0x2fec <KEYPAD_getPressedKey>
    5c8a:	fe 01       	movw	r30, r28
    5c8c:	e2 50       	subi	r30, 0x02	; 2
    5c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c90:	80 83       	st	Z, r24
    5c92:	fe 01       	movw	r30, r28
    5c94:	e1 5a       	subi	r30, 0xA1	; 161
    5c96:	ff 4f       	sbci	r31, 0xFF	; 255
    5c98:	80 e0       	ldi	r24, 0x00	; 0
    5c9a:	90 e0       	ldi	r25, 0x00	; 0
    5c9c:	aa ef       	ldi	r26, 0xFA	; 250
    5c9e:	b3 e4       	ldi	r27, 0x43	; 67
    5ca0:	80 83       	st	Z, r24
    5ca2:	91 83       	std	Z+1, r25	; 0x01
    5ca4:	a2 83       	std	Z+2, r26	; 0x02
    5ca6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ca8:	8e 01       	movw	r16, r28
    5caa:	05 5a       	subi	r16, 0xA5	; 165
    5cac:	1f 4f       	sbci	r17, 0xFF	; 255
    5cae:	fe 01       	movw	r30, r28
    5cb0:	e1 5a       	subi	r30, 0xA1	; 161
    5cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb4:	60 81       	ld	r22, Z
    5cb6:	71 81       	ldd	r23, Z+1	; 0x01
    5cb8:	82 81       	ldd	r24, Z+2	; 0x02
    5cba:	93 81       	ldd	r25, Z+3	; 0x03
    5cbc:	20 e0       	ldi	r18, 0x00	; 0
    5cbe:	30 e0       	ldi	r19, 0x00	; 0
    5cc0:	4a e7       	ldi	r20, 0x7A	; 122
    5cc2:	55 e4       	ldi	r21, 0x45	; 69
    5cc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5cc8:	dc 01       	movw	r26, r24
    5cca:	cb 01       	movw	r24, r22
    5ccc:	f8 01       	movw	r30, r16
    5cce:	80 83       	st	Z, r24
    5cd0:	91 83       	std	Z+1, r25	; 0x01
    5cd2:	a2 83       	std	Z+2, r26	; 0x02
    5cd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5cd6:	fe 01       	movw	r30, r28
    5cd8:	e5 5a       	subi	r30, 0xA5	; 165
    5cda:	ff 4f       	sbci	r31, 0xFF	; 255
    5cdc:	60 81       	ld	r22, Z
    5cde:	71 81       	ldd	r23, Z+1	; 0x01
    5ce0:	82 81       	ldd	r24, Z+2	; 0x02
    5ce2:	93 81       	ldd	r25, Z+3	; 0x03
    5ce4:	20 e0       	ldi	r18, 0x00	; 0
    5ce6:	30 e0       	ldi	r19, 0x00	; 0
    5ce8:	40 e8       	ldi	r20, 0x80	; 128
    5cea:	5f e3       	ldi	r21, 0x3F	; 63
    5cec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    5cf0:	88 23       	and	r24, r24
    5cf2:	44 f4       	brge	.+16     	; 0x5d04 <main+0x14a0>
		__ticks = 1;
    5cf4:	fe 01       	movw	r30, r28
    5cf6:	e7 5a       	subi	r30, 0xA7	; 167
    5cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    5cfa:	81 e0       	ldi	r24, 0x01	; 1
    5cfc:	90 e0       	ldi	r25, 0x00	; 0
    5cfe:	91 83       	std	Z+1, r25	; 0x01
    5d00:	80 83       	st	Z, r24
    5d02:	64 c0       	rjmp	.+200    	; 0x5dcc <main+0x1568>
	else if (__tmp > 65535)
    5d04:	fe 01       	movw	r30, r28
    5d06:	e5 5a       	subi	r30, 0xA5	; 165
    5d08:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0a:	60 81       	ld	r22, Z
    5d0c:	71 81       	ldd	r23, Z+1	; 0x01
    5d0e:	82 81       	ldd	r24, Z+2	; 0x02
    5d10:	93 81       	ldd	r25, Z+3	; 0x03
    5d12:	20 e0       	ldi	r18, 0x00	; 0
    5d14:	3f ef       	ldi	r19, 0xFF	; 255
    5d16:	4f e7       	ldi	r20, 0x7F	; 127
    5d18:	57 e4       	ldi	r21, 0x47	; 71
    5d1a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    5d1e:	18 16       	cp	r1, r24
    5d20:	0c f0       	brlt	.+2      	; 0x5d24 <main+0x14c0>
    5d22:	43 c0       	rjmp	.+134    	; 0x5daa <main+0x1546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d24:	fe 01       	movw	r30, r28
    5d26:	e1 5a       	subi	r30, 0xA1	; 161
    5d28:	ff 4f       	sbci	r31, 0xFF	; 255
    5d2a:	60 81       	ld	r22, Z
    5d2c:	71 81       	ldd	r23, Z+1	; 0x01
    5d2e:	82 81       	ldd	r24, Z+2	; 0x02
    5d30:	93 81       	ldd	r25, Z+3	; 0x03
    5d32:	20 e0       	ldi	r18, 0x00	; 0
    5d34:	30 e0       	ldi	r19, 0x00	; 0
    5d36:	40 e2       	ldi	r20, 0x20	; 32
    5d38:	51 e4       	ldi	r21, 0x41	; 65
    5d3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    5d3e:	dc 01       	movw	r26, r24
    5d40:	cb 01       	movw	r24, r22
    5d42:	8e 01       	movw	r16, r28
    5d44:	07 5a       	subi	r16, 0xA7	; 167
    5d46:	1f 4f       	sbci	r17, 0xFF	; 255
    5d48:	bc 01       	movw	r22, r24
    5d4a:	cd 01       	movw	r24, r26
    5d4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5d50:	dc 01       	movw	r26, r24
    5d52:	cb 01       	movw	r24, r22
    5d54:	f8 01       	movw	r30, r16
    5d56:	91 83       	std	Z+1, r25	; 0x01
    5d58:	80 83       	st	Z, r24
    5d5a:	1f c0       	rjmp	.+62     	; 0x5d9a <main+0x1536>
    5d5c:	fe 01       	movw	r30, r28
    5d5e:	e9 5a       	subi	r30, 0xA9	; 169
    5d60:	ff 4f       	sbci	r31, 0xFF	; 255
    5d62:	80 e9       	ldi	r24, 0x90	; 144
    5d64:	91 e0       	ldi	r25, 0x01	; 1
    5d66:	91 83       	std	Z+1, r25	; 0x01
    5d68:	80 83       	st	Z, r24
    5d6a:	fe 01       	movw	r30, r28
    5d6c:	e9 5a       	subi	r30, 0xA9	; 169
    5d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d70:	80 81       	ld	r24, Z
    5d72:	91 81       	ldd	r25, Z+1	; 0x01
    5d74:	01 97       	sbiw	r24, 0x01	; 1
    5d76:	f1 f7       	brne	.-4      	; 0x5d74 <main+0x1510>
    5d78:	fe 01       	movw	r30, r28
    5d7a:	e9 5a       	subi	r30, 0xA9	; 169
    5d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d7e:	91 83       	std	Z+1, r25	; 0x01
    5d80:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d82:	de 01       	movw	r26, r28
    5d84:	a7 5a       	subi	r26, 0xA7	; 167
    5d86:	bf 4f       	sbci	r27, 0xFF	; 255
    5d88:	fe 01       	movw	r30, r28
    5d8a:	e7 5a       	subi	r30, 0xA7	; 167
    5d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d8e:	80 81       	ld	r24, Z
    5d90:	91 81       	ldd	r25, Z+1	; 0x01
    5d92:	01 97       	sbiw	r24, 0x01	; 1
    5d94:	11 96       	adiw	r26, 0x01	; 1
    5d96:	9c 93       	st	X, r25
    5d98:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d9a:	fe 01       	movw	r30, r28
    5d9c:	e7 5a       	subi	r30, 0xA7	; 167
    5d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    5da0:	80 81       	ld	r24, Z
    5da2:	91 81       	ldd	r25, Z+1	; 0x01
    5da4:	00 97       	sbiw	r24, 0x00	; 0
    5da6:	d1 f6       	brne	.-76     	; 0x5d5c <main+0x14f8>
    5da8:	28 c0       	rjmp	.+80     	; 0x5dfa <main+0x1596>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5daa:	8e 01       	movw	r16, r28
    5dac:	07 5a       	subi	r16, 0xA7	; 167
    5dae:	1f 4f       	sbci	r17, 0xFF	; 255
    5db0:	fe 01       	movw	r30, r28
    5db2:	e5 5a       	subi	r30, 0xA5	; 165
    5db4:	ff 4f       	sbci	r31, 0xFF	; 255
    5db6:	60 81       	ld	r22, Z
    5db8:	71 81       	ldd	r23, Z+1	; 0x01
    5dba:	82 81       	ldd	r24, Z+2	; 0x02
    5dbc:	93 81       	ldd	r25, Z+3	; 0x03
    5dbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    5dc2:	dc 01       	movw	r26, r24
    5dc4:	cb 01       	movw	r24, r22
    5dc6:	f8 01       	movw	r30, r16
    5dc8:	91 83       	std	Z+1, r25	; 0x01
    5dca:	80 83       	st	Z, r24
    5dcc:	de 01       	movw	r26, r28
    5dce:	ab 5a       	subi	r26, 0xAB	; 171
    5dd0:	bf 4f       	sbci	r27, 0xFF	; 255
    5dd2:	fe 01       	movw	r30, r28
    5dd4:	e7 5a       	subi	r30, 0xA7	; 167
    5dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd8:	80 81       	ld	r24, Z
    5dda:	91 81       	ldd	r25, Z+1	; 0x01
    5ddc:	11 96       	adiw	r26, 0x01	; 1
    5dde:	9c 93       	st	X, r25
    5de0:	8e 93       	st	-X, r24
    5de2:	fe 01       	movw	r30, r28
    5de4:	eb 5a       	subi	r30, 0xAB	; 171
    5de6:	ff 4f       	sbci	r31, 0xFF	; 255
    5de8:	80 81       	ld	r24, Z
    5dea:	91 81       	ldd	r25, Z+1	; 0x01
    5dec:	01 97       	sbiw	r24, 0x01	; 1
    5dee:	f1 f7       	brne	.-4      	; 0x5dec <main+0x1588>
    5df0:	fe 01       	movw	r30, r28
    5df2:	eb 5a       	subi	r30, 0xAB	; 171
    5df4:	ff 4f       	sbci	r31, 0xFF	; 255
    5df6:	91 83       	std	Z+1, r25	; 0x01
    5df8:	80 83       	st	Z, r24
						_delay_ms(DELAY_BETWEEN_CLICKS_IN_MS);

						/*To adjust the LCD screen if it reaches 17 places*/
						if(col == 16)
    5dfa:	fe 01       	movw	r30, r28
    5dfc:	e0 52       	subi	r30, 0x20	; 32
    5dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    5e00:	80 81       	ld	r24, Z
    5e02:	80 31       	cpi	r24, 0x10	; 16
    5e04:	99 f4       	brne	.+38     	; 0x5e2c <main+0x15c8>
						{
							row = 1;
    5e06:	fe 01       	movw	r30, r28
    5e08:	ef 51       	subi	r30, 0x1F	; 31
    5e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e0c:	81 e0       	ldi	r24, 0x01	; 1
    5e0e:	80 83       	st	Z, r24
							col = 0;
    5e10:	fe 01       	movw	r30, r28
    5e12:	e0 52       	subi	r30, 0x20	; 32
    5e14:	ff 4f       	sbci	r31, 0xFF	; 255
    5e16:	10 82       	st	Z, r1
							LCD_moveCursor(row,col);
    5e18:	fe 01       	movw	r30, r28
    5e1a:	ef 51       	subi	r30, 0x1F	; 31
    5e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e1e:	de 01       	movw	r26, r28
    5e20:	a0 52       	subi	r26, 0x20	; 32
    5e22:	bf 4f       	sbci	r27, 0xFF	; 255
    5e24:	80 81       	ld	r24, Z
    5e26:	6c 91       	ld	r22, X
    5e28:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
						}


						if(test_case_bit_number == pins_number && pressed_key != OK_BUTTON && pressed_key != REMOVING_BUTTON ) /*The user entered all the test cases */
    5e2c:	fe 01       	movw	r30, r28
    5e2e:	ee 51       	subi	r30, 0x1E	; 30
    5e30:	ff 4f       	sbci	r31, 0xFF	; 255
    5e32:	de 01       	movw	r26, r28
    5e34:	a8 51       	subi	r26, 0x18	; 24
    5e36:	bf 4f       	sbci	r27, 0xFF	; 255
    5e38:	90 81       	ld	r25, Z
    5e3a:	8c 91       	ld	r24, X
    5e3c:	98 17       	cp	r25, r24
    5e3e:	69 f4       	brne	.+26     	; 0x5e5a <main+0x15f6>
    5e40:	fe 01       	movw	r30, r28
    5e42:	e2 50       	subi	r30, 0x02	; 2
    5e44:	ff 4f       	sbci	r31, 0xFF	; 255
    5e46:	80 81       	ld	r24, Z
    5e48:	80 32       	cpi	r24, 0x20	; 32
    5e4a:	39 f0       	breq	.+14     	; 0x5e5a <main+0x15f6>
    5e4c:	fe 01       	movw	r30, r28
    5e4e:	e2 50       	subi	r30, 0x02	; 2
    5e50:	ff 4f       	sbci	r31, 0xFF	; 255
    5e52:	80 81       	ld	r24, Z
    5e54:	8f 32       	cpi	r24, 0x2F	; 47
    5e56:	09 f0       	breq	.+2      	; 0x5e5a <main+0x15f6>
    5e58:	16 cf       	rjmp	.-468    	; 0x5c86 <main+0x1422>
							continue;

						if(pressed_key == 0) /*So, the user enters 0 */
    5e5a:	fe 01       	movw	r30, r28
    5e5c:	e2 50       	subi	r30, 0x02	; 2
    5e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e60:	80 81       	ld	r24, Z
    5e62:	88 23       	and	r24, r24
    5e64:	31 f5       	brne	.+76     	; 0x5eb2 <main+0x164e>
						{
							LCD_writeChar(ch1);
    5e66:	fe 01       	movw	r30, r28
    5e68:	e1 52       	subi	r30, 0x21	; 33
    5e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e6c:	80 81       	ld	r24, Z
    5e6e:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <LCD_writeChar>
							test_case[test_case_bit_number] = 0;
    5e72:	fe 01       	movw	r30, r28
    5e74:	ee 51       	subi	r30, 0x1E	; 30
    5e76:	ff 4f       	sbci	r31, 0xFF	; 255
    5e78:	80 81       	ld	r24, Z
    5e7a:	28 2f       	mov	r18, r24
    5e7c:	30 e0       	ldi	r19, 0x00	; 0
    5e7e:	ce 01       	movw	r24, r28
    5e80:	81 5e       	subi	r24, 0xE1	; 225
    5e82:	9e 4f       	sbci	r25, 0xFE	; 254
    5e84:	fc 01       	movw	r30, r24
    5e86:	e2 0f       	add	r30, r18
    5e88:	f3 1f       	adc	r31, r19
    5e8a:	10 82       	st	Z, r1
							test_case_bit_number++;
    5e8c:	de 01       	movw	r26, r28
    5e8e:	ae 51       	subi	r26, 0x1E	; 30
    5e90:	bf 4f       	sbci	r27, 0xFF	; 255
    5e92:	fe 01       	movw	r30, r28
    5e94:	ee 51       	subi	r30, 0x1E	; 30
    5e96:	ff 4f       	sbci	r31, 0xFF	; 255
    5e98:	80 81       	ld	r24, Z
    5e9a:	8f 5f       	subi	r24, 0xFF	; 255
    5e9c:	8c 93       	st	X, r24
							col++;
    5e9e:	de 01       	movw	r26, r28
    5ea0:	a0 52       	subi	r26, 0x20	; 32
    5ea2:	bf 4f       	sbci	r27, 0xFF	; 255
    5ea4:	fe 01       	movw	r30, r28
    5ea6:	e0 52       	subi	r30, 0x20	; 32
    5ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eaa:	80 81       	ld	r24, Z
    5eac:	8f 5f       	subi	r24, 0xFF	; 255
    5eae:	8c 93       	st	X, r24
    5eb0:	ea ce       	rjmp	.-556    	; 0x5c86 <main+0x1422>

						}else if(pressed_key == 1)/*so the user enters 1*/
    5eb2:	fe 01       	movw	r30, r28
    5eb4:	e2 50       	subi	r30, 0x02	; 2
    5eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb8:	80 81       	ld	r24, Z
    5eba:	81 30       	cpi	r24, 0x01	; 1
    5ebc:	39 f5       	brne	.+78     	; 0x5f0c <main+0x16a8>
						{
							LCD_writeChar(ch2);
    5ebe:	fe 01       	movw	r30, r28
    5ec0:	e2 52       	subi	r30, 0x22	; 34
    5ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec4:	80 81       	ld	r24, Z
    5ec6:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <LCD_writeChar>
							test_case[test_case_bit_number] = 1;
    5eca:	fe 01       	movw	r30, r28
    5ecc:	ee 51       	subi	r30, 0x1E	; 30
    5ece:	ff 4f       	sbci	r31, 0xFF	; 255
    5ed0:	80 81       	ld	r24, Z
    5ed2:	28 2f       	mov	r18, r24
    5ed4:	30 e0       	ldi	r19, 0x00	; 0
    5ed6:	ce 01       	movw	r24, r28
    5ed8:	81 5e       	subi	r24, 0xE1	; 225
    5eda:	9e 4f       	sbci	r25, 0xFE	; 254
    5edc:	fc 01       	movw	r30, r24
    5ede:	e2 0f       	add	r30, r18
    5ee0:	f3 1f       	adc	r31, r19
    5ee2:	81 e0       	ldi	r24, 0x01	; 1
    5ee4:	80 83       	st	Z, r24
							test_case_bit_number++;
    5ee6:	de 01       	movw	r26, r28
    5ee8:	ae 51       	subi	r26, 0x1E	; 30
    5eea:	bf 4f       	sbci	r27, 0xFF	; 255
    5eec:	fe 01       	movw	r30, r28
    5eee:	ee 51       	subi	r30, 0x1E	; 30
    5ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ef2:	80 81       	ld	r24, Z
    5ef4:	8f 5f       	subi	r24, 0xFF	; 255
    5ef6:	8c 93       	st	X, r24
							col++;
    5ef8:	de 01       	movw	r26, r28
    5efa:	a0 52       	subi	r26, 0x20	; 32
    5efc:	bf 4f       	sbci	r27, 0xFF	; 255
    5efe:	fe 01       	movw	r30, r28
    5f00:	e0 52       	subi	r30, 0x20	; 32
    5f02:	ff 4f       	sbci	r31, 0xFF	; 255
    5f04:	80 81       	ld	r24, Z
    5f06:	8f 5f       	subi	r24, 0xFF	; 255
    5f08:	8c 93       	st	X, r24
    5f0a:	bd ce       	rjmp	.-646    	; 0x5c86 <main+0x1422>

						}
						else if(pressed_key == REMOVING_BUTTON)
    5f0c:	fe 01       	movw	r30, r28
    5f0e:	e2 50       	subi	r30, 0x02	; 2
    5f10:	ff 4f       	sbci	r31, 0xFF	; 255
    5f12:	80 81       	ld	r24, Z
    5f14:	8f 32       	cpi	r24, 0x2F	; 47
    5f16:	09 f0       	breq	.+2      	; 0x5f1a <main+0x16b6>
    5f18:	3f c0       	rjmp	.+126    	; 0x5f98 <main+0x1734>
						{
							/*I was in the first place in second row, so I should go to upper one*/
							if(col == 0 && row == 1)
    5f1a:	fe 01       	movw	r30, r28
    5f1c:	e0 52       	subi	r30, 0x20	; 32
    5f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f20:	80 81       	ld	r24, Z
    5f22:	88 23       	and	r24, r24
    5f24:	79 f4       	brne	.+30     	; 0x5f44 <main+0x16e0>
    5f26:	fe 01       	movw	r30, r28
    5f28:	ef 51       	subi	r30, 0x1F	; 31
    5f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f2c:	80 81       	ld	r24, Z
    5f2e:	81 30       	cpi	r24, 0x01	; 1
    5f30:	49 f4       	brne	.+18     	; 0x5f44 <main+0x16e0>
							{/*I must go to upper row*/
								row = 0;
    5f32:	fe 01       	movw	r30, r28
    5f34:	ef 51       	subi	r30, 0x1F	; 31
    5f36:	ff 4f       	sbci	r31, 0xFF	; 255
    5f38:	10 82       	st	Z, r1
								col = 16; /*it will be decremented below*/
    5f3a:	fe 01       	movw	r30, r28
    5f3c:	e0 52       	subi	r30, 0x20	; 32
    5f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f40:	80 e1       	ldi	r24, 0x10	; 16
    5f42:	80 83       	st	Z, r24
							}
							test_case_bit_number--;
    5f44:	de 01       	movw	r26, r28
    5f46:	ae 51       	subi	r26, 0x1E	; 30
    5f48:	bf 4f       	sbci	r27, 0xFF	; 255
    5f4a:	fe 01       	movw	r30, r28
    5f4c:	ee 51       	subi	r30, 0x1E	; 30
    5f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f50:	80 81       	ld	r24, Z
    5f52:	81 50       	subi	r24, 0x01	; 1
    5f54:	8c 93       	st	X, r24
							col--;
    5f56:	de 01       	movw	r26, r28
    5f58:	a0 52       	subi	r26, 0x20	; 32
    5f5a:	bf 4f       	sbci	r27, 0xFF	; 255
    5f5c:	fe 01       	movw	r30, r28
    5f5e:	e0 52       	subi	r30, 0x20	; 32
    5f60:	ff 4f       	sbci	r31, 0xFF	; 255
    5f62:	80 81       	ld	r24, Z
    5f64:	81 50       	subi	r24, 0x01	; 1
    5f66:	8c 93       	st	X, r24
							LCD_moveCursor(row,col);
    5f68:	fe 01       	movw	r30, r28
    5f6a:	ef 51       	subi	r30, 0x1F	; 31
    5f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f6e:	de 01       	movw	r26, r28
    5f70:	a0 52       	subi	r26, 0x20	; 32
    5f72:	bf 4f       	sbci	r27, 0xFF	; 255
    5f74:	80 81       	ld	r24, Z
    5f76:	6c 91       	ld	r22, X
    5f78:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
							LCD_writeChar(' ');
    5f7c:	80 e2       	ldi	r24, 0x20	; 32
    5f7e:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <LCD_writeChar>
							LCD_moveCursor(row,col);
    5f82:	fe 01       	movw	r30, r28
    5f84:	ef 51       	subi	r30, 0x1F	; 31
    5f86:	ff 4f       	sbci	r31, 0xFF	; 255
    5f88:	de 01       	movw	r26, r28
    5f8a:	a0 52       	subi	r26, 0x20	; 32
    5f8c:	bf 4f       	sbci	r27, 0xFF	; 255
    5f8e:	80 81       	ld	r24, Z
    5f90:	6c 91       	ld	r22, X
    5f92:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
    5f96:	77 ce       	rjmp	.-786    	; 0x5c86 <main+0x1422>
						}else if(pressed_key == OK_BUTTON)
    5f98:	fe 01       	movw	r30, r28
    5f9a:	e2 50       	subi	r30, 0x02	; 2
    5f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f9e:	80 81       	ld	r24, Z
    5fa0:	80 32       	cpi	r24, 0x20	; 32
    5fa2:	09 f0       	breq	.+2      	; 0x5fa6 <main+0x1742>
    5fa4:	70 ce       	rjmp	.-800    	; 0x5c86 <main+0x1422>
						{
							/*The user pressed OK*/

							if(test_case_bit_number == pins_number) /*The counter must be equal to pins number*/
    5fa6:	fe 01       	movw	r30, r28
    5fa8:	ee 51       	subi	r30, 0x1E	; 30
    5faa:	ff 4f       	sbci	r31, 0xFF	; 255
    5fac:	de 01       	movw	r26, r28
    5fae:	a8 51       	subi	r26, 0x18	; 24
    5fb0:	bf 4f       	sbci	r27, 0xFF	; 255
    5fb2:	90 81       	ld	r25, Z
    5fb4:	8c 91       	ld	r24, X
    5fb6:	98 17       	cp	r25, r24
    5fb8:	09 f0       	breq	.+2      	; 0x5fbc <main+0x1758>
    5fba:	65 ce       	rjmp	.-822    	; 0x5c86 <main+0x1422>


					/*************Add this test case in EEPROM*******************/

					/*check if the memory is full or not*/
					LCD_clearScreen();
    5fbc:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>


					adjust_testcase_to_16_bit(test_case,pins_number); /*adjust the test case to 16 bit*/
    5fc0:	ce 01       	movw	r24, r28
    5fc2:	81 5e       	subi	r24, 0xE1	; 225
    5fc4:	9e 4f       	sbci	r25, 0xFE	; 254
    5fc6:	fe 01       	movw	r30, r28
    5fc8:	e8 51       	subi	r30, 0x18	; 24
    5fca:	ff 4f       	sbci	r31, 0xFF	; 255
    5fcc:	60 81       	ld	r22, Z
    5fce:	0e 94 48 13 	call	0x2690	; 0x2690 <adjust_testcase_to_16_bit>

					if(avi_place >= 0xFFFC) /*so the memory is full*/
    5fd2:	fe 01       	movw	r30, r28
    5fd4:	e3 5e       	subi	r30, 0xE3	; 227
    5fd6:	fe 4f       	sbci	r31, 0xFE	; 254
    5fd8:	80 81       	ld	r24, Z
    5fda:	91 81       	ldd	r25, Z+1	; 0x01
    5fdc:	ff ef       	ldi	r31, 0xFF	; 255
    5fde:	8c 3f       	cpi	r24, 0xFC	; 252
    5fe0:	9f 07       	cpc	r25, r31
    5fe2:	38 f0       	brcs	.+14     	; 0x5ff2 <main+0x178e>
					{
						LCD_clearScreen();
    5fe4:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
						LCD_writeString("No space in memory");
    5fe8:	81 ea       	ldi	r24, 0xA1	; 161
    5fea:	91 e0       	ldi	r25, 0x01	; 1
    5fec:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
    5ff0:	b3 c2       	rjmp	.+1382   	; 0x6558 <main+0x1cf4>
					}

					/*Save test case in EEPROM*/

					/*Change the test_case array to uint16 to be easy to save it in memory*/
					uint16 temp_test_case =0x0000;
    5ff2:	fe 01       	movw	r30, r28
    5ff4:	eb 52       	subi	r30, 0x2B	; 43
    5ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ff8:	11 82       	std	Z+1, r1	; 0x01
    5ffa:	10 82       	st	Z, r1

					for(uint8 i=0 ; i<MAX_PINS_FOR_IC ; i++)
    5ffc:	fe 01       	movw	r30, r28
    5ffe:	ec 52       	subi	r30, 0x2C	; 44
    6000:	ff 4f       	sbci	r31, 0xFF	; 255
    6002:	10 82       	st	Z, r1
    6004:	5e c0       	rjmp	.+188    	; 0x60c2 <main+0x185e>
					{
						uint8 bit = test_case[MAX_PINS_FOR_IC-i-1];
    6006:	fe 01       	movw	r30, r28
    6008:	ec 52       	subi	r30, 0x2C	; 44
    600a:	ff 4f       	sbci	r31, 0xFF	; 255
    600c:	80 81       	ld	r24, Z
    600e:	28 2f       	mov	r18, r24
    6010:	30 e0       	ldi	r19, 0x00	; 0
    6012:	8f e0       	ldi	r24, 0x0F	; 15
    6014:	90 e0       	ldi	r25, 0x00	; 0
    6016:	ac 01       	movw	r20, r24
    6018:	42 1b       	sub	r20, r18
    601a:	53 0b       	sbc	r21, r19
    601c:	9a 01       	movw	r18, r20
    601e:	de 01       	movw	r26, r28
    6020:	ad 52       	subi	r26, 0x2D	; 45
    6022:	bf 4f       	sbci	r27, 0xFF	; 255
    6024:	ce 01       	movw	r24, r28
    6026:	81 5e       	subi	r24, 0xE1	; 225
    6028:	9e 4f       	sbci	r25, 0xFE	; 254
    602a:	fc 01       	movw	r30, r24
    602c:	e2 0f       	add	r30, r18
    602e:	f3 1f       	adc	r31, r19
    6030:	80 81       	ld	r24, Z
    6032:	8c 93       	st	X, r24
						if(bit==1)
    6034:	fe 01       	movw	r30, r28
    6036:	ed 52       	subi	r30, 0x2D	; 45
    6038:	ff 4f       	sbci	r31, 0xFF	; 255
    603a:	80 81       	ld	r24, Z
    603c:	81 30       	cpi	r24, 0x01	; 1
    603e:	e1 f4       	brne	.+56     	; 0x6078 <main+0x1814>
							SET_BIT(temp_test_case,i);
    6040:	fe 01       	movw	r30, r28
    6042:	ec 52       	subi	r30, 0x2C	; 44
    6044:	ff 4f       	sbci	r31, 0xFF	; 255
    6046:	80 81       	ld	r24, Z
    6048:	28 2f       	mov	r18, r24
    604a:	30 e0       	ldi	r19, 0x00	; 0
    604c:	81 e0       	ldi	r24, 0x01	; 1
    604e:	90 e0       	ldi	r25, 0x00	; 0
    6050:	02 c0       	rjmp	.+4      	; 0x6056 <main+0x17f2>
    6052:	88 0f       	add	r24, r24
    6054:	99 1f       	adc	r25, r25
    6056:	2a 95       	dec	r18
    6058:	e2 f7       	brpl	.-8      	; 0x6052 <main+0x17ee>
    605a:	9c 01       	movw	r18, r24
    605c:	de 01       	movw	r26, r28
    605e:	ab 52       	subi	r26, 0x2B	; 43
    6060:	bf 4f       	sbci	r27, 0xFF	; 255
    6062:	fe 01       	movw	r30, r28
    6064:	eb 52       	subi	r30, 0x2B	; 43
    6066:	ff 4f       	sbci	r31, 0xFF	; 255
    6068:	80 81       	ld	r24, Z
    606a:	91 81       	ldd	r25, Z+1	; 0x01
    606c:	82 2b       	or	r24, r18
    606e:	93 2b       	or	r25, r19
    6070:	11 96       	adiw	r26, 0x01	; 1
    6072:	9c 93       	st	X, r25
    6074:	8e 93       	st	-X, r24
    6076:	1c c0       	rjmp	.+56     	; 0x60b0 <main+0x184c>
						else
							CLEAR_BIT(temp_test_case,i);
    6078:	fe 01       	movw	r30, r28
    607a:	ec 52       	subi	r30, 0x2C	; 44
    607c:	ff 4f       	sbci	r31, 0xFF	; 255
    607e:	80 81       	ld	r24, Z
    6080:	28 2f       	mov	r18, r24
    6082:	30 e0       	ldi	r19, 0x00	; 0
    6084:	81 e0       	ldi	r24, 0x01	; 1
    6086:	90 e0       	ldi	r25, 0x00	; 0
    6088:	02 c0       	rjmp	.+4      	; 0x608e <main+0x182a>
    608a:	88 0f       	add	r24, r24
    608c:	99 1f       	adc	r25, r25
    608e:	2a 95       	dec	r18
    6090:	e2 f7       	brpl	.-8      	; 0x608a <main+0x1826>
    6092:	80 95       	com	r24
    6094:	90 95       	com	r25
    6096:	9c 01       	movw	r18, r24
    6098:	de 01       	movw	r26, r28
    609a:	ab 52       	subi	r26, 0x2B	; 43
    609c:	bf 4f       	sbci	r27, 0xFF	; 255
    609e:	fe 01       	movw	r30, r28
    60a0:	eb 52       	subi	r30, 0x2B	; 43
    60a2:	ff 4f       	sbci	r31, 0xFF	; 255
    60a4:	80 81       	ld	r24, Z
    60a6:	91 81       	ldd	r25, Z+1	; 0x01
    60a8:	82 23       	and	r24, r18
    60aa:	93 23       	and	r25, r19
    60ac:	8d 93       	st	X+, r24
    60ae:	9c 93       	st	X, r25
					/*Save test case in EEPROM*/

					/*Change the test_case array to uint16 to be easy to save it in memory*/
					uint16 temp_test_case =0x0000;

					for(uint8 i=0 ; i<MAX_PINS_FOR_IC ; i++)
    60b0:	de 01       	movw	r26, r28
    60b2:	ac 52       	subi	r26, 0x2C	; 44
    60b4:	bf 4f       	sbci	r27, 0xFF	; 255
    60b6:	fe 01       	movw	r30, r28
    60b8:	ec 52       	subi	r30, 0x2C	; 44
    60ba:	ff 4f       	sbci	r31, 0xFF	; 255
    60bc:	80 81       	ld	r24, Z
    60be:	8f 5f       	subi	r24, 0xFF	; 255
    60c0:	8c 93       	st	X, r24
    60c2:	fe 01       	movw	r30, r28
    60c4:	ec 52       	subi	r30, 0x2C	; 44
    60c6:	ff 4f       	sbci	r31, 0xFF	; 255
    60c8:	80 81       	ld	r24, Z
    60ca:	80 31       	cpi	r24, 0x10	; 16
    60cc:	08 f4       	brcc	.+2      	; 0x60d0 <main+0x186c>
    60ce:	9b cf       	rjmp	.-202    	; 0x6006 <main+0x17a2>
							CLEAR_BIT(temp_test_case,i);
					}



					LCD_clearScreen();
    60d0:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
					LCD_integerToString(temp_test_case);
    60d4:	fe 01       	movw	r30, r28
    60d6:	eb 52       	subi	r30, 0x2B	; 43
    60d8:	ff 4f       	sbci	r31, 0xFF	; 255
    60da:	80 81       	ld	r24, Z
    60dc:	91 81       	ldd	r25, Z+1	; 0x01
    60de:	0e 94 05 24 	call	0x480a	; 0x480a <LCD_integerToString>
    60e2:	fe 01       	movw	r30, r28
    60e4:	ef 5a       	subi	r30, 0xAF	; 175
    60e6:	ff 4f       	sbci	r31, 0xFF	; 255
    60e8:	80 e0       	ldi	r24, 0x00	; 0
    60ea:	90 e0       	ldi	r25, 0x00	; 0
    60ec:	aa ef       	ldi	r26, 0xFA	; 250
    60ee:	b3 e4       	ldi	r27, 0x43	; 67
    60f0:	80 83       	st	Z, r24
    60f2:	91 83       	std	Z+1, r25	; 0x01
    60f4:	a2 83       	std	Z+2, r26	; 0x02
    60f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60f8:	8e 01       	movw	r16, r28
    60fa:	03 5b       	subi	r16, 0xB3	; 179
    60fc:	1f 4f       	sbci	r17, 0xFF	; 255
    60fe:	fe 01       	movw	r30, r28
    6100:	ef 5a       	subi	r30, 0xAF	; 175
    6102:	ff 4f       	sbci	r31, 0xFF	; 255
    6104:	60 81       	ld	r22, Z
    6106:	71 81       	ldd	r23, Z+1	; 0x01
    6108:	82 81       	ldd	r24, Z+2	; 0x02
    610a:	93 81       	ldd	r25, Z+3	; 0x03
    610c:	20 e0       	ldi	r18, 0x00	; 0
    610e:	30 e0       	ldi	r19, 0x00	; 0
    6110:	4a e7       	ldi	r20, 0x7A	; 122
    6112:	55 e4       	ldi	r21, 0x45	; 69
    6114:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6118:	dc 01       	movw	r26, r24
    611a:	cb 01       	movw	r24, r22
    611c:	f8 01       	movw	r30, r16
    611e:	80 83       	st	Z, r24
    6120:	91 83       	std	Z+1, r25	; 0x01
    6122:	a2 83       	std	Z+2, r26	; 0x02
    6124:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6126:	fe 01       	movw	r30, r28
    6128:	e3 5b       	subi	r30, 0xB3	; 179
    612a:	ff 4f       	sbci	r31, 0xFF	; 255
    612c:	60 81       	ld	r22, Z
    612e:	71 81       	ldd	r23, Z+1	; 0x01
    6130:	82 81       	ldd	r24, Z+2	; 0x02
    6132:	93 81       	ldd	r25, Z+3	; 0x03
    6134:	20 e0       	ldi	r18, 0x00	; 0
    6136:	30 e0       	ldi	r19, 0x00	; 0
    6138:	40 e8       	ldi	r20, 0x80	; 128
    613a:	5f e3       	ldi	r21, 0x3F	; 63
    613c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    6140:	88 23       	and	r24, r24
    6142:	44 f4       	brge	.+16     	; 0x6154 <main+0x18f0>
		__ticks = 1;
    6144:	fe 01       	movw	r30, r28
    6146:	e5 5b       	subi	r30, 0xB5	; 181
    6148:	ff 4f       	sbci	r31, 0xFF	; 255
    614a:	81 e0       	ldi	r24, 0x01	; 1
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	91 83       	std	Z+1, r25	; 0x01
    6150:	80 83       	st	Z, r24
    6152:	64 c0       	rjmp	.+200    	; 0x621c <main+0x19b8>
	else if (__tmp > 65535)
    6154:	fe 01       	movw	r30, r28
    6156:	e3 5b       	subi	r30, 0xB3	; 179
    6158:	ff 4f       	sbci	r31, 0xFF	; 255
    615a:	60 81       	ld	r22, Z
    615c:	71 81       	ldd	r23, Z+1	; 0x01
    615e:	82 81       	ldd	r24, Z+2	; 0x02
    6160:	93 81       	ldd	r25, Z+3	; 0x03
    6162:	20 e0       	ldi	r18, 0x00	; 0
    6164:	3f ef       	ldi	r19, 0xFF	; 255
    6166:	4f e7       	ldi	r20, 0x7F	; 127
    6168:	57 e4       	ldi	r21, 0x47	; 71
    616a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    616e:	18 16       	cp	r1, r24
    6170:	0c f0       	brlt	.+2      	; 0x6174 <main+0x1910>
    6172:	43 c0       	rjmp	.+134    	; 0x61fa <main+0x1996>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6174:	fe 01       	movw	r30, r28
    6176:	ef 5a       	subi	r30, 0xAF	; 175
    6178:	ff 4f       	sbci	r31, 0xFF	; 255
    617a:	60 81       	ld	r22, Z
    617c:	71 81       	ldd	r23, Z+1	; 0x01
    617e:	82 81       	ldd	r24, Z+2	; 0x02
    6180:	93 81       	ldd	r25, Z+3	; 0x03
    6182:	20 e0       	ldi	r18, 0x00	; 0
    6184:	30 e0       	ldi	r19, 0x00	; 0
    6186:	40 e2       	ldi	r20, 0x20	; 32
    6188:	51 e4       	ldi	r21, 0x41	; 65
    618a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    618e:	dc 01       	movw	r26, r24
    6190:	cb 01       	movw	r24, r22
    6192:	8e 01       	movw	r16, r28
    6194:	05 5b       	subi	r16, 0xB5	; 181
    6196:	1f 4f       	sbci	r17, 0xFF	; 255
    6198:	bc 01       	movw	r22, r24
    619a:	cd 01       	movw	r24, r26
    619c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    61a0:	dc 01       	movw	r26, r24
    61a2:	cb 01       	movw	r24, r22
    61a4:	f8 01       	movw	r30, r16
    61a6:	91 83       	std	Z+1, r25	; 0x01
    61a8:	80 83       	st	Z, r24
    61aa:	1f c0       	rjmp	.+62     	; 0x61ea <main+0x1986>
    61ac:	fe 01       	movw	r30, r28
    61ae:	e7 5b       	subi	r30, 0xB7	; 183
    61b0:	ff 4f       	sbci	r31, 0xFF	; 255
    61b2:	80 e9       	ldi	r24, 0x90	; 144
    61b4:	91 e0       	ldi	r25, 0x01	; 1
    61b6:	91 83       	std	Z+1, r25	; 0x01
    61b8:	80 83       	st	Z, r24
    61ba:	fe 01       	movw	r30, r28
    61bc:	e7 5b       	subi	r30, 0xB7	; 183
    61be:	ff 4f       	sbci	r31, 0xFF	; 255
    61c0:	80 81       	ld	r24, Z
    61c2:	91 81       	ldd	r25, Z+1	; 0x01
    61c4:	01 97       	sbiw	r24, 0x01	; 1
    61c6:	f1 f7       	brne	.-4      	; 0x61c4 <main+0x1960>
    61c8:	fe 01       	movw	r30, r28
    61ca:	e7 5b       	subi	r30, 0xB7	; 183
    61cc:	ff 4f       	sbci	r31, 0xFF	; 255
    61ce:	91 83       	std	Z+1, r25	; 0x01
    61d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61d2:	de 01       	movw	r26, r28
    61d4:	a5 5b       	subi	r26, 0xB5	; 181
    61d6:	bf 4f       	sbci	r27, 0xFF	; 255
    61d8:	fe 01       	movw	r30, r28
    61da:	e5 5b       	subi	r30, 0xB5	; 181
    61dc:	ff 4f       	sbci	r31, 0xFF	; 255
    61de:	80 81       	ld	r24, Z
    61e0:	91 81       	ldd	r25, Z+1	; 0x01
    61e2:	01 97       	sbiw	r24, 0x01	; 1
    61e4:	11 96       	adiw	r26, 0x01	; 1
    61e6:	9c 93       	st	X, r25
    61e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61ea:	fe 01       	movw	r30, r28
    61ec:	e5 5b       	subi	r30, 0xB5	; 181
    61ee:	ff 4f       	sbci	r31, 0xFF	; 255
    61f0:	80 81       	ld	r24, Z
    61f2:	91 81       	ldd	r25, Z+1	; 0x01
    61f4:	00 97       	sbiw	r24, 0x00	; 0
    61f6:	d1 f6       	brne	.-76     	; 0x61ac <main+0x1948>
    61f8:	27 c0       	rjmp	.+78     	; 0x6248 <main+0x19e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61fa:	8e 01       	movw	r16, r28
    61fc:	05 5b       	subi	r16, 0xB5	; 181
    61fe:	1f 4f       	sbci	r17, 0xFF	; 255
    6200:	fe 01       	movw	r30, r28
    6202:	e3 5b       	subi	r30, 0xB3	; 179
    6204:	ff 4f       	sbci	r31, 0xFF	; 255
    6206:	60 81       	ld	r22, Z
    6208:	71 81       	ldd	r23, Z+1	; 0x01
    620a:	82 81       	ldd	r24, Z+2	; 0x02
    620c:	93 81       	ldd	r25, Z+3	; 0x03
    620e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6212:	dc 01       	movw	r26, r24
    6214:	cb 01       	movw	r24, r22
    6216:	f8 01       	movw	r30, r16
    6218:	91 83       	std	Z+1, r25	; 0x01
    621a:	80 83       	st	Z, r24
    621c:	de 01       	movw	r26, r28
    621e:	a9 5b       	subi	r26, 0xB9	; 185
    6220:	bf 4f       	sbci	r27, 0xFF	; 255
    6222:	fe 01       	movw	r30, r28
    6224:	e5 5b       	subi	r30, 0xB5	; 181
    6226:	ff 4f       	sbci	r31, 0xFF	; 255
    6228:	80 81       	ld	r24, Z
    622a:	91 81       	ldd	r25, Z+1	; 0x01
    622c:	8d 93       	st	X+, r24
    622e:	9c 93       	st	X, r25
    6230:	fe 01       	movw	r30, r28
    6232:	e9 5b       	subi	r30, 0xB9	; 185
    6234:	ff 4f       	sbci	r31, 0xFF	; 255
    6236:	80 81       	ld	r24, Z
    6238:	91 81       	ldd	r25, Z+1	; 0x01
    623a:	01 97       	sbiw	r24, 0x01	; 1
    623c:	f1 f7       	brne	.-4      	; 0x623a <main+0x19d6>
    623e:	fe 01       	movw	r30, r28
    6240:	e9 5b       	subi	r30, 0xB9	; 185
    6242:	ff 4f       	sbci	r31, 0xFF	; 255
    6244:	91 83       	std	Z+1, r25	; 0x01
    6246:	80 83       	st	Z, r24
					_delay_ms(500);
					KEYPAD_getPressedKey();
    6248:	0e 94 f6 17 	call	0x2fec	; 0x2fec <KEYPAD_getPressedKey>




					EEPROM_writeByte(avi_place   , (uint8)(temp_test_case>>8) );
    624c:	fe 01       	movw	r30, r28
    624e:	e3 5e       	subi	r30, 0xE3	; 227
    6250:	fe 4f       	sbci	r31, 0xFE	; 254
    6252:	80 81       	ld	r24, Z
    6254:	91 81       	ldd	r25, Z+1	; 0x01
    6256:	9c 01       	movw	r18, r24
    6258:	40 e0       	ldi	r20, 0x00	; 0
    625a:	50 e0       	ldi	r21, 0x00	; 0
    625c:	fe 01       	movw	r30, r28
    625e:	eb 52       	subi	r30, 0x2B	; 43
    6260:	ff 4f       	sbci	r31, 0xFF	; 255
    6262:	80 81       	ld	r24, Z
    6264:	91 81       	ldd	r25, Z+1	; 0x01
    6266:	89 2f       	mov	r24, r25
    6268:	99 27       	eor	r25, r25
    626a:	e8 2f       	mov	r30, r24
    626c:	ca 01       	movw	r24, r20
    626e:	b9 01       	movw	r22, r18
    6270:	4e 2f       	mov	r20, r30
    6272:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <EEPROM_writeByte>
    6276:	fe 01       	movw	r30, r28
    6278:	ed 5b       	subi	r30, 0xBD	; 189
    627a:	ff 4f       	sbci	r31, 0xFF	; 255
    627c:	80 e0       	ldi	r24, 0x00	; 0
    627e:	90 e0       	ldi	r25, 0x00	; 0
    6280:	a0 e2       	ldi	r26, 0x20	; 32
    6282:	b1 e4       	ldi	r27, 0x41	; 65
    6284:	80 83       	st	Z, r24
    6286:	91 83       	std	Z+1, r25	; 0x01
    6288:	a2 83       	std	Z+2, r26	; 0x02
    628a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    628c:	8e 01       	movw	r16, r28
    628e:	01 5c       	subi	r16, 0xC1	; 193
    6290:	1f 4f       	sbci	r17, 0xFF	; 255
    6292:	fe 01       	movw	r30, r28
    6294:	ed 5b       	subi	r30, 0xBD	; 189
    6296:	ff 4f       	sbci	r31, 0xFF	; 255
    6298:	60 81       	ld	r22, Z
    629a:	71 81       	ldd	r23, Z+1	; 0x01
    629c:	82 81       	ldd	r24, Z+2	; 0x02
    629e:	93 81       	ldd	r25, Z+3	; 0x03
    62a0:	20 e0       	ldi	r18, 0x00	; 0
    62a2:	30 e0       	ldi	r19, 0x00	; 0
    62a4:	4a e7       	ldi	r20, 0x7A	; 122
    62a6:	55 e4       	ldi	r21, 0x45	; 69
    62a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    62ac:	dc 01       	movw	r26, r24
    62ae:	cb 01       	movw	r24, r22
    62b0:	f8 01       	movw	r30, r16
    62b2:	80 83       	st	Z, r24
    62b4:	91 83       	std	Z+1, r25	; 0x01
    62b6:	a2 83       	std	Z+2, r26	; 0x02
    62b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    62ba:	fe 01       	movw	r30, r28
    62bc:	ff 96       	adiw	r30, 0x3f	; 63
    62be:	60 81       	ld	r22, Z
    62c0:	71 81       	ldd	r23, Z+1	; 0x01
    62c2:	82 81       	ldd	r24, Z+2	; 0x02
    62c4:	93 81       	ldd	r25, Z+3	; 0x03
    62c6:	20 e0       	ldi	r18, 0x00	; 0
    62c8:	30 e0       	ldi	r19, 0x00	; 0
    62ca:	40 e8       	ldi	r20, 0x80	; 128
    62cc:	5f e3       	ldi	r21, 0x3F	; 63
    62ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    62d2:	88 23       	and	r24, r24
    62d4:	2c f4       	brge	.+10     	; 0x62e0 <main+0x1a7c>
		__ticks = 1;
    62d6:	81 e0       	ldi	r24, 0x01	; 1
    62d8:	90 e0       	ldi	r25, 0x00	; 0
    62da:	9e af       	std	Y+62, r25	; 0x3e
    62dc:	8d af       	std	Y+61, r24	; 0x3d
    62de:	46 c0       	rjmp	.+140    	; 0x636c <main+0x1b08>
	else if (__tmp > 65535)
    62e0:	fe 01       	movw	r30, r28
    62e2:	ff 96       	adiw	r30, 0x3f	; 63
    62e4:	60 81       	ld	r22, Z
    62e6:	71 81       	ldd	r23, Z+1	; 0x01
    62e8:	82 81       	ldd	r24, Z+2	; 0x02
    62ea:	93 81       	ldd	r25, Z+3	; 0x03
    62ec:	20 e0       	ldi	r18, 0x00	; 0
    62ee:	3f ef       	ldi	r19, 0xFF	; 255
    62f0:	4f e7       	ldi	r20, 0x7F	; 127
    62f2:	57 e4       	ldi	r21, 0x47	; 71
    62f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    62f8:	18 16       	cp	r1, r24
    62fa:	64 f5       	brge	.+88     	; 0x6354 <main+0x1af0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62fc:	fe 01       	movw	r30, r28
    62fe:	ed 5b       	subi	r30, 0xBD	; 189
    6300:	ff 4f       	sbci	r31, 0xFF	; 255
    6302:	60 81       	ld	r22, Z
    6304:	71 81       	ldd	r23, Z+1	; 0x01
    6306:	82 81       	ldd	r24, Z+2	; 0x02
    6308:	93 81       	ldd	r25, Z+3	; 0x03
    630a:	20 e0       	ldi	r18, 0x00	; 0
    630c:	30 e0       	ldi	r19, 0x00	; 0
    630e:	40 e2       	ldi	r20, 0x20	; 32
    6310:	51 e4       	ldi	r21, 0x41	; 65
    6312:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6316:	dc 01       	movw	r26, r24
    6318:	cb 01       	movw	r24, r22
    631a:	bc 01       	movw	r22, r24
    631c:	cd 01       	movw	r24, r26
    631e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6322:	dc 01       	movw	r26, r24
    6324:	cb 01       	movw	r24, r22
    6326:	9e af       	std	Y+62, r25	; 0x3e
    6328:	8d af       	std	Y+61, r24	; 0x3d
    632a:	0f c0       	rjmp	.+30     	; 0x634a <main+0x1ae6>
    632c:	80 e9       	ldi	r24, 0x90	; 144
    632e:	91 e0       	ldi	r25, 0x01	; 1
    6330:	9c af       	std	Y+60, r25	; 0x3c
    6332:	8b af       	std	Y+59, r24	; 0x3b
    6334:	8b ad       	ldd	r24, Y+59	; 0x3b
    6336:	9c ad       	ldd	r25, Y+60	; 0x3c
    6338:	01 97       	sbiw	r24, 0x01	; 1
    633a:	f1 f7       	brne	.-4      	; 0x6338 <main+0x1ad4>
    633c:	9c af       	std	Y+60, r25	; 0x3c
    633e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6340:	8d ad       	ldd	r24, Y+61	; 0x3d
    6342:	9e ad       	ldd	r25, Y+62	; 0x3e
    6344:	01 97       	sbiw	r24, 0x01	; 1
    6346:	9e af       	std	Y+62, r25	; 0x3e
    6348:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    634a:	8d ad       	ldd	r24, Y+61	; 0x3d
    634c:	9e ad       	ldd	r25, Y+62	; 0x3e
    634e:	00 97       	sbiw	r24, 0x00	; 0
    6350:	69 f7       	brne	.-38     	; 0x632c <main+0x1ac8>
    6352:	16 c0       	rjmp	.+44     	; 0x6380 <main+0x1b1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6354:	fe 01       	movw	r30, r28
    6356:	ff 96       	adiw	r30, 0x3f	; 63
    6358:	60 81       	ld	r22, Z
    635a:	71 81       	ldd	r23, Z+1	; 0x01
    635c:	82 81       	ldd	r24, Z+2	; 0x02
    635e:	93 81       	ldd	r25, Z+3	; 0x03
    6360:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6364:	dc 01       	movw	r26, r24
    6366:	cb 01       	movw	r24, r22
    6368:	9e af       	std	Y+62, r25	; 0x3e
    636a:	8d af       	std	Y+61, r24	; 0x3d
    636c:	8d ad       	ldd	r24, Y+61	; 0x3d
    636e:	9e ad       	ldd	r25, Y+62	; 0x3e
    6370:	9a af       	std	Y+58, r25	; 0x3a
    6372:	89 af       	std	Y+57, r24	; 0x39
    6374:	89 ad       	ldd	r24, Y+57	; 0x39
    6376:	9a ad       	ldd	r25, Y+58	; 0x3a
    6378:	01 97       	sbiw	r24, 0x01	; 1
    637a:	f1 f7       	brne	.-4      	; 0x6378 <main+0x1b14>
    637c:	9a af       	std	Y+58, r25	; 0x3a
    637e:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(DELAY_BETWEEN_TWO_EEPROM_RW);
					EEPROM_writeByte(avi_place + 1  , (uint8)temp_test_case );
    6380:	fe 01       	movw	r30, r28
    6382:	e3 5e       	subi	r30, 0xE3	; 227
    6384:	fe 4f       	sbci	r31, 0xFE	; 254
    6386:	80 81       	ld	r24, Z
    6388:	91 81       	ldd	r25, Z+1	; 0x01
    638a:	01 96       	adiw	r24, 0x01	; 1
    638c:	cc 01       	movw	r24, r24
    638e:	a0 e0       	ldi	r26, 0x00	; 0
    6390:	b0 e0       	ldi	r27, 0x00	; 0
    6392:	fe 01       	movw	r30, r28
    6394:	eb 52       	subi	r30, 0x2B	; 43
    6396:	ff 4f       	sbci	r31, 0xFF	; 255
    6398:	20 81       	ld	r18, Z
    639a:	bc 01       	movw	r22, r24
    639c:	cd 01       	movw	r24, r26
    639e:	42 2f       	mov	r20, r18
    63a0:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <EEPROM_writeByte>

					avi_place = avi_place + 2; /*increase two bytes, because the test case takes two bytes*/
    63a4:	fe 01       	movw	r30, r28
    63a6:	e3 5e       	subi	r30, 0xE3	; 227
    63a8:	fe 4f       	sbci	r31, 0xFE	; 254
    63aa:	80 81       	ld	r24, Z
    63ac:	91 81       	ldd	r25, Z+1	; 0x01
    63ae:	02 96       	adiw	r24, 0x02	; 2
    63b0:	fe 01       	movw	r30, r28
    63b2:	e3 5e       	subi	r30, 0xE3	; 227
    63b4:	fe 4f       	sbci	r31, 0xFE	; 254
    63b6:	91 83       	std	Z+1, r25	; 0x01
    63b8:	80 83       	st	Z, r24



					if(test_cases_counter == 0) /*So, it the I/O time, So, I will not ask the user to to enter another test or not */
    63ba:	fe 01       	movw	r30, r28
    63bc:	ed 51       	subi	r30, 0x1D	; 29
    63be:	ff 4f       	sbci	r31, 0xFF	; 255
    63c0:	80 81       	ld	r24, Z
    63c2:	88 23       	and	r24, r24
    63c4:	01 f5       	brne	.+64     	; 0x6406 <main+0x1ba2>
					{
						ch1 = '0';
    63c6:	fe 01       	movw	r30, r28
    63c8:	e1 52       	subi	r30, 0x21	; 33
    63ca:	ff 4f       	sbci	r31, 0xFF	; 255
    63cc:	80 e3       	ldi	r24, 0x30	; 48
    63ce:	80 83       	st	Z, r24
						ch2 = '1';
    63d0:	fe 01       	movw	r30, r28
    63d2:	e2 52       	subi	r30, 0x22	; 34
    63d4:	ff 4f       	sbci	r31, 0xFF	; 255
    63d6:	81 e3       	ldi	r24, 0x31	; 49
    63d8:	80 83       	st	Z, r24
						test_cases_counter ++;
    63da:	de 01       	movw	r26, r28
    63dc:	ad 51       	subi	r26, 0x1D	; 29
    63de:	bf 4f       	sbci	r27, 0xFF	; 255
    63e0:	fe 01       	movw	r30, r28
    63e2:	ed 51       	subi	r30, 0x1D	; 29
    63e4:	ff 4f       	sbci	r31, 0xFF	; 255
    63e6:	80 81       	ld	r24, Z
    63e8:	8f 5f       	subi	r24, 0xFF	; 255
    63ea:	8c 93       	st	X, r24
						test_case_bit_number=0;
    63ec:	fe 01       	movw	r30, r28
    63ee:	ee 51       	subi	r30, 0x1E	; 30
    63f0:	ff 4f       	sbci	r31, 0xFF	; 255
    63f2:	10 82       	st	Z, r1
						row=0;
    63f4:	fe 01       	movw	r30, r28
    63f6:	ef 51       	subi	r30, 0x1F	; 31
    63f8:	ff 4f       	sbci	r31, 0xFF	; 255
    63fa:	10 82       	st	Z, r1
						col=0;
    63fc:	fe 01       	movw	r30, r28
    63fe:	e0 52       	subi	r30, 0x20	; 32
    6400:	ff 4f       	sbci	r31, 0xFF	; 255
    6402:	10 82       	st	Z, r1
    6404:	7e cb       	rjmp	.-2308   	; 0x5b02 <main+0x129e>
						continue;
					}


					/*Ask the user if he wants to add another test*/
					LCD_clearScreen();
    6406:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
					LCD_writeString("Add another test");
    640a:	84 eb       	ldi	r24, 0xB4	; 180
    640c:	91 e0       	ldi	r25, 0x01	; 1
    640e:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
					LCD_moveCursor(1,0);
    6412:	81 e0       	ldi	r24, 0x01	; 1
    6414:	60 e0       	ldi	r22, 0x00	; 0
    6416:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
					LCD_writeString("+ : YES | - : NO");
    641a:	85 ec       	ldi	r24, 0xC5	; 197
    641c:	91 e0       	ldi	r25, 0x01	; 1
    641e:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>

					pressed_key = KEYPAD_getPressedKey();
    6422:	0e 94 f6 17 	call	0x2fec	; 0x2fec <KEYPAD_getPressedKey>
    6426:	fe 01       	movw	r30, r28
    6428:	e2 50       	subi	r30, 0x02	; 2
    642a:	ff 4f       	sbci	r31, 0xFF	; 255
    642c:	80 83       	st	Z, r24
    642e:	80 e0       	ldi	r24, 0x00	; 0
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	aa ef       	ldi	r26, 0xFA	; 250
    6434:	b3 e4       	ldi	r27, 0x43	; 67
    6436:	8d ab       	std	Y+53, r24	; 0x35
    6438:	9e ab       	std	Y+54, r25	; 0x36
    643a:	af ab       	std	Y+55, r26	; 0x37
    643c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    643e:	6d a9       	ldd	r22, Y+53	; 0x35
    6440:	7e a9       	ldd	r23, Y+54	; 0x36
    6442:	8f a9       	ldd	r24, Y+55	; 0x37
    6444:	98 ad       	ldd	r25, Y+56	; 0x38
    6446:	20 e0       	ldi	r18, 0x00	; 0
    6448:	30 e0       	ldi	r19, 0x00	; 0
    644a:	4a e7       	ldi	r20, 0x7A	; 122
    644c:	55 e4       	ldi	r21, 0x45	; 69
    644e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6452:	dc 01       	movw	r26, r24
    6454:	cb 01       	movw	r24, r22
    6456:	89 ab       	std	Y+49, r24	; 0x31
    6458:	9a ab       	std	Y+50, r25	; 0x32
    645a:	ab ab       	std	Y+51, r26	; 0x33
    645c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    645e:	69 a9       	ldd	r22, Y+49	; 0x31
    6460:	7a a9       	ldd	r23, Y+50	; 0x32
    6462:	8b a9       	ldd	r24, Y+51	; 0x33
    6464:	9c a9       	ldd	r25, Y+52	; 0x34
    6466:	20 e0       	ldi	r18, 0x00	; 0
    6468:	30 e0       	ldi	r19, 0x00	; 0
    646a:	40 e8       	ldi	r20, 0x80	; 128
    646c:	5f e3       	ldi	r21, 0x3F	; 63
    646e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    6472:	88 23       	and	r24, r24
    6474:	2c f4       	brge	.+10     	; 0x6480 <main+0x1c1c>
		__ticks = 1;
    6476:	81 e0       	ldi	r24, 0x01	; 1
    6478:	90 e0       	ldi	r25, 0x00	; 0
    647a:	98 ab       	std	Y+48, r25	; 0x30
    647c:	8f a7       	std	Y+47, r24	; 0x2f
    647e:	3f c0       	rjmp	.+126    	; 0x64fe <main+0x1c9a>
	else if (__tmp > 65535)
    6480:	69 a9       	ldd	r22, Y+49	; 0x31
    6482:	7a a9       	ldd	r23, Y+50	; 0x32
    6484:	8b a9       	ldd	r24, Y+51	; 0x33
    6486:	9c a9       	ldd	r25, Y+52	; 0x34
    6488:	20 e0       	ldi	r18, 0x00	; 0
    648a:	3f ef       	ldi	r19, 0xFF	; 255
    648c:	4f e7       	ldi	r20, 0x7F	; 127
    648e:	57 e4       	ldi	r21, 0x47	; 71
    6490:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    6494:	18 16       	cp	r1, r24
    6496:	4c f5       	brge	.+82     	; 0x64ea <main+0x1c86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6498:	6d a9       	ldd	r22, Y+53	; 0x35
    649a:	7e a9       	ldd	r23, Y+54	; 0x36
    649c:	8f a9       	ldd	r24, Y+55	; 0x37
    649e:	98 ad       	ldd	r25, Y+56	; 0x38
    64a0:	20 e0       	ldi	r18, 0x00	; 0
    64a2:	30 e0       	ldi	r19, 0x00	; 0
    64a4:	40 e2       	ldi	r20, 0x20	; 32
    64a6:	51 e4       	ldi	r21, 0x41	; 65
    64a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    64ac:	dc 01       	movw	r26, r24
    64ae:	cb 01       	movw	r24, r22
    64b0:	bc 01       	movw	r22, r24
    64b2:	cd 01       	movw	r24, r26
    64b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    64b8:	dc 01       	movw	r26, r24
    64ba:	cb 01       	movw	r24, r22
    64bc:	98 ab       	std	Y+48, r25	; 0x30
    64be:	8f a7       	std	Y+47, r24	; 0x2f
    64c0:	0f c0       	rjmp	.+30     	; 0x64e0 <main+0x1c7c>
    64c2:	80 e9       	ldi	r24, 0x90	; 144
    64c4:	91 e0       	ldi	r25, 0x01	; 1
    64c6:	9e a7       	std	Y+46, r25	; 0x2e
    64c8:	8d a7       	std	Y+45, r24	; 0x2d
    64ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    64cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    64ce:	01 97       	sbiw	r24, 0x01	; 1
    64d0:	f1 f7       	brne	.-4      	; 0x64ce <main+0x1c6a>
    64d2:	9e a7       	std	Y+46, r25	; 0x2e
    64d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    64d8:	98 a9       	ldd	r25, Y+48	; 0x30
    64da:	01 97       	sbiw	r24, 0x01	; 1
    64dc:	98 ab       	std	Y+48, r25	; 0x30
    64de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    64e2:	98 a9       	ldd	r25, Y+48	; 0x30
    64e4:	00 97       	sbiw	r24, 0x00	; 0
    64e6:	69 f7       	brne	.-38     	; 0x64c2 <main+0x1c5e>
    64e8:	14 c0       	rjmp	.+40     	; 0x6512 <main+0x1cae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64ea:	69 a9       	ldd	r22, Y+49	; 0x31
    64ec:	7a a9       	ldd	r23, Y+50	; 0x32
    64ee:	8b a9       	ldd	r24, Y+51	; 0x33
    64f0:	9c a9       	ldd	r25, Y+52	; 0x34
    64f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    64f6:	dc 01       	movw	r26, r24
    64f8:	cb 01       	movw	r24, r22
    64fa:	98 ab       	std	Y+48, r25	; 0x30
    64fc:	8f a7       	std	Y+47, r24	; 0x2f
    64fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    6500:	98 a9       	ldd	r25, Y+48	; 0x30
    6502:	9c a7       	std	Y+44, r25	; 0x2c
    6504:	8b a7       	std	Y+43, r24	; 0x2b
    6506:	8b a5       	ldd	r24, Y+43	; 0x2b
    6508:	9c a5       	ldd	r25, Y+44	; 0x2c
    650a:	01 97       	sbiw	r24, 0x01	; 1
    650c:	f1 f7       	brne	.-4      	; 0x650a <main+0x1ca6>
    650e:	9c a7       	std	Y+44, r25	; 0x2c
    6510:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(DELAY_BETWEEN_CLICKS_IN_MS);

					if('+' == pressed_key)  /*The user wants to add another test case*/
    6512:	fe 01       	movw	r30, r28
    6514:	e2 50       	subi	r30, 0x02	; 2
    6516:	ff 4f       	sbci	r31, 0xFF	; 255
    6518:	80 81       	ld	r24, Z
    651a:	8b 32       	cpi	r24, 0x2B	; 43
    651c:	b1 f4       	brne	.+44     	; 0x654a <main+0x1ce6>
					{
						test_cases_counter++;
    651e:	de 01       	movw	r26, r28
    6520:	ad 51       	subi	r26, 0x1D	; 29
    6522:	bf 4f       	sbci	r27, 0xFF	; 255
    6524:	fe 01       	movw	r30, r28
    6526:	ed 51       	subi	r30, 0x1D	; 29
    6528:	ff 4f       	sbci	r31, 0xFF	; 255
    652a:	80 81       	ld	r24, Z
    652c:	8f 5f       	subi	r24, 0xFF	; 255
    652e:	8c 93       	st	X, r24
						test_case_bit_number=0;
    6530:	fe 01       	movw	r30, r28
    6532:	ee 51       	subi	r30, 0x1E	; 30
    6534:	ff 4f       	sbci	r31, 0xFF	; 255
    6536:	10 82       	st	Z, r1
						row=0;
    6538:	fe 01       	movw	r30, r28
    653a:	ef 51       	subi	r30, 0x1F	; 31
    653c:	ff 4f       	sbci	r31, 0xFF	; 255
    653e:	10 82       	st	Z, r1
						col=0;
    6540:	fe 01       	movw	r30, r28
    6542:	e0 52       	subi	r30, 0x20	; 32
    6544:	ff 4f       	sbci	r31, 0xFF	; 255
    6546:	10 82       	st	Z, r1
    6548:	dc ca       	rjmp	.-2632   	; 0x5b02 <main+0x129e>
					}
					else if('-' == pressed_key) /*The user wants to exit*/
    654a:	fe 01       	movw	r30, r28
    654c:	e2 50       	subi	r30, 0x02	; 2
    654e:	ff 4f       	sbci	r31, 0xFF	; 255
    6550:	80 81       	ld	r24, Z
    6552:	8d 32       	cpi	r24, 0x2D	; 45
    6554:	09 f0       	breq	.+2      	; 0x6558 <main+0x1cf4>
    6556:	d5 ca       	rjmp	.-2646   	; 0x5b02 <main+0x129e>

				/**************Last step Save the available place****************/

				/*So, now I will save the Jump address in memory place saved in variable temp_avi_palce */
				uint16 Jump_palce; /*contains the address of the new Jump place*/
				Jump_palce = temp_avi_palce + 5 + 2*test_cases_counter -1; /* 5 = 3 for IO mapping, 2 for Jump address */
    6558:	fe 01       	movw	r30, r28
    655a:	ed 51       	subi	r30, 0x1D	; 29
    655c:	ff 4f       	sbci	r31, 0xFF	; 255
    655e:	80 81       	ld	r24, Z
    6560:	88 2f       	mov	r24, r24
    6562:	90 e0       	ldi	r25, 0x00	; 0
    6564:	88 0f       	add	r24, r24
    6566:	99 1f       	adc	r25, r25
    6568:	9c 01       	movw	r18, r24
    656a:	fe 01       	movw	r30, r28
    656c:	ec 51       	subi	r30, 0x1C	; 28
    656e:	ff 4f       	sbci	r31, 0xFF	; 255
    6570:	80 81       	ld	r24, Z
    6572:	91 81       	ldd	r25, Z+1	; 0x01
    6574:	82 0f       	add	r24, r18
    6576:	93 1f       	adc	r25, r19
    6578:	fe 01       	movw	r30, r28
    657a:	e4 52       	subi	r30, 0x24	; 36
    657c:	ff 4f       	sbci	r31, 0xFF	; 255
    657e:	04 96       	adiw	r24, 0x04	; 4
    6580:	91 83       	std	Z+1, r25	; 0x01
    6582:	80 83       	st	Z, r24
				EEPROM_writeByte(temp_avi_palce , Jump_palce>>8 ); /*Save MSBs */
    6584:	fe 01       	movw	r30, r28
    6586:	ec 51       	subi	r30, 0x1C	; 28
    6588:	ff 4f       	sbci	r31, 0xFF	; 255
    658a:	80 81       	ld	r24, Z
    658c:	91 81       	ldd	r25, Z+1	; 0x01
    658e:	9c 01       	movw	r18, r24
    6590:	40 e0       	ldi	r20, 0x00	; 0
    6592:	50 e0       	ldi	r21, 0x00	; 0
    6594:	fe 01       	movw	r30, r28
    6596:	e4 52       	subi	r30, 0x24	; 36
    6598:	ff 4f       	sbci	r31, 0xFF	; 255
    659a:	80 81       	ld	r24, Z
    659c:	91 81       	ldd	r25, Z+1	; 0x01
    659e:	89 2f       	mov	r24, r25
    65a0:	99 27       	eor	r25, r25
    65a2:	e8 2f       	mov	r30, r24
    65a4:	ca 01       	movw	r24, r20
    65a6:	b9 01       	movw	r22, r18
    65a8:	4e 2f       	mov	r20, r30
    65aa:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <EEPROM_writeByte>
    65ae:	80 e0       	ldi	r24, 0x00	; 0
    65b0:	90 e0       	ldi	r25, 0x00	; 0
    65b2:	a0 e2       	ldi	r26, 0x20	; 32
    65b4:	b1 e4       	ldi	r27, 0x41	; 65
    65b6:	8f a3       	std	Y+39, r24	; 0x27
    65b8:	98 a7       	std	Y+40, r25	; 0x28
    65ba:	a9 a7       	std	Y+41, r26	; 0x29
    65bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65be:	6f a1       	ldd	r22, Y+39	; 0x27
    65c0:	78 a5       	ldd	r23, Y+40	; 0x28
    65c2:	89 a5       	ldd	r24, Y+41	; 0x29
    65c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    65c6:	20 e0       	ldi	r18, 0x00	; 0
    65c8:	30 e0       	ldi	r19, 0x00	; 0
    65ca:	4a e7       	ldi	r20, 0x7A	; 122
    65cc:	55 e4       	ldi	r21, 0x45	; 69
    65ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    65d2:	dc 01       	movw	r26, r24
    65d4:	cb 01       	movw	r24, r22
    65d6:	8b a3       	std	Y+35, r24	; 0x23
    65d8:	9c a3       	std	Y+36, r25	; 0x24
    65da:	ad a3       	std	Y+37, r26	; 0x25
    65dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    65de:	6b a1       	ldd	r22, Y+35	; 0x23
    65e0:	7c a1       	ldd	r23, Y+36	; 0x24
    65e2:	8d a1       	ldd	r24, Y+37	; 0x25
    65e4:	9e a1       	ldd	r25, Y+38	; 0x26
    65e6:	20 e0       	ldi	r18, 0x00	; 0
    65e8:	30 e0       	ldi	r19, 0x00	; 0
    65ea:	40 e8       	ldi	r20, 0x80	; 128
    65ec:	5f e3       	ldi	r21, 0x3F	; 63
    65ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    65f2:	88 23       	and	r24, r24
    65f4:	2c f4       	brge	.+10     	; 0x6600 <main+0x1d9c>
		__ticks = 1;
    65f6:	81 e0       	ldi	r24, 0x01	; 1
    65f8:	90 e0       	ldi	r25, 0x00	; 0
    65fa:	9a a3       	std	Y+34, r25	; 0x22
    65fc:	89 a3       	std	Y+33, r24	; 0x21
    65fe:	3f c0       	rjmp	.+126    	; 0x667e <main+0x1e1a>
	else if (__tmp > 65535)
    6600:	6b a1       	ldd	r22, Y+35	; 0x23
    6602:	7c a1       	ldd	r23, Y+36	; 0x24
    6604:	8d a1       	ldd	r24, Y+37	; 0x25
    6606:	9e a1       	ldd	r25, Y+38	; 0x26
    6608:	20 e0       	ldi	r18, 0x00	; 0
    660a:	3f ef       	ldi	r19, 0xFF	; 255
    660c:	4f e7       	ldi	r20, 0x7F	; 127
    660e:	57 e4       	ldi	r21, 0x47	; 71
    6610:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    6614:	18 16       	cp	r1, r24
    6616:	4c f5       	brge	.+82     	; 0x666a <main+0x1e06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6618:	6f a1       	ldd	r22, Y+39	; 0x27
    661a:	78 a5       	ldd	r23, Y+40	; 0x28
    661c:	89 a5       	ldd	r24, Y+41	; 0x29
    661e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6620:	20 e0       	ldi	r18, 0x00	; 0
    6622:	30 e0       	ldi	r19, 0x00	; 0
    6624:	40 e2       	ldi	r20, 0x20	; 32
    6626:	51 e4       	ldi	r21, 0x41	; 65
    6628:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    662c:	dc 01       	movw	r26, r24
    662e:	cb 01       	movw	r24, r22
    6630:	bc 01       	movw	r22, r24
    6632:	cd 01       	movw	r24, r26
    6634:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6638:	dc 01       	movw	r26, r24
    663a:	cb 01       	movw	r24, r22
    663c:	9a a3       	std	Y+34, r25	; 0x22
    663e:	89 a3       	std	Y+33, r24	; 0x21
    6640:	0f c0       	rjmp	.+30     	; 0x6660 <main+0x1dfc>
    6642:	80 e9       	ldi	r24, 0x90	; 144
    6644:	91 e0       	ldi	r25, 0x01	; 1
    6646:	98 a3       	std	Y+32, r25	; 0x20
    6648:	8f 8f       	std	Y+31, r24	; 0x1f
    664a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    664c:	98 a1       	ldd	r25, Y+32	; 0x20
    664e:	01 97       	sbiw	r24, 0x01	; 1
    6650:	f1 f7       	brne	.-4      	; 0x664e <main+0x1dea>
    6652:	98 a3       	std	Y+32, r25	; 0x20
    6654:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6656:	89 a1       	ldd	r24, Y+33	; 0x21
    6658:	9a a1       	ldd	r25, Y+34	; 0x22
    665a:	01 97       	sbiw	r24, 0x01	; 1
    665c:	9a a3       	std	Y+34, r25	; 0x22
    665e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6660:	89 a1       	ldd	r24, Y+33	; 0x21
    6662:	9a a1       	ldd	r25, Y+34	; 0x22
    6664:	00 97       	sbiw	r24, 0x00	; 0
    6666:	69 f7       	brne	.-38     	; 0x6642 <main+0x1dde>
    6668:	14 c0       	rjmp	.+40     	; 0x6692 <main+0x1e2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    666a:	6b a1       	ldd	r22, Y+35	; 0x23
    666c:	7c a1       	ldd	r23, Y+36	; 0x24
    666e:	8d a1       	ldd	r24, Y+37	; 0x25
    6670:	9e a1       	ldd	r25, Y+38	; 0x26
    6672:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6676:	dc 01       	movw	r26, r24
    6678:	cb 01       	movw	r24, r22
    667a:	9a a3       	std	Y+34, r25	; 0x22
    667c:	89 a3       	std	Y+33, r24	; 0x21
    667e:	89 a1       	ldd	r24, Y+33	; 0x21
    6680:	9a a1       	ldd	r25, Y+34	; 0x22
    6682:	9e 8f       	std	Y+30, r25	; 0x1e
    6684:	8d 8f       	std	Y+29, r24	; 0x1d
    6686:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6688:	9e 8d       	ldd	r25, Y+30	; 0x1e
    668a:	01 97       	sbiw	r24, 0x01	; 1
    668c:	f1 f7       	brne	.-4      	; 0x668a <main+0x1e26>
    668e:	9e 8f       	std	Y+30, r25	; 0x1e
    6690:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(DELAY_BETWEEN_TWO_EEPROM_RW);
				EEPROM_writeByte(temp_avi_palce+1 , (uint8)Jump_palce); /*Save LSBs*/
    6692:	fe 01       	movw	r30, r28
    6694:	ec 51       	subi	r30, 0x1C	; 28
    6696:	ff 4f       	sbci	r31, 0xFF	; 255
    6698:	80 81       	ld	r24, Z
    669a:	91 81       	ldd	r25, Z+1	; 0x01
    669c:	01 96       	adiw	r24, 0x01	; 1
    669e:	cc 01       	movw	r24, r24
    66a0:	a0 e0       	ldi	r26, 0x00	; 0
    66a2:	b0 e0       	ldi	r27, 0x00	; 0
    66a4:	fe 01       	movw	r30, r28
    66a6:	e4 52       	subi	r30, 0x24	; 36
    66a8:	ff 4f       	sbci	r31, 0xFF	; 255
    66aa:	20 81       	ld	r18, Z
    66ac:	bc 01       	movw	r22, r24
    66ae:	cd 01       	movw	r24, r26
    66b0:	42 2f       	mov	r20, r18
    66b2:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <EEPROM_writeByte>

				/*The last step is to ask the user if he was sure that he wants to save this IC*/
				LCD_clearScreen();
    66b6:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
				LCD_writeString("sure to save ?");
    66ba:	86 ed       	ldi	r24, 0xD6	; 214
    66bc:	91 e0       	ldi	r25, 0x01	; 1
    66be:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
				LCD_moveCursor(1,0);
    66c2:	81 e0       	ldi	r24, 0x01	; 1
    66c4:	60 e0       	ldi	r22, 0x00	; 0
    66c6:	0e 94 c2 23 	call	0x4784	; 0x4784 <LCD_moveCursor>
				LCD_writeString("Press OK if sure");
    66ca:	85 ee       	ldi	r24, 0xE5	; 229
    66cc:	91 e0       	ldi	r25, 0x01	; 1
    66ce:	0e 94 97 23 	call	0x472e	; 0x472e <LCD_writeString>
				pressed_key = KEYPAD_getPressedKey();
    66d2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <KEYPAD_getPressedKey>
    66d6:	fe 01       	movw	r30, r28
    66d8:	e2 50       	subi	r30, 0x02	; 2
    66da:	ff 4f       	sbci	r31, 0xFF	; 255
    66dc:	80 83       	st	Z, r24

				if( OK_BUTTON == pressed_key)
    66de:	fe 01       	movw	r30, r28
    66e0:	e2 50       	subi	r30, 0x02	; 2
    66e2:	ff 4f       	sbci	r31, 0xFF	; 255
    66e4:	80 81       	ld	r24, Z
    66e6:	80 32       	cpi	r24, 0x20	; 32
    66e8:	09 f0       	breq	.+2      	; 0x66ec <main+0x1e88>
    66ea:	21 c1       	rjmp	.+578    	; 0x692e <main+0x20ca>
				{ /*So now change the available place with the new palce*/
					EEPROM_writeByte(0 , Jump_palce>>8 ); /*Save MSBs */
    66ec:	fe 01       	movw	r30, r28
    66ee:	e4 52       	subi	r30, 0x24	; 36
    66f0:	ff 4f       	sbci	r31, 0xFF	; 255
    66f2:	80 81       	ld	r24, Z
    66f4:	91 81       	ldd	r25, Z+1	; 0x01
    66f6:	89 2f       	mov	r24, r25
    66f8:	99 27       	eor	r25, r25
    66fa:	28 2f       	mov	r18, r24
    66fc:	60 e0       	ldi	r22, 0x00	; 0
    66fe:	70 e0       	ldi	r23, 0x00	; 0
    6700:	80 e0       	ldi	r24, 0x00	; 0
    6702:	90 e0       	ldi	r25, 0x00	; 0
    6704:	42 2f       	mov	r20, r18
    6706:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <EEPROM_writeByte>
    670a:	80 e0       	ldi	r24, 0x00	; 0
    670c:	90 e0       	ldi	r25, 0x00	; 0
    670e:	a0 e2       	ldi	r26, 0x20	; 32
    6710:	b1 e4       	ldi	r27, 0x41	; 65
    6712:	89 8f       	std	Y+25, r24	; 0x19
    6714:	9a 8f       	std	Y+26, r25	; 0x1a
    6716:	ab 8f       	std	Y+27, r26	; 0x1b
    6718:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    671a:	69 8d       	ldd	r22, Y+25	; 0x19
    671c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    671e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6720:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6722:	20 e0       	ldi	r18, 0x00	; 0
    6724:	30 e0       	ldi	r19, 0x00	; 0
    6726:	4a e7       	ldi	r20, 0x7A	; 122
    6728:	55 e4       	ldi	r21, 0x45	; 69
    672a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    672e:	dc 01       	movw	r26, r24
    6730:	cb 01       	movw	r24, r22
    6732:	8d 8b       	std	Y+21, r24	; 0x15
    6734:	9e 8b       	std	Y+22, r25	; 0x16
    6736:	af 8b       	std	Y+23, r26	; 0x17
    6738:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    673a:	6d 89       	ldd	r22, Y+21	; 0x15
    673c:	7e 89       	ldd	r23, Y+22	; 0x16
    673e:	8f 89       	ldd	r24, Y+23	; 0x17
    6740:	98 8d       	ldd	r25, Y+24	; 0x18
    6742:	20 e0       	ldi	r18, 0x00	; 0
    6744:	30 e0       	ldi	r19, 0x00	; 0
    6746:	40 e8       	ldi	r20, 0x80	; 128
    6748:	5f e3       	ldi	r21, 0x3F	; 63
    674a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    674e:	88 23       	and	r24, r24
    6750:	2c f4       	brge	.+10     	; 0x675c <main+0x1ef8>
		__ticks = 1;
    6752:	81 e0       	ldi	r24, 0x01	; 1
    6754:	90 e0       	ldi	r25, 0x00	; 0
    6756:	9c 8b       	std	Y+20, r25	; 0x14
    6758:	8b 8b       	std	Y+19, r24	; 0x13
    675a:	3f c0       	rjmp	.+126    	; 0x67da <main+0x1f76>
	else if (__tmp > 65535)
    675c:	6d 89       	ldd	r22, Y+21	; 0x15
    675e:	7e 89       	ldd	r23, Y+22	; 0x16
    6760:	8f 89       	ldd	r24, Y+23	; 0x17
    6762:	98 8d       	ldd	r25, Y+24	; 0x18
    6764:	20 e0       	ldi	r18, 0x00	; 0
    6766:	3f ef       	ldi	r19, 0xFF	; 255
    6768:	4f e7       	ldi	r20, 0x7F	; 127
    676a:	57 e4       	ldi	r21, 0x47	; 71
    676c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    6770:	18 16       	cp	r1, r24
    6772:	4c f5       	brge	.+82     	; 0x67c6 <main+0x1f62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6774:	69 8d       	ldd	r22, Y+25	; 0x19
    6776:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6778:	8b 8d       	ldd	r24, Y+27	; 0x1b
    677a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    677c:	20 e0       	ldi	r18, 0x00	; 0
    677e:	30 e0       	ldi	r19, 0x00	; 0
    6780:	40 e2       	ldi	r20, 0x20	; 32
    6782:	51 e4       	ldi	r21, 0x41	; 65
    6784:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    6788:	dc 01       	movw	r26, r24
    678a:	cb 01       	movw	r24, r22
    678c:	bc 01       	movw	r22, r24
    678e:	cd 01       	movw	r24, r26
    6790:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6794:	dc 01       	movw	r26, r24
    6796:	cb 01       	movw	r24, r22
    6798:	9c 8b       	std	Y+20, r25	; 0x14
    679a:	8b 8b       	std	Y+19, r24	; 0x13
    679c:	0f c0       	rjmp	.+30     	; 0x67bc <main+0x1f58>
    679e:	80 e9       	ldi	r24, 0x90	; 144
    67a0:	91 e0       	ldi	r25, 0x01	; 1
    67a2:	9a 8b       	std	Y+18, r25	; 0x12
    67a4:	89 8b       	std	Y+17, r24	; 0x11
    67a6:	89 89       	ldd	r24, Y+17	; 0x11
    67a8:	9a 89       	ldd	r25, Y+18	; 0x12
    67aa:	01 97       	sbiw	r24, 0x01	; 1
    67ac:	f1 f7       	brne	.-4      	; 0x67aa <main+0x1f46>
    67ae:	9a 8b       	std	Y+18, r25	; 0x12
    67b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67b2:	8b 89       	ldd	r24, Y+19	; 0x13
    67b4:	9c 89       	ldd	r25, Y+20	; 0x14
    67b6:	01 97       	sbiw	r24, 0x01	; 1
    67b8:	9c 8b       	std	Y+20, r25	; 0x14
    67ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67bc:	8b 89       	ldd	r24, Y+19	; 0x13
    67be:	9c 89       	ldd	r25, Y+20	; 0x14
    67c0:	00 97       	sbiw	r24, 0x00	; 0
    67c2:	69 f7       	brne	.-38     	; 0x679e <main+0x1f3a>
    67c4:	14 c0       	rjmp	.+40     	; 0x67ee <main+0x1f8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67c6:	6d 89       	ldd	r22, Y+21	; 0x15
    67c8:	7e 89       	ldd	r23, Y+22	; 0x16
    67ca:	8f 89       	ldd	r24, Y+23	; 0x17
    67cc:	98 8d       	ldd	r25, Y+24	; 0x18
    67ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    67d2:	dc 01       	movw	r26, r24
    67d4:	cb 01       	movw	r24, r22
    67d6:	9c 8b       	std	Y+20, r25	; 0x14
    67d8:	8b 8b       	std	Y+19, r24	; 0x13
    67da:	8b 89       	ldd	r24, Y+19	; 0x13
    67dc:	9c 89       	ldd	r25, Y+20	; 0x14
    67de:	98 8b       	std	Y+16, r25	; 0x10
    67e0:	8f 87       	std	Y+15, r24	; 0x0f
    67e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    67e4:	98 89       	ldd	r25, Y+16	; 0x10
    67e6:	01 97       	sbiw	r24, 0x01	; 1
    67e8:	f1 f7       	brne	.-4      	; 0x67e6 <main+0x1f82>
    67ea:	98 8b       	std	Y+16, r25	; 0x10
    67ec:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(DELAY_BETWEEN_TWO_EEPROM_RW);
					EEPROM_writeByte(1 , (uint8)Jump_palce); /*Save LSBs*/
    67ee:	fe 01       	movw	r30, r28
    67f0:	e4 52       	subi	r30, 0x24	; 36
    67f2:	ff 4f       	sbci	r31, 0xFF	; 255
    67f4:	20 81       	ld	r18, Z
    67f6:	61 e0       	ldi	r22, 0x01	; 1
    67f8:	70 e0       	ldi	r23, 0x00	; 0
    67fa:	80 e0       	ldi	r24, 0x00	; 0
    67fc:	90 e0       	ldi	r25, 0x00	; 0
    67fe:	42 2f       	mov	r20, r18
    6800:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <EEPROM_writeByte>
    6804:	94 c0       	rjmp	.+296    	; 0x692e <main+0x20ca>




			}
			else if('-' == pressed_key) /*Not ready yet*/
    6806:	fe 01       	movw	r30, r28
    6808:	e2 50       	subi	r30, 0x02	; 2
    680a:	ff 4f       	sbci	r31, 0xFF	; 255
    680c:	80 81       	ld	r24, Z
    680e:	8d 32       	cpi	r24, 0x2D	; 45
    6810:	09 f0       	breq	.+2      	; 0x6814 <main+0x1fb0>
    6812:	8d c0       	rjmp	.+282    	; 0x692e <main+0x20ca>
			{
				uint8 x;
				EEPROM_writeByte(7,14);
    6814:	67 e0       	ldi	r22, 0x07	; 7
    6816:	70 e0       	ldi	r23, 0x00	; 0
    6818:	80 e0       	ldi	r24, 0x00	; 0
    681a:	90 e0       	ldi	r25, 0x00	; 0
    681c:	4e e0       	ldi	r20, 0x0E	; 14
    681e:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <EEPROM_writeByte>
				EEPROM_readByte(7,&x);
    6822:	9e 01       	movw	r18, r28
    6824:	21 5d       	subi	r18, 0xD1	; 209
    6826:	3e 4f       	sbci	r19, 0xFE	; 254
    6828:	67 e0       	ldi	r22, 0x07	; 7
    682a:	70 e0       	ldi	r23, 0x00	; 0
    682c:	80 e0       	ldi	r24, 0x00	; 0
    682e:	90 e0       	ldi	r25, 0x00	; 0
    6830:	a9 01       	movw	r20, r18
    6832:	0e 94 32 14 	call	0x2864	; 0x2864 <EEPROM_readByte>
				LCD_clearScreen();
    6836:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
				LCD_integerToString(x);
    683a:	fe 01       	movw	r30, r28
    683c:	e1 5d       	subi	r30, 0xD1	; 209
    683e:	fe 4f       	sbci	r31, 0xFE	; 254
    6840:	80 81       	ld	r24, Z
    6842:	88 2f       	mov	r24, r24
    6844:	90 e0       	ldi	r25, 0x00	; 0
    6846:	0e 94 05 24 	call	0x480a	; 0x480a <LCD_integerToString>
    684a:	80 e0       	ldi	r24, 0x00	; 0
    684c:	90 e0       	ldi	r25, 0x00	; 0
    684e:	aa e7       	ldi	r26, 0x7A	; 122
    6850:	b4 e4       	ldi	r27, 0x44	; 68
    6852:	8b 87       	std	Y+11, r24	; 0x0b
    6854:	9c 87       	std	Y+12, r25	; 0x0c
    6856:	ad 87       	std	Y+13, r26	; 0x0d
    6858:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    685a:	6b 85       	ldd	r22, Y+11	; 0x0b
    685c:	7c 85       	ldd	r23, Y+12	; 0x0c
    685e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6860:	9e 85       	ldd	r25, Y+14	; 0x0e
    6862:	20 e0       	ldi	r18, 0x00	; 0
    6864:	30 e0       	ldi	r19, 0x00	; 0
    6866:	4a e7       	ldi	r20, 0x7A	; 122
    6868:	55 e4       	ldi	r21, 0x45	; 69
    686a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    686e:	dc 01       	movw	r26, r24
    6870:	cb 01       	movw	r24, r22
    6872:	8f 83       	std	Y+7, r24	; 0x07
    6874:	98 87       	std	Y+8, r25	; 0x08
    6876:	a9 87       	std	Y+9, r26	; 0x09
    6878:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    687a:	6f 81       	ldd	r22, Y+7	; 0x07
    687c:	78 85       	ldd	r23, Y+8	; 0x08
    687e:	89 85       	ldd	r24, Y+9	; 0x09
    6880:	9a 85       	ldd	r25, Y+10	; 0x0a
    6882:	20 e0       	ldi	r18, 0x00	; 0
    6884:	30 e0       	ldi	r19, 0x00	; 0
    6886:	40 e8       	ldi	r20, 0x80	; 128
    6888:	5f e3       	ldi	r21, 0x3F	; 63
    688a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    688e:	88 23       	and	r24, r24
    6890:	2c f4       	brge	.+10     	; 0x689c <main+0x2038>
		__ticks = 1;
    6892:	81 e0       	ldi	r24, 0x01	; 1
    6894:	90 e0       	ldi	r25, 0x00	; 0
    6896:	9e 83       	std	Y+6, r25	; 0x06
    6898:	8d 83       	std	Y+5, r24	; 0x05
    689a:	3f c0       	rjmp	.+126    	; 0x691a <main+0x20b6>
	else if (__tmp > 65535)
    689c:	6f 81       	ldd	r22, Y+7	; 0x07
    689e:	78 85       	ldd	r23, Y+8	; 0x08
    68a0:	89 85       	ldd	r24, Y+9	; 0x09
    68a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    68a4:	20 e0       	ldi	r18, 0x00	; 0
    68a6:	3f ef       	ldi	r19, 0xFF	; 255
    68a8:	4f e7       	ldi	r20, 0x7F	; 127
    68aa:	57 e4       	ldi	r21, 0x47	; 71
    68ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    68b0:	18 16       	cp	r1, r24
    68b2:	4c f5       	brge	.+82     	; 0x6906 <main+0x20a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    68b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    68b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    68ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    68bc:	20 e0       	ldi	r18, 0x00	; 0
    68be:	30 e0       	ldi	r19, 0x00	; 0
    68c0:	40 e2       	ldi	r20, 0x20	; 32
    68c2:	51 e4       	ldi	r21, 0x41	; 65
    68c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    68c8:	dc 01       	movw	r26, r24
    68ca:	cb 01       	movw	r24, r22
    68cc:	bc 01       	movw	r22, r24
    68ce:	cd 01       	movw	r24, r26
    68d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    68d4:	dc 01       	movw	r26, r24
    68d6:	cb 01       	movw	r24, r22
    68d8:	9e 83       	std	Y+6, r25	; 0x06
    68da:	8d 83       	std	Y+5, r24	; 0x05
    68dc:	0f c0       	rjmp	.+30     	; 0x68fc <main+0x2098>
    68de:	80 e9       	ldi	r24, 0x90	; 144
    68e0:	91 e0       	ldi	r25, 0x01	; 1
    68e2:	9c 83       	std	Y+4, r25	; 0x04
    68e4:	8b 83       	std	Y+3, r24	; 0x03
    68e6:	8b 81       	ldd	r24, Y+3	; 0x03
    68e8:	9c 81       	ldd	r25, Y+4	; 0x04
    68ea:	01 97       	sbiw	r24, 0x01	; 1
    68ec:	f1 f7       	brne	.-4      	; 0x68ea <main+0x2086>
    68ee:	9c 83       	std	Y+4, r25	; 0x04
    68f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68f2:	8d 81       	ldd	r24, Y+5	; 0x05
    68f4:	9e 81       	ldd	r25, Y+6	; 0x06
    68f6:	01 97       	sbiw	r24, 0x01	; 1
    68f8:	9e 83       	std	Y+6, r25	; 0x06
    68fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68fc:	8d 81       	ldd	r24, Y+5	; 0x05
    68fe:	9e 81       	ldd	r25, Y+6	; 0x06
    6900:	00 97       	sbiw	r24, 0x00	; 0
    6902:	69 f7       	brne	.-38     	; 0x68de <main+0x207a>
    6904:	14 c0       	rjmp	.+40     	; 0x692e <main+0x20ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6906:	6f 81       	ldd	r22, Y+7	; 0x07
    6908:	78 85       	ldd	r23, Y+8	; 0x08
    690a:	89 85       	ldd	r24, Y+9	; 0x09
    690c:	9a 85       	ldd	r25, Y+10	; 0x0a
    690e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    6912:	dc 01       	movw	r26, r24
    6914:	cb 01       	movw	r24, r22
    6916:	9e 83       	std	Y+6, r25	; 0x06
    6918:	8d 83       	std	Y+5, r24	; 0x05
    691a:	8d 81       	ldd	r24, Y+5	; 0x05
    691c:	9e 81       	ldd	r25, Y+6	; 0x06
    691e:	9a 83       	std	Y+2, r25	; 0x02
    6920:	89 83       	std	Y+1, r24	; 0x01
    6922:	89 81       	ldd	r24, Y+1	; 0x01
    6924:	9a 81       	ldd	r25, Y+2	; 0x02
    6926:	01 97       	sbiw	r24, 0x01	; 1
    6928:	f1 f7       	brne	.-4      	; 0x6926 <main+0x20c2>
    692a:	9a 83       	std	Y+2, r25	; 0x02
    692c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
			}


			LCD_clearScreen();/*clear screen at the end*/
    692e:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>

		}/*ending of testing or adding ICs*/

		LCD_clearScreen();/*clear screen at the end*/
    6932:	0e 94 28 24 	call	0x4850	; 0x4850 <LCD_clearScreen>
    6936:	0c 94 af 24 	jmp	0x495e	; 0x495e <main+0xfa>

0000693a <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    693a:	0f 93       	push	r16
    693c:	1f 93       	push	r17
    693e:	df 93       	push	r29
    6940:	cf 93       	push	r28
    6942:	00 d0       	rcall	.+0      	; 0x6944 <TWI_init+0xa>
    6944:	cd b7       	in	r28, 0x3d	; 61
    6946:	de b7       	in	r29, 0x3e	; 62
    6948:	9a 83       	std	Y+2, r25	; 0x02
    694a:	89 83       	std	Y+1, r24	; 0x01
    TWBR = (F_CPU/(2*Config_Ptr->bit_rate))-8;
    694c:	00 e2       	ldi	r16, 0x20	; 32
    694e:	10 e0       	ldi	r17, 0x00	; 0
    6950:	e9 81       	ldd	r30, Y+1	; 0x01
    6952:	fa 81       	ldd	r31, Y+2	; 0x02
    6954:	81 81       	ldd	r24, Z+1	; 0x01
    6956:	92 81       	ldd	r25, Z+2	; 0x02
    6958:	a3 81       	ldd	r26, Z+3	; 0x03
    695a:	b4 81       	ldd	r27, Z+4	; 0x04
    695c:	9c 01       	movw	r18, r24
    695e:	ad 01       	movw	r20, r26
    6960:	22 0f       	add	r18, r18
    6962:	33 1f       	adc	r19, r19
    6964:	44 1f       	adc	r20, r20
    6966:	55 1f       	adc	r21, r21
    6968:	80 e0       	ldi	r24, 0x00	; 0
    696a:	94 e2       	ldi	r25, 0x24	; 36
    696c:	a4 ef       	ldi	r26, 0xF4	; 244
    696e:	b0 e0       	ldi	r27, 0x00	; 0
    6970:	bc 01       	movw	r22, r24
    6972:	cd 01       	movw	r24, r26
    6974:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__udivmodsi4>
    6978:	da 01       	movw	r26, r20
    697a:	c9 01       	movw	r24, r18
    697c:	88 50       	subi	r24, 0x08	; 8
    697e:	f8 01       	movw	r30, r16
    6980:	80 83       	st	Z, r24
	TWSR = 0x00; /*Zero pre_scaler*/
    6982:	e1 e2       	ldi	r30, 0x21	; 33
    6984:	f0 e0       	ldi	r31, 0x00	; 0
    6986:	10 82       	st	Z, r1
	

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    6988:	a2 e2       	ldi	r26, 0x22	; 34
    698a:	b0 e0       	ldi	r27, 0x00	; 0
    698c:	e9 81       	ldd	r30, Y+1	; 0x01
    698e:	fa 81       	ldd	r31, Y+2	; 0x02
    6990:	80 81       	ld	r24, Z
    6992:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /* enable TWI */
    6994:	e6 e5       	ldi	r30, 0x56	; 86
    6996:	f0 e0       	ldi	r31, 0x00	; 0
    6998:	84 e0       	ldi	r24, 0x04	; 4
    699a:	80 83       	st	Z, r24
}
    699c:	0f 90       	pop	r0
    699e:	0f 90       	pop	r0
    69a0:	cf 91       	pop	r28
    69a2:	df 91       	pop	r29
    69a4:	1f 91       	pop	r17
    69a6:	0f 91       	pop	r16
    69a8:	08 95       	ret

000069aa <TWI_start>:

void TWI_start(void)
{
    69aa:	df 93       	push	r29
    69ac:	cf 93       	push	r28
    69ae:	cd b7       	in	r28, 0x3d	; 61
    69b0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    69b2:	e6 e5       	ldi	r30, 0x56	; 86
    69b4:	f0 e0       	ldi	r31, 0x00	; 0
    69b6:	84 ea       	ldi	r24, 0xA4	; 164
    69b8:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    69ba:	e6 e5       	ldi	r30, 0x56	; 86
    69bc:	f0 e0       	ldi	r31, 0x00	; 0
    69be:	80 81       	ld	r24, Z
    69c0:	88 23       	and	r24, r24
    69c2:	dc f7       	brge	.-10     	; 0x69ba <TWI_start+0x10>
}
    69c4:	cf 91       	pop	r28
    69c6:	df 91       	pop	r29
    69c8:	08 95       	ret

000069ca <TWI_stop>:

void TWI_stop(void)
{
    69ca:	df 93       	push	r29
    69cc:	cf 93       	push	r28
    69ce:	cd b7       	in	r28, 0x3d	; 61
    69d0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    69d2:	e6 e5       	ldi	r30, 0x56	; 86
    69d4:	f0 e0       	ldi	r31, 0x00	; 0
    69d6:	84 e9       	ldi	r24, 0x94	; 148
    69d8:	80 83       	st	Z, r24
}
    69da:	cf 91       	pop	r28
    69dc:	df 91       	pop	r29
    69de:	08 95       	ret

000069e0 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    69e0:	df 93       	push	r29
    69e2:	cf 93       	push	r28
    69e4:	0f 92       	push	r0
    69e6:	cd b7       	in	r28, 0x3d	; 61
    69e8:	de b7       	in	r29, 0x3e	; 62
    69ea:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    69ec:	e3 e2       	ldi	r30, 0x23	; 35
    69ee:	f0 e0       	ldi	r31, 0x00	; 0
    69f0:	89 81       	ldd	r24, Y+1	; 0x01
    69f2:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    69f4:	e6 e5       	ldi	r30, 0x56	; 86
    69f6:	f0 e0       	ldi	r31, 0x00	; 0
    69f8:	84 e8       	ldi	r24, 0x84	; 132
    69fa:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    69fc:	e6 e5       	ldi	r30, 0x56	; 86
    69fe:	f0 e0       	ldi	r31, 0x00	; 0
    6a00:	80 81       	ld	r24, Z
    6a02:	88 23       	and	r24, r24
    6a04:	dc f7       	brge	.-10     	; 0x69fc <TWI_writeByte+0x1c>
}
    6a06:	0f 90       	pop	r0
    6a08:	cf 91       	pop	r28
    6a0a:	df 91       	pop	r29
    6a0c:	08 95       	ret

00006a0e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    6a0e:	df 93       	push	r29
    6a10:	cf 93       	push	r28
    6a12:	cd b7       	in	r28, 0x3d	; 61
    6a14:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    6a16:	e6 e5       	ldi	r30, 0x56	; 86
    6a18:	f0 e0       	ldi	r31, 0x00	; 0
    6a1a:	84 ec       	ldi	r24, 0xC4	; 196
    6a1c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    6a1e:	e6 e5       	ldi	r30, 0x56	; 86
    6a20:	f0 e0       	ldi	r31, 0x00	; 0
    6a22:	80 81       	ld	r24, Z
    6a24:	88 23       	and	r24, r24
    6a26:	dc f7       	brge	.-10     	; 0x6a1e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    6a28:	e3 e2       	ldi	r30, 0x23	; 35
    6a2a:	f0 e0       	ldi	r31, 0x00	; 0
    6a2c:	80 81       	ld	r24, Z
}
    6a2e:	cf 91       	pop	r28
    6a30:	df 91       	pop	r29
    6a32:	08 95       	ret

00006a34 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    6a34:	df 93       	push	r29
    6a36:	cf 93       	push	r28
    6a38:	cd b7       	in	r28, 0x3d	; 61
    6a3a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    6a3c:	e6 e5       	ldi	r30, 0x56	; 86
    6a3e:	f0 e0       	ldi	r31, 0x00	; 0
    6a40:	84 e8       	ldi	r24, 0x84	; 132
    6a42:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    6a44:	e6 e5       	ldi	r30, 0x56	; 86
    6a46:	f0 e0       	ldi	r31, 0x00	; 0
    6a48:	80 81       	ld	r24, Z
    6a4a:	88 23       	and	r24, r24
    6a4c:	dc f7       	brge	.-10     	; 0x6a44 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    6a4e:	e3 e2       	ldi	r30, 0x23	; 35
    6a50:	f0 e0       	ldi	r31, 0x00	; 0
    6a52:	80 81       	ld	r24, Z
}
    6a54:	cf 91       	pop	r28
    6a56:	df 91       	pop	r29
    6a58:	08 95       	ret

00006a5a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    6a5a:	df 93       	push	r29
    6a5c:	cf 93       	push	r28
    6a5e:	0f 92       	push	r0
    6a60:	cd b7       	in	r28, 0x3d	; 61
    6a62:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    6a64:	e1 e2       	ldi	r30, 0x21	; 33
    6a66:	f0 e0       	ldi	r31, 0x00	; 0
    6a68:	80 81       	ld	r24, Z
    6a6a:	88 7f       	andi	r24, 0xF8	; 248
    6a6c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    6a6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    6a70:	0f 90       	pop	r0
    6a72:	cf 91       	pop	r28
    6a74:	df 91       	pop	r29
    6a76:	08 95       	ret

00006a78 <__udivmodsi4>:
    6a78:	a1 e2       	ldi	r26, 0x21	; 33
    6a7a:	1a 2e       	mov	r1, r26
    6a7c:	aa 1b       	sub	r26, r26
    6a7e:	bb 1b       	sub	r27, r27
    6a80:	fd 01       	movw	r30, r26
    6a82:	0d c0       	rjmp	.+26     	; 0x6a9e <__udivmodsi4_ep>

00006a84 <__udivmodsi4_loop>:
    6a84:	aa 1f       	adc	r26, r26
    6a86:	bb 1f       	adc	r27, r27
    6a88:	ee 1f       	adc	r30, r30
    6a8a:	ff 1f       	adc	r31, r31
    6a8c:	a2 17       	cp	r26, r18
    6a8e:	b3 07       	cpc	r27, r19
    6a90:	e4 07       	cpc	r30, r20
    6a92:	f5 07       	cpc	r31, r21
    6a94:	20 f0       	brcs	.+8      	; 0x6a9e <__udivmodsi4_ep>
    6a96:	a2 1b       	sub	r26, r18
    6a98:	b3 0b       	sbc	r27, r19
    6a9a:	e4 0b       	sbc	r30, r20
    6a9c:	f5 0b       	sbc	r31, r21

00006a9e <__udivmodsi4_ep>:
    6a9e:	66 1f       	adc	r22, r22
    6aa0:	77 1f       	adc	r23, r23
    6aa2:	88 1f       	adc	r24, r24
    6aa4:	99 1f       	adc	r25, r25
    6aa6:	1a 94       	dec	r1
    6aa8:	69 f7       	brne	.-38     	; 0x6a84 <__udivmodsi4_loop>
    6aaa:	60 95       	com	r22
    6aac:	70 95       	com	r23
    6aae:	80 95       	com	r24
    6ab0:	90 95       	com	r25
    6ab2:	9b 01       	movw	r18, r22
    6ab4:	ac 01       	movw	r20, r24
    6ab6:	bd 01       	movw	r22, r26
    6ab8:	cf 01       	movw	r24, r30
    6aba:	08 95       	ret

00006abc <__prologue_saves__>:
    6abc:	2f 92       	push	r2
    6abe:	3f 92       	push	r3
    6ac0:	4f 92       	push	r4
    6ac2:	5f 92       	push	r5
    6ac4:	6f 92       	push	r6
    6ac6:	7f 92       	push	r7
    6ac8:	8f 92       	push	r8
    6aca:	9f 92       	push	r9
    6acc:	af 92       	push	r10
    6ace:	bf 92       	push	r11
    6ad0:	cf 92       	push	r12
    6ad2:	df 92       	push	r13
    6ad4:	ef 92       	push	r14
    6ad6:	ff 92       	push	r15
    6ad8:	0f 93       	push	r16
    6ada:	1f 93       	push	r17
    6adc:	cf 93       	push	r28
    6ade:	df 93       	push	r29
    6ae0:	cd b7       	in	r28, 0x3d	; 61
    6ae2:	de b7       	in	r29, 0x3e	; 62
    6ae4:	ca 1b       	sub	r28, r26
    6ae6:	db 0b       	sbc	r29, r27
    6ae8:	0f b6       	in	r0, 0x3f	; 63
    6aea:	f8 94       	cli
    6aec:	de bf       	out	0x3e, r29	; 62
    6aee:	0f be       	out	0x3f, r0	; 63
    6af0:	cd bf       	out	0x3d, r28	; 61
    6af2:	09 94       	ijmp

00006af4 <__epilogue_restores__>:
    6af4:	2a 88       	ldd	r2, Y+18	; 0x12
    6af6:	39 88       	ldd	r3, Y+17	; 0x11
    6af8:	48 88       	ldd	r4, Y+16	; 0x10
    6afa:	5f 84       	ldd	r5, Y+15	; 0x0f
    6afc:	6e 84       	ldd	r6, Y+14	; 0x0e
    6afe:	7d 84       	ldd	r7, Y+13	; 0x0d
    6b00:	8c 84       	ldd	r8, Y+12	; 0x0c
    6b02:	9b 84       	ldd	r9, Y+11	; 0x0b
    6b04:	aa 84       	ldd	r10, Y+10	; 0x0a
    6b06:	b9 84       	ldd	r11, Y+9	; 0x09
    6b08:	c8 84       	ldd	r12, Y+8	; 0x08
    6b0a:	df 80       	ldd	r13, Y+7	; 0x07
    6b0c:	ee 80       	ldd	r14, Y+6	; 0x06
    6b0e:	fd 80       	ldd	r15, Y+5	; 0x05
    6b10:	0c 81       	ldd	r16, Y+4	; 0x04
    6b12:	1b 81       	ldd	r17, Y+3	; 0x03
    6b14:	aa 81       	ldd	r26, Y+2	; 0x02
    6b16:	b9 81       	ldd	r27, Y+1	; 0x01
    6b18:	ce 0f       	add	r28, r30
    6b1a:	d1 1d       	adc	r29, r1
    6b1c:	0f b6       	in	r0, 0x3f	; 63
    6b1e:	f8 94       	cli
    6b20:	de bf       	out	0x3e, r29	; 62
    6b22:	0f be       	out	0x3f, r0	; 63
    6b24:	cd bf       	out	0x3d, r28	; 61
    6b26:	ed 01       	movw	r28, r26
    6b28:	08 95       	ret

00006b2a <itoa>:
    6b2a:	fb 01       	movw	r30, r22
    6b2c:	9f 01       	movw	r18, r30
    6b2e:	e8 94       	clt
    6b30:	42 30       	cpi	r20, 0x02	; 2
    6b32:	c4 f0       	brlt	.+48     	; 0x6b64 <itoa+0x3a>
    6b34:	45 32       	cpi	r20, 0x25	; 37
    6b36:	b4 f4       	brge	.+44     	; 0x6b64 <itoa+0x3a>
    6b38:	4a 30       	cpi	r20, 0x0A	; 10
    6b3a:	29 f4       	brne	.+10     	; 0x6b46 <itoa+0x1c>
    6b3c:	97 fb       	bst	r25, 7
    6b3e:	1e f4       	brtc	.+6      	; 0x6b46 <itoa+0x1c>
    6b40:	90 95       	com	r25
    6b42:	81 95       	neg	r24
    6b44:	9f 4f       	sbci	r25, 0xFF	; 255
    6b46:	64 2f       	mov	r22, r20
    6b48:	77 27       	eor	r23, r23
    6b4a:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <__udivmodhi4>
    6b4e:	80 5d       	subi	r24, 0xD0	; 208
    6b50:	8a 33       	cpi	r24, 0x3A	; 58
    6b52:	0c f0       	brlt	.+2      	; 0x6b56 <itoa+0x2c>
    6b54:	89 5d       	subi	r24, 0xD9	; 217
    6b56:	81 93       	st	Z+, r24
    6b58:	cb 01       	movw	r24, r22
    6b5a:	00 97       	sbiw	r24, 0x00	; 0
    6b5c:	a1 f7       	brne	.-24     	; 0x6b46 <itoa+0x1c>
    6b5e:	16 f4       	brtc	.+4      	; 0x6b64 <itoa+0x3a>
    6b60:	5d e2       	ldi	r21, 0x2D	; 45
    6b62:	51 93       	st	Z+, r21
    6b64:	10 82       	st	Z, r1
    6b66:	c9 01       	movw	r24, r18
    6b68:	0c 94 b6 35 	jmp	0x6b6c	; 0x6b6c <strrev>

00006b6c <strrev>:
    6b6c:	dc 01       	movw	r26, r24
    6b6e:	fc 01       	movw	r30, r24
    6b70:	67 2f       	mov	r22, r23
    6b72:	71 91       	ld	r23, Z+
    6b74:	77 23       	and	r23, r23
    6b76:	e1 f7       	brne	.-8      	; 0x6b70 <strrev+0x4>
    6b78:	32 97       	sbiw	r30, 0x02	; 2
    6b7a:	04 c0       	rjmp	.+8      	; 0x6b84 <strrev+0x18>
    6b7c:	7c 91       	ld	r23, X
    6b7e:	6d 93       	st	X+, r22
    6b80:	70 83       	st	Z, r23
    6b82:	62 91       	ld	r22, -Z
    6b84:	ae 17       	cp	r26, r30
    6b86:	bf 07       	cpc	r27, r31
    6b88:	c8 f3       	brcs	.-14     	; 0x6b7c <strrev+0x10>
    6b8a:	08 95       	ret

00006b8c <__udivmodhi4>:
    6b8c:	aa 1b       	sub	r26, r26
    6b8e:	bb 1b       	sub	r27, r27
    6b90:	51 e1       	ldi	r21, 0x11	; 17
    6b92:	07 c0       	rjmp	.+14     	; 0x6ba2 <__udivmodhi4_ep>

00006b94 <__udivmodhi4_loop>:
    6b94:	aa 1f       	adc	r26, r26
    6b96:	bb 1f       	adc	r27, r27
    6b98:	a6 17       	cp	r26, r22
    6b9a:	b7 07       	cpc	r27, r23
    6b9c:	10 f0       	brcs	.+4      	; 0x6ba2 <__udivmodhi4_ep>
    6b9e:	a6 1b       	sub	r26, r22
    6ba0:	b7 0b       	sbc	r27, r23

00006ba2 <__udivmodhi4_ep>:
    6ba2:	88 1f       	adc	r24, r24
    6ba4:	99 1f       	adc	r25, r25
    6ba6:	5a 95       	dec	r21
    6ba8:	a9 f7       	brne	.-22     	; 0x6b94 <__udivmodhi4_loop>
    6baa:	80 95       	com	r24
    6bac:	90 95       	com	r25
    6bae:	bc 01       	movw	r22, r24
    6bb0:	cd 01       	movw	r24, r26
    6bb2:	08 95       	ret

00006bb4 <_exit>:
    6bb4:	f8 94       	cli

00006bb6 <__stop_program>:
    6bb6:	ff cf       	rjmp	.-2      	; 0x6bb6 <__stop_program>
